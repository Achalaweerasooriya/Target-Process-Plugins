define(["tests/common/model.chainfixture"],function(a){return{shouldInitializeValidData:function(b){_(b).defaults({testData:[],context:{type:"bug",id:"15"},data:{},testName:"should initialize with valid data"});if(!b.moduleName&&!b.factory)throw"Required specification parameter is missing";module("[model."+b.moduleName+"] initialize and afterInit",{setup:function(){a.setup(this).setInitialData({testData:b.testData}).createModel({factory:b.factory,context:b.context,data:b.data})},teardown:function(){a.tearDown(this)}}),test(b.testName,function(){var a={},c=[],d=0;this.model.on("afterInit",function(b){a=b.data,c.push(a),d++}),this.model.initialize(),b.fnAsserts.call(this,a,d,c)})},shouldRequestStoreOnInitialize:function(b){_(b).defaults({testData:[],context:{type:"bug",id:"15"},data:{},testName:"should make request to store on initialize"});if(!b.moduleName&&!b.factory)throw"Required specification parameter is missing";if(b.expectedCommands&&(b.expectedCmdFields||b.expectedCmdFieldsArr))throw"expectedCommands and expectedCmdFields(Arr) parameters are mutually exclusive";module("[model."+b.moduleName+":"+b.context.type+"]",{setup:function(){a.setup(this).mockRepository({testData:b.testData}).createModel({factory:b.factory,context:b.context,data:b.data})},teardown:function(){a.tearDown(this)}}),test("should make request to store on initialize",function(){var a=this,c=[],d=[];b.expectedCommands?c=b.expectedCommands:(b.expectedCmdFields&&d.push(b.expectedCmdFields),b.expectedCmdFieldsArr&&(d=d.concat(b.expectedCmdFieldsArr)),_.each(d,function(b){var d={name:"get",type:a.context.assignable.entityType.name},e={id:a.context.assignable.id,fields:["id"]};e.fields=e.fields.concat(b),d.config=Similar.to(e),c.push(Similar.to(d))})),this.repositoryMock.expects().execute(c).andStub(this.repository.execute.tauCreateDelegate(this.repository)),this.model.initialize(),this.mockControl.verify()})}}})