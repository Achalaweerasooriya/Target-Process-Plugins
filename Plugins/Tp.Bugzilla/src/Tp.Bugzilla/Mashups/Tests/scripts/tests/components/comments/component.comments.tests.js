define(["Underscore","jQuery","tau/core/class","tau/configurator","tau/components/component.comments","tests/common/testData","tests/components/common/common.setup","tests/components/component.specs","tau/components/component.commentList","tau/components/component.comment","tau/components/component.comment.new.editor"],function(a,b,c,d,e,f,g,h){var i=function(){function D(a,b){b=b||"<p>Updated text</p>",a=a||k[0].comments[3];var c=a.id;return y([A(n),B([Similar.to({name:"save",type:"comment",config:Similar.to({id:c,$set:Similar.to({description:b}),fields:E})})]),A(n,!0)])}function C(a,b){return{command:a,setup:function(a,b){this.repositoryMock.expects().execute(a).andStub(this.repository.execute.tauCreateDelegate(this.repository)),this.serviceMock.expects().remove(TypeOf.isA(Object)).andStub(b.stub)},stub:function(a){var c=b||arguments.callee._test.executeStub;c.call(arguments.callee._test,a)}}}function B(a,b){return{command:a,setup:function(a,b){this.repositoryMock.expects().execute(a).andStub(this.repository.execute.tauCreateDelegate(this.repository)),this.serviceMock.expects().save(TypeOf.isA(Object)).andStub(b.stub)},stub:function(a){var c=b||arguments.callee._test.executeStub;c.call(arguments.callee._test,a)}}}function A(a,b){return{command:a,setup:function(a){this.repositoryMock.expects().execute(a).andStub(this.repository.execute.tauCreateDelegate(this.repository)),b!==!0&&(z.call(this,"beforeSave"),z.call(this,"afterSave"),z.call(this,"beforeRemove"),z.call(this,"afterRemove"))}}}function z(a){this.repositoryMock.expects().on(Like.is({eventName:a,type:"comment",listener:TypeOf.isA(c)}),TypeOf.isA(Function)).andStub(this.repository.on.tauCreateDelegate(this.repository))}function y(a){return function(b){b.mockRepository(this);var c=a.length;for(var d=0;d<c;d++){var e=a[d],f=e.command,g=e.setup||function(){},h=e.stub||function(){};h._test=this,g.call(this,f,e)}}}function x(a){return a.find(".ui-richeditor__controls__cancel")}function w(a){return a.find(".ui-richeditor__controls__save")}function v(a){return a.find(">.ui-comment-body >.ui-richeditor")}function u(a){var b=a.find(".ui-comments-add-link");equals(b.size(),1,"Add comment link is added"),ok(b.css("display")!=="none","Link is visible"),b.click(),ok(b.css("display")==="none","Link is hidden");var c=b.next().find(".ui-richeditor");equals(c.size(),1,"Rich editor is introduced"),c.find(".ui-richeditor__controls__cancel").click(),ok(b.css("display")!=="none","Link is visible again"),c=b.next().find(".ui-richeditor"),equals(c.size(),0,"Rich editor is removed")}function t(a){var b=a.find(".ui-comments-add-link");equals(b.size(),1,"Add comment link is added"),ok(b.css("display")!=="none","Link is visible"),b.click(),ok(b.css("display")==="none","Link is hidden");var c=b.next().find(".ui-richeditor");return c}function s(a,c){c.isRequester?ok(a.find(">.ui-comment-body").hasClass("tau-comments-requester"),"Marked as comment from requestor"):ok(!a.find(">.ui-comment-body").hasClass("tau-comments-requester"),"Not marked as comment from requestor"),equals(a.find(">.ui-comment-body >.ui-comment-heading > .ui-comment-name").text(),c.name,"Name is valid"),equals(a.find(">.ui-comment-body >.ui-comment-heading > .ui-comment-ago").text(),"("+c.age+")","Age is valid");var d=a.find(">.ui-comment-body >.ui-comment-text").html().toLowerCase(),e=b("<p>"+c.description+"</p>").html().toLowerCase();equals(d,e,"Description is valid"),c.isOwnerComment&&ok(a.find(">.ui-comment-body").is(".ui-commets-comment-owner"),"Owner comment is valid")}function r(a){q(a).click();var b=a.find("> .ui-comment-body > .ui-comment-reply > .ui-richeditor");equals(b.size(),1,"Editor for reply is presented");return b}function q(a){var b=a.find("> .ui-comment-body > .ui-comment-heading > .ui-comment-menu > .reply");return b}function p(a){var b=a.find("> .ui-comment-body > .ui-comment-heading > .ui-comment-menu > .edit");return b}function o(a){var b=a.find("> .ui-comment-body > .ui-comment-heading > .ui-comment-menu > .delete");return b}function i(){var a=f.getDataForComments(),c=[];for(var d=0;d<a.length;d++)c.push(b.extend(!0,{},a[d]));return c}var j=i(),k=i(),l={items:[{id:450,parentId:null,avatar:"/TP/Avatar.ashx?UserId=13&size=32",name:"",description:"First Comment",age:"1 month ago",comments:[{id:451,parentId:450,avatar:"/TP/Avatar.ashx?UserId=256&size=32",name:"Andrew G.",description:"First reply to First Comment <img src='/TP/#Attachment.aspx?AttachmentID=12'/>",age:"2 hours ago",comments:[],deleted:!1,isRequester:!1},{id:452,parentId:450,avatar:"/TP/Avatar.ashx?UserId=254&size=32",name:"John B.",description:"Second reply to First Comment",age:"25 min ago",comments:[],deleted:!1,isRequester:!1}],deleted:!1,isRequester:!0},{id:453,parentId:null,avatar:"/TP/Avatar.ashx?UserId=255&size=32",name:"Tod B.",description:"Second comment",age:"23 days ago",comments:[{id:454,parentId:453,avatar:"/TP/Avatar.ashx?UserId=257&size=32",name:"Sandra R.",description:"Reply to second comment",age:"25 sec ago",comments:[],deleted:!1,isRequester:!1}],deleted:!1,isRequester:!1}]},m=Similar.to({name:"get",type:"bug",config:Similar.to({id:j[0].id,fields:["id",Similar.to({comments:["id","description","createDate","parentId",Similar.to({owner:["id","firstName","lastName","kind"]})],list:!0})]})}),n=[m],E=["id","description","createDate","parentId",Similar.to({owner:["id","firstName","lastName","kind"]})],F=[{name:"should render valid markup",test:function(){var a=this.$el,b=a.find(".ui-all-comments > .ui-comment");equals(b.length,2,"Count of root comments is valid");var c=this.data.items;s(b.eq(0),c[0]);var d=b.eq(0).find(".ui-comments > .ui-comment");equals(d.length,2,"Count of replay on first comment is valid"),s(d.eq(0),c[0].comments[0]),s(d.eq(1),c[0].comments[1]);var e=b.eq(1).find(".ui-comments > .ui-comment");equals(e.length,1,"Count of replay on second comment is valid"),s(e.eq(0),c[1].comments[0]),u(a)}},{name:"should apply editable and deletable permissions",test:function(){var a=this.$el,b=a.find(".ui-all-comments .ui-comment");equals(b.length,5,"Count of comments");for(var c=0,d=b.length-1;c<d;c++){var e=b.eq(c).find("> .ui-comment-body"),f=e.find(".ui-comment-heading > .ui-comment-menu ");ok(e.hasClass("editable"),"Marked as editable"),ok(e.hasClass("deletable"),"Marked as deletable"),equals(f.find(".reply").length,1,"Reply button is added"),equals(f.find(".edit").length,1,"Edit button is added"),equals(f.find(".delete").length,1,"Delete button is added");var g=e.find(".ui-comment-reply > .ui-editor-placeholder");equals(g.size(),1,"Place holder for reply is presented"),equals(g.css("display"),"none","Reply placeholder display")}u(a)}},{name:"should save comment (success)",preSetup:D(),test:function(){var c=this.$el,d=c.find(".ui-comment").eq(4);this.executeStub=function(b){ok(d.hasClass("updating"),"Marked as updating");var c=a.clone(j[0].comments[3]),e=a.extend(c,{description:"<p>Updated text</p>"});b.callbacks.success(e)};var e=d.find(".ui-comment-menu .edit");e.click();var f=v(d);equals(f.size(),1,"Editor is presented");var g="<p>Updated text</p>";f.find("textarea").val(g),w(f).click(),d=this.$el.find(".ui-comment").eq(4);var h=d.find("> .ui-comment-body > .ui-comment-text");equals(h.html().toLowerCase(),g.toLowerCase(),"Comment text is updated"),ok(!d.children(".ui-comment-body").hasClass("updating"),"Not marked as updating"),equals(v(d).length,0,"Count of editors"),ok(!b.contains(h[0],f[0]),"Editor is removed"),e=d.find(".ui-comment-menu .edit"),e.click(),f=v(d),equals(f.find("textarea").val().toLowerCase(),g.toLowerCase(),"Template data is up to date")}},{name:"should reply to comment",preSetup:y([A(n),B([Similar.to({name:"save",type:"comment",config:Similar.to({$set:Similar.to({parentId:454,description:"<p>Updated text</p>",general:Similar.to({id:j[0].id})}),fields:E})})]),A(n,!0)]),test:function(){var a=this.$el,c=a.find(".ui-comment").eq(4),e=r(c);this.executeStub=function(a){var b=c.find("> .ui-comments").children().last();ok(b.hasClass("updating"),"Marked as updating");var e=b.find("> .ui-comment-heading");equals(e.find("> .ui-comment-menu > .edit").size(),0,"Edit button"),equals(e.find("> .ui-comment-menu > .delete").size(),0,"Delete button");var f={id:64,description:"<p>Updated text</p>",createDate:d.getCurrentDate(),parentId:454,owner:{id:23,firstName:"Administrator",lastName:"Administrator",kind:"user"}};a.callbacks.success(f)};var f="<p>Updated text</p>";e.find("textarea").val(f);var g=w(e);equals(g.text(),"Add Reply","Text of reply button"),g.click();var h=this.$el.find(".ui-comment").eq(5),i=h.find("> .ui-comment-body"),j=i.find("> .ui-comment-heading"),k=j.find("> .ui-comment-ago");equals(k.text(),"(Just added)","Creation date label"),equals(j.find("> .ui-comment-menu > .edit").size(),1,"Edit button"),equals(j.find("> .ui-comment-menu > .delete").size(),1,"Delete button");var l=i.find("> .ui-comment-text");equals(l.html().toLowerCase(),f.toLowerCase(),"Comment text is updated"),equals(v(h).size(),0,"Count of editors"),ok(!b.contains(h[0],e[0]),"Editor is removed")}},{name:"should cancel draft reply to comment",test:function(){var a=this.$el,b=a.find(".ui-comment").eq(4),c=r(b),d=x(c);d.click(),ok(c.css("display")==="none","Editor is hidden")}},{name:"should has one editor instance opened for edit/reply/add comments",test:function(){var a=this.$el,b=a.find(".ui-comment").eq(4);ok(!0,"--------- Click reply ---------"),q(b).click();var c=b.find("> .ui-comment-body > .ui-comment-reply > .ui-richeditor");equals(c.size(),1,"Editor for reply is presented"),ok(c.css("display")!=="none","Reply Editor is visible"),ok(!0,"--------- Click edit ---------"),p(b).click(),ok(c.css("display")==="none","Reply Editor is hidden");var d=b.find("> .ui-comment-body > .ui-richeditor");equals(d.size(),1,"Edit Editor is presented"),ok(d.css("display")!=="none","Edit Editor is visible"),ok(!0,"--------- Click add comment link ---------"),u(a),ok(d.css("display")==="none","Edit Editor is hidden")}},{name:"should support delete operation (comments tree leaf)",preSetup:y([A(n),C([Similar.to({name:"remove",type:"comment",config:Similar.to({id:454})})]),A(n,!0)]),test:function(){var a=this.$el,b=a.find(".ui-comment").eq(4);this.executeStub=function(a){ok(b.hasClass("deleting"),"Marked as deleting");var c={};a.callbacks.success(c)},equals(a.find(".ui-comment").size(),5,"Amount of comments before delete");var c=b.find(".ui-comment-menu .delete");c.click(),equals(this.$el.find(".ui-comment").size(),4,"Amount of comments after delete")}},{name:"should support delete operation (parent comment)",preSetup:D(k[0].comments[0],"DELETED"),test:function(){var b=this.$el,c=b.find(".ui-comment").eq(0);this.executeStub=function(b){ok(c.hasClass("updating"),"Marked as updating");var d=a.clone(k[0].comments[0]),e=a.extend(d,{description:"DELETED"});b.callbacks.success(e)};var d=c.find("> .ui-comment-body > .ui-comment-heading > .ui-comment-menu > .delete");d.click(),c=this.$el.find(".ui-comment").eq(0),equals(c.find(".ui-comment-body").html().trim(),"DELETED","Text is changed")}},{name:"should add new comment",preSetup:y([A(n),B([Similar.to({name:"save",type:"comment",config:Similar.to({$set:Similar.to({parentId:null,description:"Just added comment",general:Similar.to({id:j[0].id})}),fields:E})})]),A(n,!0)]),test:function(){var b=this.$el,c=a.clone(k[0].comments[1]);a(c).extend({id:10,description:"Just added comment",createDate:d.getCurrentDate()}),this.executeStub=function(a){ok(b.find(".ui-all-comments").children().last().hasClass("updating"),"Marked as updating"),a.callbacks.success(c)};var e=t(b),f=b.find(".ui-comment").size();equals(f,5,"Original amount of comments");var g=e.find("textarea");g.val("Just added comment");var h=w(e);h.click();var i=this.$el.find(".ui-comment").size();equals(i,6,"New amount of comments");var j=this.$el.find(".ui-comment").last();s(j,{name:"Tod B.",description:c.description,age:"Just added"}),u(this.$el)}},{name:"should mark comment as DELETED after new child comment adding",preSetup:y([A(n),B([Similar.to({name:"save",type:"comment",config:Similar.to({$set:Similar.to({parentId:454,description:"Just added comment",general:Similar.to({id:j[0].id})}),fields:E})})],function(b){var c=a.clone(k[0].comments[3]);a(c).extend({id:100,description:"Just added comment",createDate:d.getCurrentDate(),parentId:454}),b.callbacks.success(c)}),A(n,!0),B([Similar.to({name:"save",type:"comment",config:Similar.to({id:454,$set:Similar.to({description:"DELETED"}),fields:E})})],function(b){var c=a.clone(k[0].comments[3]),d=a.extend(c,{description:"DELETED"});b.callbacks.success(d)}),A(n,!0)]),test:function(){var a=this.$el,b=a.find(".ui-comment").size();equals(b,5,"Amount before");var c=a.find(".comment-id-454");equals(c.find(".ui-comment-text").eq(0).text().trim(),"Reply to second comment","Original comment text");var d=r(c);d.find("textarea").val("Just added comment"),w(d).click(),equals(this.$el.find(".ui-comment").size(),6,"Amount after reply"),c=this.$el.find(".comment-id-454"),equals(c.find(".ui-comment-text").eq(0).text().trim(),"Reply to second comment","Original comment text");var e=c.find("> .ui-comment-body > .ui-comment-heading > .ui-comment-menu > .delete");e.click();var f=this.$el.find(".ui-comment").size();equals(f,6,"Amount after delete"),c=this.$el.find(".comment-id-454"),equals(c.find(".ui-comment-body").html().trim(),"DELETED","Text is changed")}},{name:"should delete empty comments branch when the last comment is being deleted",preSetup:y([A(n),B([Similar.to({name:"save",type:"comment",config:Similar.to({$set:Similar.to({parentId:454,description:"Just added comment",general:Similar.to({id:j[0].id})}),fields:E})})],function(b){var c=a.clone(k[0].comments[3]);a(c).extend({id:100,description:"Just added comment",createDate:d.getCurrentDate(),parentId:454}),b.callbacks.success(c)}),A(n,!0),B([Similar.to({name:"save",type:"comment",config:Similar.to({id:454,$set:Similar.to({description:"DELETED"}),fields:E})})],function(b){var c=a.clone(k[0].comments[3]),d=a.extend(c,{description:"DELETED"});b.callbacks.success(d)}),A(n,!0),C([Similar.to({name:"remove",type:"comment",config:Similar.to({id:100})})],function(a){a.callbacks.success({})}),C([Similar.to({name:"remove",type:"comment",config:Similar.to({id:454})})],function(a){a.callbacks.success({})}),A(n,!0)]),test:function(){var a=this.$el.find(".ui-comment").size();equals(a,5,"Amount before");var b=this.$el.find(".comment-id-454");equals(b.find(".ui-comment-text").eq(0).text().trim(),"Reply to second comment","Original comment text");var c=r(b);c.find("textarea").val("Just added comment"),w(c).click(),equals(this.$el.find(".ui-comment").size(),6,"Amount after reply"),b=this.$el.find(".comment-id-454"),equals(b.find(".ui-comment-text").eq(0).text().trim(),"Reply to second comment","Original comment text");var d=o(b);d.click();var e=this.$el.find(".ui-comment").size();equals(e,6,"Amount after delete"),b=this.$el.find(".comment-id-454"),equals(b.find(".ui-comment-body").html().trim(),"DELETED","Text is changed");var f=this.$el.find(".comment-id-100");o(f).click(),a=this.$el.find(".ui-comment").size(),equals(a,4,"Amount after removing comments branch")}},{name:"should apply ID:XXX replacement rule",preSetup:y([A(n),B([Similar.to({name:"save",type:"comment",config:Similar.to({$set:Similar.to({parentId:null,description:"ID:111 as well as the text id:123 should be replaced with link. And also <b>this</b>Id:777",general:Similar.to({id:j[0].id})}),fields:E})})]),A(n,!0),{command:[Similar.to({name:"get",type:"general",config:Similar.to({id:"111",fields:["id","name",Similar.to({entityType:["id","name"]})]})}),Similar.to({name:"get",type:"general",config:Similar.to({id:"123",fields:["id","name",Similar.to({entityType:["id","name"]})]})}),Similar.to({name:"get",type:"general",config:Similar.to({id:"777",fields:["id","name",Similar.to({entityType:["id","name"]})]})})],setup:function(a,b){this.repositoryMock.expects().execute(a).andStub(b.stub)},stub:function(a){var b=arguments.callee._test,c=b.onProcessShortcut;for(var d=0;d<a.length;d++)c.call(b,a[d])}}]),test:function(){var b=this,c=this.$el,e=a.clone(k[0].comments[1]);a(e).extend({id:10,description:"ID:111 as well as the text id:123 should be replaced with link. And also <b>this</b>Id:777",createDate:d.getCurrentDate()}),this.executeStub=function(a){ok(c.find(".ui-all-comments").children().last().hasClass("updating"),"Marked as updating"),a.callbacks.success(e)},this.onProcessShortcut=function(a){a.callbacks.success({data:{id:a.config.id,name:"Entity "+a.config.id,entityType:{id:1,name:"task"}}})};var f=t(c),g=c.find(".ui-comment").size();equals(g,5,"Original amount of comments");var h=f.find("textarea");h.val("ID:111 as well as the text id:123 should be replaced with link. And also <b>this</b>Id:777");var i=w(f);i.click();var j=this.$el.find(".comment-id-10"),l=j.find(".ui-comment-text a");equals(l.eq(0).html(),"#111&nbsp;Entity 111","Entity 111"),equals(l.eq(1).html(),"#123&nbsp;Entity 123","Entity 123"),equals(l.eq(2).html(),"#777&nbsp;Entity 777","Entity 777"),p(j).click();var m=j.find("textarea").val();equals(m,"ID:111 as well as the text id:123 should be replaced with link. And also <b>this</b>Id:777","Original text (without links) is restored for edit"),j.find(".ui-richeditor__controls__cancel").click(),l=j.find(".ui-comment-text a"),equals(l.length,3,"Cancel edit leave links as are")}}],G=g.create("[component.comments]",i,e),H={beforeSave:Like.is({eventName:"beforeSave",type:"comment",listener:TypeOf.isA(c)}),afterSave:Like.is({eventName:"afterSave",type:"comment",listener:TypeOf.isA(c)}),beforeRemove:Like.is({eventName:"beforeRemove",type:"comment",listener:TypeOf.isA(c)}),afterRemove:Like.is({eventName:"afterRemove",type:"comment",listener:TypeOf.isA(c)})},I=[n,{command:H.beforeSave,_operation:"on"},{command:H.afterSave,_operation:"on"},{command:H.beforeRemove,_operation:"on"},{command:H.afterRemove,_operation:"on"}];h.create(G,{context:{type:"bug",id:j[0].id}}).viewShouldFollowDataComponentLifeCycle().modelShouldReturnData(l,I).viewShouldPassTests(F).done()};return{run:i}})