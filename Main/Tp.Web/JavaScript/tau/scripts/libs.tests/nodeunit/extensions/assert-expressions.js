define([],function(){function _isObjExpected(actual,expected,oneway,rchain){oneway=oneway||!1,rchain=rchain||[];if(actual===expected)return!0;if(expected instanceof Expression)return expected.assert(actual);if(actual===null||expected===null)return!1;if(actual instanceof Array&&expected instanceof Array){if(actual.length!=expected.length)return!1;for(var i=0;i<actual.length;i++){var result=_recurseIsObjExpected(actual[i],expected[i],oneway,rchain,expected[i]);if(!result)return!1}return!0}if(typeof actual=="object"&&typeof expected=="object"){for(var i in expected){var result=_recurseIsObjExpected(actual[i],expected[i],oneway,rchain,expected[i]);if(!result)return!1}if(!oneway)for(var i in actual)if(!_isObjExpected(actual[i],expected[i]))return!1;return!0}return!1}function _recurseIsObjExpected(actual,expected,oneway,rchain,loopvar){if(loopvar&&typeof loopvar=="object"){for(var i=0;i<rchain.length;i++)if(loopvar===rchain[i])throw new Error("Circular Reference detected in the object!");var chainCount=rchain.length;rchain.push(loopvar);var result=_isObjExpected(actual,expected,oneway,rchain);return rchain.splice(chainCount),result}return _isObjExpected(actual,expected,oneway,rchain)}function Expression(type,param){this.type=type,this.param=param}var ExpressionType={ANYTHING:0,NOT:1,INSTANCEOF:2,SUPERSET:3,REGEX:4,ANYOF:5,ALLOF:6,CUSTOM:7,ERROR:8};Expression.prototype.assert=function(actual){switch(this.type){case ExpressionType.ANYTHING:return!0;case ExpressionType.NOT:return!_isObjExpected(actual,this.param);case ExpressionType.INSTANCEOF:return actual instanceof this.param;case ExpressionType.SUPERSET:return _isObjExpected(actual,this.param,!0);case ExpressionType.REGEX:return this.param.test(actual);case ExpressionType.ANYOF:for(var i=0;i<this.param.length;i++)if(_isObjExpected(actual,this.param[i]))return!0;return!1;case ExpressionType.ALLOF:for(var i=0;i<this.param.length;i++)if(!_isObjExpected(actual,this.param[i]))return!1;return!0;case ExpressionType.CUSTOM:return this.param(actual);case ExpressionType.ERROR:var exOk=!0;return"name"in this.param&&(exOk=exOk&&this.param.name===actual.name),"message"in this.param&&(exOk=exOk&&this.param.message===actual.message),"type"in this.param&&(exOk=exOk&&_isObjExpected(actual,this.param.type)),exOk;case ExpressionType.INTEGER:return isNaN(parseInt(actual,10))===!1}},Expression.prototype.tostring=function(){switch(this.type){case ExpressionType.ANYTHING:return"is.anything";case ExpressionType.NOT:return"is.not("+tostring(this.param)+")";case ExpressionType.INSTANCEOF:return"is.instanceOf("+_getClassName(this.param)+")";case ExpressionType.SUPERSET:return"is.objectThatIncludes("+tostring(this.param)+")";case ExpressionType.REGEX:return"is.regex("+this.param.toString()+")";case ExpressionType.ANYOF:return"is.anyOf("+tostring(this.param)+")";case ExpressionType.ALLOF:return"is.allOf("+tostring(this.param)+")";case ExpressionType.CUSTOM:return"is.custom(function)";case ExpressionType.ERROR:return _isObjExpected(this.param,{})?"is.exception()":"is.exception("+tostring(this.param)+")"}};var ExpressionFactory={anything:new Expression(ExpressionType.ANYTHING),not:function(param){return new Expression(ExpressionType.NOT,param)},instanceOf:function(param){if(typeof param!="function")throw new Error("Invalid argument to is.instanceOf() , argument must be a Class");return new Expression(ExpressionType.INSTANCEOF,param)},objectThatIncludes:function(param){return new Expression(ExpressionType.SUPERSET,param)},regex:function(param){if(param instanceof RegExp)return new Expression(ExpressionType.REGEX,param);throw new Error("Invalid argument to is.regex() , argument must be regex")},anyOf:function(param){if(param instanceof Array)return new Expression(ExpressionType.ANYOF,param);throw new Error("Invalid argument to is.anyOf() , argument must be an Array")},allOf:function(param){if(param instanceof Array)return new Expression(ExpressionType.ALLOF,param);throw new Error("Invalid argument to is.allOf() , argument must be an Array")},custom:function(param){if(!$.isFunction(param))throw new Error("Invalid argument to is.custom() , argument must be a Function that returns a boolean value");return new Expression(ExpressionType.CUSTOM,param)},exception:function(param){if(typeof param=="string")return new Expression(ExpressionType.ERROR,{message:param});typeof param=="undefined"&&(param={});if(typeof param!="object")throw new Error("Invalid argument to is.exception() , argument must be an object or string");if("type"in param&&typeof param["type"]!="function")throw new Error("Invalid argument to is.exception() , the type attribute of the parameter must be a Class");return"type"in param&&(param.type=new Expression(ExpressionType.INSTANCEOF,param.type)),new Expression(ExpressionType.ERROR,param)},integer:function(param){return new Expression(ExpressionType.INTEGER)}};return{ExpressionFactory:ExpressionFactory,assert:function(actual,expected){return actual===expected||_isObjExpected(actual,expected)}}})