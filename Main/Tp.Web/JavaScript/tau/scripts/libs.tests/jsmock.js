/*
 *	JSMock 1.2.2, a mock object library for JavaScript
 * Copyright (C) 2006 Justin DeWind
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

function MockControl(){this.__expectationMatcher=new ExpectationMatcher,this.__lastMock=null,this.__lastCallName=null}function ExpectationMatcher(){this.__expectationBehaviorList=[],this.__actualBehaviorList=[],this.__discrepancy=null}function InvocationBehavior(caller,method,methodArguments){this.caller=caller,this.method=method,this.methodArguments=methodArguments}function TypeOf(type){if(typeof type!="function")throw new Error("Can only take constructors");this.type=type}function Like(expected){this.expected=expected}function Similar(expected){this.expected=expected}function Discrepancy(message,behavior){if(behavior.constructor!=InvocationBehavior)throw new Error("The behavior can only be an InvocationBehavior object");this.message=message,this.behavior=behavior}JSMock={extend:function(object){var mockControl=new MockControl;object.createMock=function(objectToMock){return mockControl.createMock(objectToMock)},object.resetMocks=function(){mockControl.reset()},object.verifyMocks=function(){mockControl.verify()},object.tearDown?object.tearDown.constructor==Function&&(object.__oldTearDown__=object.tearDown,object.tearDown=function(){object.__oldTearDown__(),object.verifyMocks()}):object.tearDown=function(){object.verifyMocks()}}},MockControl.prototype={createMock:function(objectToMock){var mock={calls:[],expects:function(){return this.__recording=!0,this},__recording:!1};mock.expect=mock.expects;if(objectToMock!=null)if(typeof objectToMock=="function")this.__createMethods(objectToMock,mock),this.__createMethods(new objectToMock,mock);else{if(typeof objectToMock!="object")throw new Error("Cannot mock out a "+typeof objectToMock);this.__createMethods(objectToMock,mock)}var self=this;return mock.addMockMethod=function(method){self.__createMethod(self,mock,method)},mock},andReturn:function(returnValue){this.__verifyLastMockNotNull("Cannot set return value without an expectation"),this.__initializeReturnExpectationForMock(),this.__lastMock.calls[this.__lastCallName].push(function(){return returnValue})},andThrow:function(throwMsg){this.__verifyLastMockNotNull("Cannot throw error without an expectation"),this.__initializeReturnExpectationForMock(),this.__lastMock.calls[this.__lastCallName].push(function(){throw new Error(throwMsg)})},andStub:function(block){this.__verifyLastMockNotNull("Cannot stub without an expectation");if(typeof block!="function")throw new Error("Stub must be a function");this.__initializeReturnExpectationForMock(),this.__lastMock.calls[this.__lastCallName].push(function(){return block.apply(this,arguments)})},reset:function(){this.__expectationMatcher.reset()},verify:function(){if(!this.__expectationMatcher.matches())throw discrepancy=this.__expectationMatcher.discrepancy(),message=discrepancy.message,method=discrepancy.behavior.method,formattedArgs=ArgumentFormatter.format(discrepancy.behavior.methodArguments),this.__expectationMatcher.reset(),new Error(message+": "+method+"("+formattedArgs+")");this.__expectationMatcher.reset()},__createMethods:function(object,mock){for(var property in object)this.__isPublicMethod(object,property)&&this.__createMethod(this,mock,property)},__createMethod:function(control,mock,method){mock[method]=function(){if(mock.__recording)return control.__lastMock=mock,control.__lastCallName=method,control.__expectationMatcher.addExpectedMethodCall(mock,method,arguments),mock.__recording=!1,control;control.__expectationMatcher.addActualMethodCall(mock,method,arguments);if(mock.calls[method]!=null){var returnValue=mock.calls[method].shift();if(typeof returnValue=="function")return returnValue.apply(this,arguments)}}},__isPublicMethod:function(object,property){try{return typeof object[property]=="function"&&property.charAt(0)!="_"}catch(e){return!1}},__verifyLastMockNotNull:function(throwMsg){if(this.__lastMock==null)throw new Error(throwMsg)},__initializeReturnExpectationForMock:function(){typeof this.__lastMock.calls[this.__lastCallName]=="undefined"&&(this.__lastMock.calls[this.__lastCallName]=[])}},ExpectationMatcher.prototype={addExpectedMethodCall:function(caller,method,methodArguments){this.__expectationBehaviorList.push(new InvocationBehavior(caller,method,methodArguments))},addActualMethodCall:function(caller,method,methodArguments){this.__actualBehaviorList.push(new InvocationBehavior(caller,method,methodArguments))},matches:function(){var self=this,matches=!0;return this.__expectationBehaviorList.eachIndexForJsMock(function(index,expectedBehavior){var actualBehavior=self.__actualBehaviorList.length>index?self.__actualBehaviorList[index]:null;matches&&(actualBehavior===null?(self.__discrepancy=new Discrepancy("Expected function not called",expectedBehavior),matches=!1):expectedBehavior.method!=actualBehavior.method?(self.__discrepancy=new Discrepancy("Surprise call. Expected: ["+expectedBehavior.method+"] , but was ["+actualBehavior.method+"]",actualBehavior),matches=!1):expectedBehavior.caller!=actualBehavior.caller?(self.__discrepancy=new Discrepancy("Surprise call from unexpected caller",actualBehavior),matches=!1):self.__matchArguments(expectedBehavior.methodArguments,actualBehavior.methodArguments)||(self.__discrepancy=new Discrepancy("Unexpected Arguments. Expected: ["+JSON.stringify(expectedBehavior.methodArguments)+", but was:"+JSON.stringify(actualBehavior.methodArguments)+" for method ",actualBehavior),matches=!1))}),this.__actualBehaviorList.length>this.__expectationBehaviorList.length&&matches&&(this.__discrepancy=new Discrepancy("Surprise call",this.__actualBehaviorList[this.__expectationBehaviorList.length]),matches=!1),matches},reset:function(){this.__expectationBehaviorList=[],this.__actualBehaviorList=[],this.__discrepancy=null},discrepancy:function(){return this.__discrepancy},__matchArguments:function(expectedArgs,actualArgs){var expectedArray=this.__convertArgumentsToArray(expectedArgs),actualArray=this.__convertArgumentsToArray(actualArgs);return ArgumentMatcher.matches(expectedArray,actualArray)},__convertArgumentsToArray:function(args){var convertedArguments=[];for(var i=0;i<args.length;i++)convertedArguments[i]=args[i];return convertedArguments}},TypeOf.isA=function(type){return new TypeOf(type)},Like.is=function(like){return new Like(like)},Similar.to=function(simular){return new Similar(simular)},ArgumentMatcher={matches:function(expected,actual){return this.__delegateMatching(expected,actual)},__delegateMatching:function(expected,actual){return expected==null?this.__match(expected,actual):expected.constructor==TypeOf?this.__match(expected.type,actual.constructor):expected.constructor==Like?this.__matchLike(expected.expected,actual):expected.constructor==Similar?this.__matchSimilar(expected.expected,actual):expected.constructor==Array?this.__matchArrays(expected,actual):this.__match(expected,actual)},__getProperties:function(object){var properties=[];for(var key in object)properties.push(key);return properties.sort(),properties},__matchLike:function(expected,actual){var expectedProperties=this.__getProperties(expected),actualProperties=this.__getProperties(actual),ret=this.__matchArrays(expectedProperties,actualProperties);if(ret){var expectedValues=[],actualValues=[];for(var key in expected){if(key==undefined||key==null)continue;var expKey=expected[key],actKey=actual[key];expKey&&actKey&&expKey instanceof Object&&actKey instanceof Object?(expectedValues.push(!0),actualValues.push(this.__delegateMatching(expKey,actKey))):(expectedValues.push(expKey),actualValues.push(actKey))}ret=this.__matchArrays(expectedValues,actualValues)}return ret},__matchSimilar:function(expected,actual){var ret=!0,expectedValues=[],actualValues=[];for(var key in expected){if(key==undefined||key==null)continue;var expKey=expected[key],actKey=actual[key];expKey&&actKey&&expKey instanceof Object&&actKey instanceof Object?(expectedValues.push(!0),actualValues.push(this.__delegateMatching(expKey,actKey))):(expectedValues.push(expKey),actualValues.push(actKey))}return ret=this.__matchArrays(expectedValues,actualValues),ret},__match:function(expected,actual){return expected==actual},__matchArrays:function(expected,actual){if(actual==null)return!1;if(actual.constructor!=Array)return!1;if(expected.length!=actual.length)return!1;for(var i=0;i<expected.length;i++)if(!this.__delegateMatching(expected[i],actual[i]))return!1;return!0}},ArgumentFormatter={format:function(args){var formattedArgs="";for(var i=0;i<args.length;i++)if(args[i]==null)formattedArgs+=formattedArgs==""?"null":", null";else if(args[i].constructor==TypeOf||args[i].constructor==Function){var func=args[i].constructor==TypeOf?args[i].type:args[i];formattedArgs+=formattedArgs==""?this.__formatFunction(func):", "+this.__formatFunction(func)}else typeof args[i]=="string"?formattedArgs+=formattedArgs==""?'"'+args[i].toString()+'"':', "'+args[i].toString()+'"':args[i].constructor==Array?formattedArgs+=formattedArgs==""?"["+this.format(args[i])+"]":", ["+this.format(args[i])+"]":formattedArgs+=formattedArgs==""?args[i].toString():", "+args[i].toString();return formattedArgs},__formatFunction:function(func){if(func==Array)return"Array";if(func==Date)return"Date";if(func==Object)return"Object";if(func==String)return"String";if(func==Function)return"Function";if(func==RegExp)return"RegExp";if(func==Error)return"Error";if(func==Number)return"Number";if(func==Boolean)return"Boolean";var formattedFunc=func.toString().match(/function (\w+)/);return formattedFunc==null?"{{Closure}}":formattedFunc[1]}},Array.prototype.eachIndexForJsMock=function(block){for(var index=0;index<this.length;index++)block(index,this[index])}