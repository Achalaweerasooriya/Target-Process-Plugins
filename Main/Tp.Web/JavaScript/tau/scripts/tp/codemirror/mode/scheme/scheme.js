define(["tp/codemirror/lib/codemirror"],function(e){e.defineMode("scheme",function(){function e(e){for(var t={},n=e.split(" "),r=0;r<n.length;++r)t[n[r]]=!0;return t}function t(e,t,n){this.indent=e,this.type=t,this.prev=n}function n(e,n,r){e.indentStack=new t(n,r,e.indentStack)}function r(e){e.indentStack=e.indentStack.prev}function i(e,t){if(null!=/[0-9]/.exec(e)){if(t.eatWhile(/[0-9]/),t.eat(/\//),t.eatWhile(/[0-9]/),t.eol()||!/[a-zA-Z\-\_\/]/.exec(t.peek()))return!0;t.backUp(t.current().length-1)}return!1}var a="builtin",c="comment",l="string",o="atom",s="number",u="bracket",p=2,m=e("Î» case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"),d=e("define let letrec let* lambda");return{startState:function(){return{indentStack:null,indentation:0,mode:!1,sExprComment:!1}},token:function(e,t){if(null==t.indentStack&&e.sol()&&(t.indentation=e.indentation()),e.eatSpace())return null;var f=null;switch(t.mode){case"string":for(var h,g=!1;null!=(h=e.next());){if('"'==h&&!g){t.mode=!1;break}g=!g&&"\\"==h}f=l;break;case"comment":for(var h,x=!1;null!=(h=e.next());){if("#"==h&&x){t.mode=!1;break}x="|"==h}f=c;break;case"s-expr-comment":if(t.mode=!1,"("!=e.peek()&&"["!=e.peek()){e.eatWhile(/[^/s]/),f=c;break}t.sExprComment=0;default:var b=e.next();if('"'==b)t.mode="string",f=l;else if("'"==b)f=o;else if("#"==b)e.eat("|")?(t.mode="comment",f=c):e.eat(/[tf]/)?f=o:e.eat(";")&&(t.mode="s-expr-comment",f=c);else if(";"==b)e.skipToEnd(),f=c;else if("-"==b)isNaN(parseInt(e.peek()))?f=null:(e.eatWhile(/[\/0-9]/),f=s);else if(i(b,e))f=s;else if("("==b||"["==b){for(var v="",k=e.column();null!=(letter=e.eat(/[^\s\(\[\;\)\]]/));)v+=letter;v.length>0&&d.propertyIsEnumerable(v)?n(t,k+p,b):(e.eatSpace(),e.eol()||";"==e.peek()?n(t,k+1,b):n(t,k+e.current().length,b)),e.backUp(e.current().length-1),"number"==typeof t.sExprComment&&t.sExprComment++,f=u}else")"==b||"]"==b?(f=u,null!=t.indentStack&&t.indentStack.type==(")"==b?"(":"[")&&(r(t),"number"==typeof t.sExprComment&&0==--t.sExprComment&&(f=c,t.sExprComment=!1))):(e.eatWhile(/[\w\$_\-]/),f=m&&m.propertyIsEnumerable(e.current())?a:null)}return"number"==typeof t.sExprComment?c:f},indent:function(e){return null==e.indentStack?e.indentation:e.indentStack.indent}}}),e.defineMIME("text/x-scheme","scheme")});