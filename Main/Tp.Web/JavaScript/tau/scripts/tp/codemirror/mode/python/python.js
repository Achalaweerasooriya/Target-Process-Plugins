define(["tp/codemirror/lib/codemirror"],function(CodeMirror){CodeMirror.defineMode("python",function(conf,parserConf){function wordRegexp(words){return new RegExp("^(("+words.join(")|(")+"))\\b")}function tokenBase(stream,state){if(stream.sol()){var scopeOffset=state.scopes[0].offset;if(stream.eatSpace()){var lineOffset=stream.indentation();return lineOffset>scopeOffset?indentInfo="indent":lineOffset<scopeOffset&&(indentInfo="dedent"),null}scopeOffset>0&&dedent(stream,state)}if(stream.eatSpace())return null;var ch=stream.peek();if(ch==="#")return stream.skipToEnd(),"comment";if(stream.match(/^[0-9\.]/,!1)){var floatLiteral=!1;stream.match(/^\d*\.\d+(e[\+\-]?\d+)?/i)&&(floatLiteral=!0),stream.match(/^\d+\.\d*/)&&(floatLiteral=!0),stream.match(/^\.\d+/)&&(floatLiteral=!0);if(floatLiteral)return stream.eat(/J/i),"number";var intLiteral=!1;stream.match(/^0x[0-9a-f]+/i)&&(intLiteral=!0),stream.match(/^0b[01]+/i)&&(intLiteral=!0),stream.match(/^0o[0-7]+/i)&&(intLiteral=!0),stream.match(/^[1-9]\d*(e[\+\-]?\d+)?/)&&(stream.eat(/J/i),intLiteral=!0),stream.match(/^0(?![\dx])/i)&&(intLiteral=!0);if(intLiteral)return stream.eat(/L/i),"number"}return stream.match(stringPrefixes)?(state.tokenize=tokenStringFactory(stream.current()),state.tokenize(stream,state)):stream.match(tripleDelimiters)||stream.match(doubleDelimiters)?null:stream.match(doubleOperators)||stream.match(singleOperators)||stream.match(wordOperators)?"operator":stream.match(singleDelimiters)?null:stream.match(types)?"builtin":stream.match(keywords)?"keyword":stream.match(identifiers)?"variable":(stream.next(),ERRORCLASS)}function tokenStringFactory(delimiter){while("rub".indexOf(delimiter.charAt(0).toLowerCase())>=0)delimiter=delimiter.substr(1);var singleline=delimiter.length==1,OUTCLASS="string";return function(stream,state){while(!stream.eol()){stream.eatWhile(/[^'"\\]/);if(stream.eat("\\")){stream.next();if(singleline&&stream.eol())return OUTCLASS}else{if(stream.match(delimiter))return state.tokenize=tokenBase,OUTCLASS;stream.eat(/['"]/)}}if(singleline){if(parserConf.singleLineStringErrors)return ERRORCLASS;state.tokenize=tokenBase}return OUTCLASS}}function indent(stream,state,type){type=type||"py";var indentUnit=0;if(type==="py"){for(var i=0;i<state.scopes.length;++i)if(state.scopes[i].type==="py"){indentUnit=state.scopes[i].offset+conf.indentUnit;break}}else indentUnit=stream.column()+stream.current().length;state.scopes.unshift({offset:indentUnit,type:type})}function dedent(stream,state){if(state.scopes.length==1)return;if(state.scopes[0].type==="py"){var _indent=stream.indentation(),_indent_index=-1;for(var i=0;i<state.scopes.length;++i)if(_indent===state.scopes[i].offset){_indent_index=i;break}if(_indent_index===-1)return!0;while(state.scopes[0].offset!==_indent)state.scopes.shift();return!1}return state.scopes.shift(),!1}function tokenLexer(stream,state){indentInfo=null;var style=state.tokenize(stream,state),current=stream.current();if(current===".")return style=state.tokenize(stream,state),current=stream.current(),style==="variable"?"variable":ERRORCLASS;if(current==="@")return style=state.tokenize(stream,state),current=stream.current(),style==="variable"||current==="@staticmethod"||current==="@classmethod"?"meta":ERRORCLASS;if(current==="pass"||current==="return")state.dedent+=1;(current===":"&&!state.lambda&&state.scopes[0].type=="py"||indentInfo==="indent")&&indent(stream,state);var delimiter_index="[({".indexOf(current);return delimiter_index!==-1&&indent(stream,state,"])}".slice(delimiter_index,delimiter_index+1)),indentInfo==="dedent"&&dedent(stream,state)?ERRORCLASS:(delimiter_index="])}".indexOf(current),delimiter_index!==-1&&dedent(stream,state)?ERRORCLASS:(state.dedent>0&&stream.eol()&&state.scopes[0].type=="py"&&(state.scopes.length>1&&state.scopes.shift(),state.dedent-=1),style))}var ERRORCLASS="error",singleOperators=new RegExp("^[\\+\\-\\*/%&|\\^~<>!]"),singleDelimiters=new RegExp("^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]"),doubleOperators=new RegExp("^((==)|(!=)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\*\\*))"),doubleDelimiters=new RegExp("^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&=)|(\\|=)|(\\^=))"),tripleDelimiters=new RegExp("^((//=)|(>>=)|(<<=)|(\\*\\*=))"),identifiers=new RegExp("^[_A-Za-z][_A-Za-z0-9]*"),wordOperators=wordRegexp(["and","or","not","is","in"]),commonkeywords=["as","assert","break","class","continue","def","del","elif","else","except","finally","for","from","global","if","import","lambda","pass","raise","return","try","while","with","yield"],commontypes=["bool","classmethod","complex","dict","enumerate","float","frozenset","int","list","object","property","reversed","set","slice","staticmethod","str","super","tuple","type"],py2={types:["basestring","buffer","file","long","unicode","xrange"],keywords:["exec","print"]},py3={types:["bytearray","bytes","filter","map","memoryview","open","range","zip"],keywords:["nonlocal"]};if(!parserConf.version||parseInt(parserConf.version,10)!==3){commonkeywords=commonkeywords.concat(py2.keywords),commontypes=commontypes.concat(py2.types);var stringPrefixes=new RegExp("^(([rub]|(ur)|(br))?('{3}|\"{3}|['\"]))","i")}else{commonkeywords=commonkeywords.concat(py3.keywords),commontypes=commontypes.concat(py3.types);var stringPrefixes=new RegExp("^(([rb]|(br))?('{3}|\"{3}|['\"]))","i")}var keywords=wordRegexp(commonkeywords),types=wordRegexp(commontypes),indentInfo=null,external={startState:function(basecolumn){return{tokenize:tokenBase,scopes:[{offset:basecolumn||0,type:"py"}],lastToken:null,lambda:!1,dedent:0}},token:function(stream,state){var style=tokenLexer(stream,state);return state.lastToken={style:style,content:stream.current()},stream.eol()&&stream.lambda&&(state.lambda=!1),style},indent:function(state,textAfter){return state.tokenize!=tokenBase?0:state.scopes[0].offset}};return external}),CodeMirror.defineMIME("text/x-python","python")})