(function(){require.config({paths:{text:"libs/require.js/text"},waitSeconds:15}),require.onError=function(ex){console.error(ex)};var files={};files.nodeunit=["tp.tests.async/components/reports/processControlChart.tests","tp.tests.async/components/reports/processControlChart.noData.tests","tp.tests.async/components/reports/burnDown.tests","tp.tests.async/components/reports/burnDown.noiterations.tests","tp.tests.async/components/reports/burnDown.noreleases.tests","tp.tests.async/components/reports/timeDistribution.tests"],require(["libs.tests/component.testrunner","tau/core/tau"],function(Component,utils){var type="nodeunit",filesToRun=files[type],part=utils.getValueFromQueryString("part"),ofParts=utils.getValueFromQueryString("ofparts")||part;if(part){part=parseInt(part),ofParts=parseInt(ofParts);var countTestsInOnePart=Math.round(filesToRun.length/ofParts),start=(part-1)*countTestsInOnePart,end=part*countTestsInOnePart;start>filesToRun.length-1&&(start=filesToRun.length-1),end>filesToRun.length-1&&(end=filesToRun.length),ofParts==part&&(end=filesToRun.length),filesToRun=filesToRun.slice(start,end)}var testrunnerBus=Component.create({type:type});require.onError=function(ex){console.error(ex),testrunnerBus.fire("error.global",ex)},testrunnerBus.on("afterRender",function(e){$("body").append(e.data.element),testrunnerBus.fire("dom.appended",{element:e.data.element})}),testrunnerBus.initialize({files:filesToRun})})})()