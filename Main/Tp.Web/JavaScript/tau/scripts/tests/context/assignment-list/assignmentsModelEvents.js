define(["tau/core/tau","tau/configurator"],function(tau,configurator){function assignmentsModelEvents(testContext){this.testContext=testContext,this.ownerChangedArgumentsActual=[],this.ownerChangedArgumentsExpected=[],this.assignButtonShowedArgumentsActual=[],this.assignButtonShowedArgumentsExpected=[],this.assignButtonHidedArgumentsActual=[],this.assignButtonHidedArgumentsExpected=[],this.assignmentChangedArgumentsActual=[],this.assignmentChangedArgumentsExpected=[],this.assignmentRemovedArgumentsActual=[],this.assignmentRemovedArgumentsExpected=[],this.userAssignedArgumentsActual=[],this.userAssignedArgumentsExpected=[],this.initialDataReturnedActual=[],this.initialDataReturnedExpected=[],this.ownerChangedRetVal={expected:this.ownerChangedArgumentsExpected,addExpectedData:function(expected){this.expected.push(expected)}},this.assignButtonShowedRetVal={expected:this.assignButtonShowedArgumentsExpected,addExpectedData:function(expected){this.expected.push(expected)}},this.assignmentChangedRetVal={expected:this.assignmentChangedArgumentsExpected,addExpectedData:function(expected){this.expected.push(expected)}},this.assignmentRemovedRetVal={expected:this.assignmentRemovedArgumentsExpected,addExpectedData:function(expected){this.expected.push(expected)}},this.userAssignedRetVal={expected:this.userAssignedArgumentsExpected,addExpectedData:function(expected){this.expected.push(expected)}},this.initialDataReturnedRetVal={expected:this.initialDataReturnedExpected,addExpectedData:function(expected){this.expected.push(expected)}},this.assignButtonHidedRetVal={expected:this.assignButtonHidedArgumentsExpected,addExpectedData:function(expected){this.expected.push(expected)}},this.verifyFunctions=[]}return assignmentsModelEvents.prototype={ownerChanged:function(){return this.listenOwnerChanged(),this.ownerChangedRetVal},assignmentChanged:function(){return this.listenAssignmentChanged(),this.assignmentChangedRetVal},assignmentRemoved:function(){return this.listenAssignmentRemoved(),this.assignmentRemovedRetVal},assignButtonShowed:function(){return this.listenAssignButtonShowed(),this.assignButtonShowedRetVal},userAssigned:function(){return this.listenUserAssigned(),this.userAssignedRetVal},initialDataReturned:function(){return this.listenInitialDataReturned(),this.initialDataReturnedRetVal},assignButtonHided:function(){return this.listenAssignButtonHided(),this.assignButtonHidedRetVal},listenAssignButtonHided:function(){this.listenAssignButtonHided=tau.empty,this.testContext.model.on("assignButtonHided",this._onassignButtonHided,this),this.verifyFunctions.push(this._verifyassignButtonHidedAguments)},listenAssignButtonShowed:function(){this.listenAssignButtonShowed=tau.empty,this.testContext.model.on("assignButtonShowed",this._onAssignButtonShowed,this),this.verifyFunctions.push(this._verifyAssignButtonShowedAguments)},listenAssignmentChanged:function(){this.listenAssignmentChanged=tau.empty,this.testContext.model.on("assignmentChanged",this._onAssignmentChanged,this),this.verifyFunctions.push(this._verifyAssignmentChangedPassedAguments)},listenUserAssigned:function(){this.listenUserAssigned=tau.empty,this.testContext.model.on("userAssigned",this._onUserAssigned,this),this.verifyFunctions.push(this._verifyUserAssignedPassedAguments)},listenOwnerChanged:function(){this.listenOwnerChanged=tau.empty,this.testContext.model.on("ownerChanged",this._onOwnerChanged,this),this.verifyFunctions.push(this._verifyOwnerChangedPassedAguments)},listenAssignmentRemoved:function(){this.listenAssignmentRemoved=tau.empty,this.testContext.model.on("assignmentRemoved",this._onAssignmentRemoved,this),this.verifyFunctions.push(this._verifyAssignmentRemovedPassedAguments)},listenInitialDataReturned:function(){this.listenInitialDataReturned=tau.empty,this.testContext.model.on("afterInit",this._onInitialDataReturned,this),this.verifyFunctions.push(this._verifyInitialDataReturnedPassedArguments)},_verifyUserAssignedPassedAguments:function(){var expected=this.userAssignedArgumentsExpected,actual=this.userAssignedArgumentsActual;equal(actual.length,expected.length,"userAssigned event handle is valid");for(var i=0;i<Math.min(expected.length,actual.length);i++){var actualData=actual[i][0].data,expectedData=expected[i];equal(actualData.role,expectedData.role,"Passed role is valid");var expectedName=expectedData.user.firstName+" "+expectedData.user.lastName;equal(actualData.user.name,expectedName,"Passed user name is valid")}},_verifyOwnerChangedPassedAguments:function(){var expected=this.ownerChangedArgumentsExpected,actual=this.ownerChangedArgumentsActual;equal(expected.length,actual.length,"Fired onwerChanged events count is valid");for(var i=0;i<Math.min(expected.length,actual.length);i++){var actualData=actual[i][0].data,expectedData=expected[i];equal(actualData.name,expectedData.firstName+" "+expectedData.lastName,"User name is valid"),equal(actualData.role.id,expectedData.role.id,"Passed user  role id is valid"),equal(actualData.role.name,expectedData.role.name,"Passed user  role name is valid"),equal(actualData.avatar,expectedData.avatar,"Passed user  avatar is valid")}},validateUser:function(actualNewUser,expectedData,message){equal(actualNewUser.id,expectedData.id,"id "+message),equal(actualNewUser.name,expectedData.name,"name "+message)},validateUserForInitData:function(actualUser,expectedUser,message){equal(actualUser.id,expectedUser.id,"id "+message),equal(actualUser.name,expectedUser.firstName+" "+expectedUser.lastName,"name "+message),equal(actualUser.avatar,[configurator.getApplicationPath(),"/Avatar.ashx?UserId=",expectedUser.id,"&size=24"].join(""),"Avatar url is valid")},validateGroups:function(actual,expected){equal(actual.allowAdd,expected.allowAdd,"Allow Add is valid"),equal(actual.role.id,expected.role.id,"Role id is valid"),equal(actual.role.name,expected.role.name,"Role name is valid"),equal(actual.users.length,expected.users.length,"User length is valid");for(var i=0;i<Math.min(actual.users.length,expected.users.length);i++)this.validateUserForInitData(actual.users[i],expected.users[i]),equal(actual.roleEffort.effort,expected.roleEffort.effort,"Effort is valid"),equal(actual.roleEffort.remain,expected.roleEffort.remain,"Remain is valid")},_verifyInitialDataReturnedPassedArguments:function(){var expected=this.initialDataReturnedExpected,actual=this.initialDataReturnedActual;equal(expected.length,actual.length,"Fired initialDateReturned events count is valid");for(var i=0;i<Math.min(expected.length,actual.length);i++){var actualData=actual[i][0].data,expectedData=expected[i];this.validateUserForInitData(actualData.owner,expectedData.owner,"Owner is valid");var expectedGroups=expectedData.assignments.groups,actualGroups=actualData.assignments.groups;equal(actualData.effortPoints,expectedData.effortPoints,"effortPoints  is valid"),equal(actualData.totalEffort.effort,expectedData.totalEffort.effort,"Total effort is valid"),equal(actualData.totalEffort.remain,expectedData.totalEffort.remain,"Remain remain is valid"),expectedData.tasksEffort&&(equal((actualData.tasksEffort||{}).effort,expectedData.tasksEffort.effort,"tasksEffort effort is valid"),equal((actualData.tasksEffort||{}).remain,expectedData.tasksEffort.remain,"tasksEffort remain is valid")),equal(actualGroups.length,expectedGroups.length,"Groups count is valid");for(var i=0;i<Math.min(actualGroups.length,expectedGroups.length);i++)this.validateGroups(actualGroups[i],expectedGroups[i])}},_verifyAssignmentRemovedPassedAguments:function(){var expected=this.assignmentRemovedArgumentsExpected,actual=this.assignmentRemovedArgumentsActual;equal(expected.length,actual.length,"Fired assignmentRemoved events count is valid");for(var i=0;i<Math.min(expected.length,actual.length);i++){var actualRole=actual[i][0].data.role,actualUser=actual[i][0].data.user,expectedRole=expected[i].role,expectedUser=expected[i].user;equal(actualRole,expectedRole,"Role is valid"),equal(actualUser,expectedUser,"User is valid")}},_verifyassignButtonHidedAguments:function(){var expected=this.assignButtonHidedArgumentsExpected,actual=this.assignButtonHidedArgumentsActual;equal(expected.length,actual.length,"Fired asignButtonHidded events count is valid");for(var i=0;i<Math.min(expected.length,actual.length);i++){var actualRole=actual[i][0].data.role,expectedRole=expected[i].role;equal(actualRole,expectedRole,"Role is valid")}},_verifyAssignButtonShowedAguments:function(){var expected=this.assignButtonShowedArgumentsExpected,actual=this.assignButtonShowedArgumentsActual;equal(expected.length,actual.length,"Fired asignButtonShowed events count is valid");for(var i=0;i<Math.min(expected.length,actual.length);i++){var actualRole=actual[i][0].data.role,expectedRole=expected[i].role;equal(actualRole,expectedRole,"Role is valid")}},_verifyAssignmentChangedPassedAguments:function(){var expected=this.assignmentChangedArgumentsExpected,actual=this.assignmentChangedArgumentsActual;equal(expected.length,actual.length,"Fired assignmentChanged events count is valid");for(var i=0;i<Math.min(expected.length,actual.length);i++){var actualOldUser=actual[i][0].data.oldUser,actualNewUser=actual[i][0].data.newUser,role=actual[i][0].data.role,expectedData=expected[i];this.validateUser(actualOldUser,expectedData.oldUser,"Old User is valid"),this.validateUser(actualNewUser,expectedData.newUser,"Old User is valid"),equal(role,expectedData.role,"Role is valid")}},_onUserAssigned:function(){this.userAssignedArgumentsActual.push(arguments)},_onOwnerChanged:function(){this.ownerChangedArgumentsActual.push(arguments)},_onassignButtonHided:function(){this.assignButtonHidedArgumentsActual.push(arguments)},_onAssignButtonShowed:function(){this.assignButtonShowedArgumentsActual.push(arguments)},_onAssignmentChanged:function(){this.assignmentChangedArgumentsActual.push(arguments)},_onInitialDataReturned:function(){this.initialDataReturnedActual.push(arguments)},_onAssignmentRemoved:function(){this.assignmentRemovedArgumentsActual.push(arguments)},verify:function(){var functions=this.verifyFunctions;for(var i=functions.length;i--;)functions[i].call(this)}},assignmentsModelEvents})