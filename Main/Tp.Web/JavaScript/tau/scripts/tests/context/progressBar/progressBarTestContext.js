define(["tau/core/tau","tests/common/modelConfig","tests/context/progressBar/progressBarModelEvents","tests/common/expector/expector","tau/factories/factory.progressBar","tests/common/testData","tau/store/services/service.rest","tau/store/repository","tau/store/store","tau/configurator"],function(tau,modelConfig,progressBarModelEvents,expector,progressBarFactory,testData,restService,repository,store,configurator){function progressBarTestContext(){this.eventsArguments={},configurator.clear()}return progressBarTestContext.prototype={initData:function(){this.context=modelConfig.createForBug(15),this.initialData=testData.getTestDataForProgressBar()},initMockControls:function(){this.mockControl=new MockControl,this.restServiceMock=this.mockControl.createMock(restService),this.repository=new repository({service:this.restServiceMock}),this.repository.registerData(this.initialData),this.repositoryMock=this.mockControl.createMock(this.repository),configurator.setProxy(this.repositoryMock)},createModel:function(){this.model=progressBarFactory.createModel(this.context)},initialize:function(){this.initData(),this.initMockControls(),this.createModel()},initializeModel:function(){var id=this.context.entity.id,expectFields=["id","effortCompleted","effortToDo","timeSpent","timeRemain",Like.is({entityType:["id","name"]}),Like.is({entityState:["id","name"]})],repository=this.repository,expectedCommands=[Similar.to({name:"get",type:this.initialData.__type,config:Like.is({id:id,fields:expectFields}),callbacks:TypeOf.isA(Object)})];this.repositoryMock.expects().execute(expectedCommands).andStub(function(){repository.execute.apply(repository,arguments)}),this.model.initialize()},expects:function(){return this._expects||(this._expects=new expector(this)),this._expects},events:function(){return this._events||(this._events=new progressBarModelEvents(this)),this._events},verify:function(){this.events().verify(),this.mockControl.verify()},reset:function(){this.events().reset(),this.mockControl.reset()},destroy:function(){}},progressBarTestContext})