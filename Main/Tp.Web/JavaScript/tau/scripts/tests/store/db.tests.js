define(["Underscore","tau/store/db","tau/store/header"],function(_,Db,header){var innerRun=function(){module("[db]",{setup:function(){var self=this,config={types:{card:{name:"card",fields:["n"],refs:{c:{name:"contact",relationProperty:"card"}}},entity:{name:"entity",fields:["dsc"],isParentType:!0,detectType:function(obj){return obj.concreteType.name},refs:{comments:{name:"comment",list:!0,relationProperty:"owner"}}},comment:{name:"comment",refs:{owner:{name:"entity",relationProperty:"comments"}}},car:{name:"car",refs:{owner:{name:"person",relationProperty:"car"}}},dog:{name:"dog",refs:{owner:{name:"person",relationProperty:"dogs"}}},person:{parent:"entity",name:"person",fields:["name"],refs:{contacts:{list:!0,name:"contact",fields:["email"],relationProperty:"owner"},car:{cascade:!0,name:"car",relationProperty:"owner"},dogs:{name:"dog",cascade:!0,list:!0,relationProperty:"owner"},comments:{name:"comment",list:!0,relationProperty:"owner"}}},contact:{name:"contact",fields:["email",header.ref("owner")],refs:{owner:{name:"person",relationProperty:"contacts"},card:{name:"card",relationProperty:"c"}}}}};self.db=new Db(config)},teardown:function(){delete this.db}}),test("registering simple entities",function(){var p={__type:"person",id:5,name:"Vasya Pupkin"},register=this.db.register(p),entity=this.db.getPersistedNode(p.id,p.__type).data;included(entity,{id:p.id,name:p.name}),ok(!entity.__type,"type should not be presented in data")}),test("update simple entities",function(){var p={__type:"person",id:5,name:"Vasya Pupkin"};this.db.register(p);var entity=this.db.getPersistedNode(p.id,p.__type).data;this.db.register({__type:"person",id:5,name:"Vasya",lucky:!0}),included(entity,{id:p.id,name:"Vasya",lucky:!0}),ok(!entity.__type,"type should not be presented in data")}),test("relation data registration",function(){var contact={id:2,__type:"contact",card:{id:3,name:"super",__type:"card"}};this.db.register(contact);var ref=this.db.getPersistedNode(2,"contact").data.card;equals(ref.isReference,!0,"reference is resolved"),equals(ref.id,3,"reference is resolved"),equals(ref.type,"card","reference is resolved")}),test("complex data registration",function(){var contact={id:2,__type:"contact",card:{id:3,name:"super",__type:"card",c:{id:2,email:"pups@lilu.com"}}},cards=[{id:3,name:"super",__type:"card"},{id:2,name:"super 2",__type:"card"}];this.db.register(contact),this.db.register(cards);var ref=this.db.getPersistedNode(2,"contact").data.card;equals(ref.isReference,!0,"reference is resolved"),equals(ref.id,3,"reference is resolved"),equals(ref.type,"card","reference is resolved"),ref=this.db.getPersistedNode(3,"card").data.c,equals(ref.isReference,!0,"reference is resolved"),equals(ref.id,2,"reference is resolved"),equals(ref.type,"contact","reference is resolved")}),test("list ref registration",function(){var person={id:1,__type:"person","contacts-count":0,contacts:[{id:2,__type:"contact",card:{id:3,__type:"card"}}]};this.db.register(person),ok(this.db.getPersistedNode(1,"person")!=null,"person is registered");var personData=this.db.getPersistedNode(1,"person").data;ok(personData.contacts.isReference===!0,"ref attribute is defined"),ok(personData.contacts.type==="contact","type ref is registered"),ok(personData.contacts.list===!0,"list attribute is defined"),ok(_.isArray(personData.contacts),"ref is formed as array"),ok(personData.contacts[0].isReference===!0,"ref element added to list ref"),ok(personData.contacts[0].type==="contact","ref is registered"),ok(personData.contacts[0].id===2,"ref is registered"),ok(_.isUndefined(personData.contacts.id),"no id for list");var contact=this.db.getPersistedNode(2,"contact");ok(contact!=null,"contact is registered"),ok(this.db.getPersistedNode(3,"card")!=null,"card is registered")}),test("inverse cascade for list entities",function(){var person={id:1,__type:"person",contacts:[{id:2,__type:"contact"}]};this.db.register(person);var contact=this.db.getPersistedNode(2,"contact");ok(contact.data.owner!=null,"owner ref is registered")}),test("inverse cascade for list entities inheritance",function(){var person={id:1,__type:"entity",concreteType:{name:"person"},contacts:[{id:2,__type:"contact"}]};this.db.register(person);var contact=this.db.getPersistedNode(2,"contact");ok(contact.data.owner.id===1,"owner ref is registered")}),test("inverse cascade for list entities inheritance:child",function(){var person={id:1,__type:"person",comments:[{id:2,__type:"comment"}]};this.db.register(person);var note=this.db.getPersistedNode(2,"comment");ok(note.data.owner.id===1,"owner ref is registered")}),test("parent registration",function(){var person={id:1,__type:"person",contacts:[{id:2,__type:"contact",card:{id:3,__type:"card"}}]};this.db.register(person),ok(this.db.getPersistedNode(1,"person")!=null,"person is registered"),ok(this.db.getPersistedNode(1,"entity")!=null,"entity as parent is registered"),ok(this.db.getPersistedNode(2,"contact")!=null,"contact is registered"),ok(this.db.getPersistedNode(3,"card")!=null,"card is registered")}),test("detect function works good",function(){var person={id:1,__type:"entity",concreteType:{name:"person"},contacts:[{id:2,__type:"contact",card:{id:3,__type:"card"}}]};this.db.register(person),ok(this.db.getPersistedNode(1,"person")!=null,"person is registered"),ok(this.db.getPersistedNode(1,"entity")!=null,"entity as parent is registered"),ok(this.db.getPersistedNode(2,"contact")!=null,"contact is registered"),ok(this.db.getPersistedNode(3,"card")!=null,"card is registered")}),test("detect function works good for registering",function(){var person={id:1,__type:"person",contacts:[{id:2,__type:"contact",card:{id:3,__type:"card"}}]};this.db.register(person),this.db.register({id:1,__type:"entity",email:"droid@f.com"})}),test("add operation with initialized inner list",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},person={__type:"person",id:1,name:"Ay ya ya",contacts:[contact]};this.db.register(person);var r=this.db.register({id:5,__type:"contact",owner:{id:1}});person=this.db.getPersistedNode(1,"person"),equals(person.data.contacts.length,1,"one-to-many ref extended with added entity"),ok(!r.tree.person[1].changes.contacts)}),test("add operation with initialized inner list",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},person={__type:"person",id:1,name:"Ay ya ya",contacts:[contact]};this.db.register(person);var r=this.db.register({id:777,__type:"contact",first:"Tutta",last:"Larsan",owner:{id:1}}),addedContact=this.db.getPersistedNode(777,"contact");person=this.db.getPersistedNode(1,"person"),ok(addedContact!=null,"object persisted after add"),equals(addedContact.data.first,"Tutta","object properties extended correctly"),equals(person.data.contacts.length,2,"one-to-many ref extended with added entity"),equals(person.data.contacts[1].id,777,"one-to-many ref extended with added entity"),equals(r.tree.person[1].changes.contacts.length,2),equals(r.tree.contact[777].changes.last,"Larsan")}),test("add operation with not initialized inner list",function(){var person={__type:"person",id:1,name:"Ay ya ya"};this.db.register(person);var r=this.db.register({id:777,__type:"contact",first:"Tutta",last:"Larsan",owner:{id:1}}),addedContact=this.db.getPersistedNode(777,"contact");person=this.db.getPersistedNode(1,"person"),ok(addedContact!=null,"object persisted after add"),ok(_.isUndefined(person.data.contacts),"one-to-many ref is not auto initialized")}),test("one-to-one relation auto",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},card={__type:"card",id:3,n:"Super",c:contact};this.db.register(contact),this.db.register(card),contact=this.db.getPersistedNode(5,"contact").data,card=this.db.getPersistedNode(3,"card").data,ok(card.c,"object is initialized"),ok(contact.card,"object is initialized")}),test("cascade operation from bag and relation",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},person={__type:"person",id:1,name:"Ay ya ya",contacts:[contact]},card={__type:"card",id:3,n:"Super",c:contact};this.db.register(person),this.db.register(card),contact=this.db.getPersistedNode(5,"contact").data,person=this.db.getPersistedNode(1,"person").data,card=this.db.getPersistedNode(3,"card").data,equals(person.contacts.length,1,"object is initialized"),ok(card.c,"object is initialized"),ok(contact.owner,"object is initialized"),ok(contact.card,"object is initialized")}),test("delete operation from bag and relation",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},person={__type:"person",id:1,name:"Ay ya ya",contacts:[contact]},card={__type:"card",id:3,n:"Super",c:contact};this.db.register(person),this.db.register(card);var r=this.db.remove(5,"contact");contact=this.db.getPersistedNode(5,"contact"),person=this.db.getPersistedNode(1,"person").data,card=this.db.getPersistedNode(3,"card").data,equals(contact,null,"object is deleted from storage"),equals(person.contacts.length,0,"object is deleted from relation bag"),equals(_.isNull(card.c),!0,"object is deleted from relation"),equals(r.tree.person[1].changes.contacts.length,0),equals(r.tree.card[3].changes.c,null)}),test("cascade delete operation",function(){var person={__type:"person",id:1,name:"Ay ya ya",car:{id:48},dogs:[{id:49},{id:50}]};this.db.register(person),ok(this.db.getPersistedNode(1,"person"),"object is registered"),ok(this.db.getPersistedNode(48,"car"),"object is registered"),ok(this.db.getPersistedNode(49,"dog"),"object is registered"),ok(this.db.getPersistedNode(50,"dog"),"object is registered"),this.db.remove(1,"person"),equals(this.db.getPersistedNode(1,"person"),null,"object is deleted from storage"),equals(this.db.getPersistedNode(48,"car"),null,"object is deleted from storage"),equals(this.db.getPersistedNode(49,"dog"),null,"object is deleted from storage"),equals(this.db.getPersistedNode(50,"dog"),null,"object is deleted from storage")}),test("get data simple",function(){var person={__type:"person",id:1,name:"Ay ya ya",car:{id:48},dogs:[{id:49},{id:50}]};this.db.register(person);var val=this.db.get(1,"person",{fields:["name"]}).data;equals(_(val).keys().length,3,"give what ask and __type"),ok(!_.isUndefined(val.name),"give what ask"),ok(!_.isUndefined(val.id),"give what ask"),ok(!_.isUndefined(val.__type),"give what ask"),equals(val.name,person.name,"give what ask")}),test("get data inheritance",function(){var person={__type:"person",id:1,name:"Ay ya ya",car:{id:48},dogs:[{id:49},{id:50}]};this.db.register(person);var val=this.db.get(1,"entity",{fields:["name"]}).data;equals(_(val).keys().length,3,"give what ask and __type"),ok(!_.isUndefined(val.name),"give what ask"),ok(!_.isUndefined(val.id),"give what ask"),equals(val.__type,"person","give what ask"),equals(val.name,person.name,"give what ask")}),test("get data one-to-one",function(){var person={__type:"person",id:1,name:"Ay ya ya",car:{id:48},dogs:[{id:49},{id:50}]};this.db.register(person);var val=this.db.get(1,"person",{fields:["name",{car:["id"]}]}).data;equals(_(val).keys().length,4,"give what ask"),equals(val.name,person.name,"give what ask"),equals(val.car.id,person.car.id,"give what ask")}),test("get data list",function(){var person={__type:"person",id:1,name:"Ay ya ya",car:{id:48},dogs:[{id:49},{id:50}]};this.db.register(person);var val=this.db.get(1,"person",{fields:["name",{dogs:["id"]}]}).data;equals(_(val).keys().length,4,"give what ask"),equals(val.name,person.name,"give what ask"),equals(val.dogs.length,2,"give what ask"),equals(val.dogs[0].id,49,"give what ask"),equals(val.dogs[1].id,50,"give what ask")}),test("not initialized fields go back from get",function(){var person={__type:"person",id:1,name:"Ay ya ya",car:{id:48},dogs:[{id:49},{id:50}]};this.db.register(person);var r=this.db.get(1,"person",{fields:["name","n1",{car:["id","n2"]},{dogs:["id","n3","n4"]}]});deepEqual(r.notInitializedFields,["n1",{car:["n2"]},{dogs:["n3","n4"]}],"not initialized fields")}),test("null one-to-one doesn't mean not initialized",function(){var person={__type:"person",id:1,name:"Ay ya ya",car:null,dogs:[{id:49},{id:50}]};this.db.register(person);var r=this.db.get(1,"person",{fields:["name","n1",{car:["id","n2"]}]});deepEqual(r.notInitializedFields,["n1"],"not initialized fields")}),test("null list doesn't mean not initialized",function(){var person={__type:"person",id:1,name:"Ay ya ya",dogs:null};this.db.register(person);var r=this.db.get(1,"person",{fields:["name","n1",{dogs:["id","n2"]}]});deepEqual(r.notInitializedFields,["n1"],"not initialized fields")}),test("empty list doesn't mean not initialized",function(){var person={__type:"person",id:1,name:"Ay ya ya",dogs:[]};this.db.register(person);var r=this.db.get(1,"person",{fields:["name","n1",{dogs:["id","n2"]}]});deepEqual(r.notInitializedFields,["n1"],"not initialized fields")}),test("not initialized fields go back for empty objects",function(){var person={__type:"person",id:1,name:"Ay ya ya",dogs:null};this.db.register(person);var r=this.db.get(1,"person",{fields:["name","n1",{dogs:["n3","n4"]}]});deepEqual(r.notInitializedFields,["n1"],"not initialized fields");var node=this.db.getPersistedNode(1,"person");equals(node.data.dogs.length,0,"auto initialize array with empty")}),test("simple changes come with registration",function(){var person={__type:"person",id:1,name:"Ay ya ya",dogs:null},r=this.db.register(person);deepEqual(r.tree.person[1].changes,{name:"Ay ya ya",dogs:[]})}),test("simple changes come with update",function(){var person={__type:"person",id:1,name:"Ay ya ya",dogs:null},r=this.db.register(person);person.description="Hey!!!",person.name="48",r=this.db.register(person),deepEqual(r.tree.person[1].changes,{name:"48",description:"Hey!!!"})}),test("array changes come with update",function(){var person={__type:"person",id:1,name:"Ay ya ya",arrayValue:[{a:1},{a:2}]},r=this.db.register(person);r=this.db.register({id:1,__type:"person",arrayValue:[]}),ok(r.tree["person"][1].changes.arrayValue!=null),r=this.db.register({id:1,__type:"person",arrayValue:[{a:1}]}),ok(r.tree["person"][1].changes.arrayValue!=null),r=this.db.register({id:1,__type:"person",arrayValue:[{a:2}]}),ok(r.tree["person"][1].changes.arrayValue!=null),r=this.db.register({id:1,__type:"person",arrayValue:[{a:2}]}),ok(!r.tree.person[1].changes.hasOwnProperty("arrayValue"))}),test("one-to-one changes come with registration",function(){var person={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW"}},r=this.db.register(person);deepEqual(r.tree.person[1].changes,{name:"Ay ya ya",car:{isReference:!0,id:48,type:"car"}}),deepEqual(r.tree.car[48].changes,{model:"BMW",owner:{isReference:!0,id:1,type:"person"}}),person.car=null,r=this.db.register(person),deepEqual(r.tree.person[1].changes,{car:null})}),test("one-to-one changes come with registration deep",function(){var person={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW",owner:{id:1,surname:"Bond"}}},r=this.db.register(person);deepEqual(r.tree.person[1].changes,{name:"Ay ya ya",surname:"Bond",car:{isReference:!0,id:48,type:"car"}}),deepEqual(r.tree.entity[1].changes,{name:"Ay ya ya",surname:"Bond",car:{isReference:!0,id:48,type:"car"}}),deepEqual(r.tree.car[48].changes,{model:"BMW",owner:{isReference:!0,id:1,type:"person"}}),equals(_.keys(r.tree).length,3,"count of types"),person.car=null,r=this.db.register(person),deepEqual(r.tree.person[1].changes,{car:null}),deepEqual(r.tree.entity[1].changes,{car:null}),equals(_.keys(r.tree).length,2,"count of types")}),test("one-to-one changes come with update ref",function(){var person={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW"}},r=this.db.register(person);deepEqual(r.tree.person[1].changes,{name:"Ay ya ya",car:{isReference:!0,id:48,type:"car"}}),person.car={id:49},r=this.db.register(person),deepEqual(r.tree.person[1].changes,{car:{isReference:!0,id:49,type:"car"}})}),test("remove simple property",function(){var person={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW",owner:{id:1,surname:"Bond"}}},r=this.db.register(person);this.db.removeProperties(1,"person",["name"]);var node=this.db.getPersistedNode(1,"person");ok(_.isUndefined(node.data.name))}),test("register null id one-to-one property",function(){var person={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW",owner:{id:1,surname:"Bond"}}},r=this.db.register(person);this.db.register({__type:"person",id:1,car:{id:null}});var node=this.db.getPersistedNode(1,"person");ok(_.isNull(node.data.car)),node=this.db.getPersistedNode(48,"car"),ok(_.isEmpty(node.refs),"removed from refs")}),test("register null one-to-one property",function(){var person={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW",owner:{id:1,surname:"Bond"}}},r=this.db.register(person);this.db.register({__type:"person",id:1,car:null});var node=this.db.getPersistedNode(1,"person");ok(_.isNull(node.data.car)),node=this.db.getPersistedNode(48,"car"),ok(_.isEmpty(node.refs),"removed from refs")}),test("register other one-to-one property",function(){var person={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW",owner:{id:1,surname:"Bond"}}},r=this.db.register(person);this.db.register({__type:"person",id:1,car:{id:49}});var node=this.db.getPersistedNode(48,"car");ok(_.isEmpty(node.refs),"removed from refs")}),test("register empty list property",function(){var person={__type:"person",id:1,name:"Ay ya ya",dogs:[{id:49},{id:50}]};this.db.register(person);var r=this.db.register(person);this.db.register({__type:"person",id:1,dogs:[]});var node=this.db.getPersistedNode(1,"person");ok(node.data.dogs.length===0),node=this.db.getPersistedNode(49,"dog"),ok(_.isEmpty(node.refs),"removed from refs"),node=this.db.getPersistedNode(50,"dog"),ok(_.isEmpty(node.refs),"removed from refs")}),test("remove one-to-one property",function(){var person={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW",owner:{id:1,surname:"Bond"}}},r=this.db.register(person);this.db.removeProperties(1,"person",["car"]);var node=this.db.getPersistedNode(1,"person");ok(_.isUndefined(node.data.car)),node=this.db.getPersistedNode(48,"car"),ok(_.isEmpty(node.refs),"remove from refs")}),test("remove entity from list",function(){var person={__type:"person",id:1,name:"Ay ya ya",dogs:[{id:48,name:"Guffy"},{id:49,name:"Laika"}]},r=this.db.register(person),changes=this.db.removeFromList(1,"person",{dogs:{id:48}});ok(changes.tree.person[1].changes.dogs,"dogs collection is changed"),ok(changes.tree.dog[48].changes.owner===null,"owner for dog is changed");var node=this.db.getPersistedNode(1,"person");equals(node.data.dogs.length,1)}),test("remove list property",function(){var person={__type:"person",id:1,name:"Ay ya ya",dogs:[{id:48,name:"Guffy"}]},r=this.db.register(person);this.db.removeProperties(1,"person",["dogs"]);var node=this.db.getPersistedNode(1,"person");ok(_.isUndefined(node.data.dogs)),node=this.db.getPersistedNode(48,"dog"),ok(_.isEmpty(node.refs),"remove from refs")}),test("list changes with registration",function(){var person={__type:"person",id:1,name:"Ay ya ya",dogs:[{id:48,name:"Guffy"}]},r=this.db.register(person);deepEqual(r.tree.person[1].changes,{name:"Ay ya ya",dogs:[{isReference:!0,id:48,type:"dog"}]}),deepEqual(r.tree.dog[48].changes,{name:"Guffy",owner:{isReference:!0,id:1,type:"person"}})}),test("list changes with new one registration",function(){var person={__type:"person",id:1,name:"Ay ya ya",dogs:[]},r=this.db.register(person);r=this.db.register({id:48,name:"Guffy",__type:"dog",owner:{id:1}}),deepEqual(r.tree.person[1].changes,{dogs:[{isReference:!0,id:48,type:"dog"}]}),deepEqual(r.tree.dog[48].changes,{name:"Guffy",owner:{isReference:!0,id:1,type:"person"}})}),test("list changes with new one registration in parent",function(){var person={__type:"person",id:1,name:"Ay ya ya",comments:[]},r=this.db.register(person);r=this.db.register({id:48,description:"Super Comment",__type:"comment",owner:{id:1}}),deepEqual(r.tree.entity[1].changes,{comments:[{isReference:!0,id:48,type:"comment"}]}),deepEqual(r.tree.person[1].changes,{comments:[{isReference:!0,id:48,type:"comment"}]}),deepEqual(r.tree.comment[48].changes,{description:"Super Comment",owner:{isReference:!0,id:1,type:"person"}})})};return{run:innerRun}})