define(["Underscore","tau/store/db","tau/store/header"],function(_,a,b){var c=function(){module("[db]",{setup:function(){var c=this,d={types:{card:{name:"card",fields:["n"],refs:{c:{name:"contact",relationProperty:"card"}}},entity:{name:"entity",fields:["dsc"],isParentType:!0,detectType:function(a){return a.concreteType.name},refs:{comments:{name:"comment",list:!0,relationProperty:"owner"}}},comment:{name:"comment",refs:{owner:{name:"entity",relationProperty:"comments"}}},car:{name:"car",refs:{owner:{name:"person",relationProperty:"car"}}},dog:{name:"dog",refs:{owner:{name:"person",relationProperty:"dogs"}}},person:{parent:"entity",name:"person",fields:["name"],refs:{contacts:{list:!0,name:"contact",fields:["email"],relationProperty:"owner"},car:{cascade:!0,name:"car",relationProperty:"owner"},dogs:{name:"dog",cascade:!0,list:!0,relationProperty:"owner"},comments:{name:"comment",list:!0,relationProperty:"owner"}}},contact:{name:"contact",fields:["email",b.ref("owner")],refs:{owner:{name:"person",relationProperty:"contacts"},card:{name:"card",relationProperty:"c"}}}}};c.db=new a(d)},teardown:function(){delete this.db}}),test("registering simple entities",function(){var a={__type:"person",id:5,name:"Vasya Pupkin"},b=this.db.register(a),c=this.db.getPersistedNode(a.id,a.__type).data;included(c,{id:a.id,name:a.name}),ok(!c.__type,"type should not be presented in data")}),test("update simple entities",function(){var a={__type:"person",id:5,name:"Vasya Pupkin"};this.db.register(a);var b=this.db.getPersistedNode(a.id,a.__type).data;this.db.register({__type:"person",id:5,name:"Vasya",lucky:!0}),included(b,{id:a.id,name:"Vasya",lucky:!0}),ok(!b.__type,"type should not be presented in data")}),test("relation data registration",function(){var a={id:2,__type:"contact",card:{id:3,name:"super",__type:"card"}};this.db.register(a);var b=this.db.getPersistedNode(2,"contact").data.card;equals(b.isReference,!0,"reference is resolved"),equals(b.id,3,"reference is resolved"),equals(b.type,"card","reference is resolved")}),test("complex data registration",function(){var a={id:2,__type:"contact",card:{id:3,name:"super",__type:"card",c:{id:2,email:"pups@lilu.com"}}},b=[{id:3,name:"super",__type:"card"},{id:2,name:"super 2",__type:"card"}];this.db.register(a),this.db.register(b);var c=this.db.getPersistedNode(2,"contact").data.card;equals(c.isReference,!0,"reference is resolved"),equals(c.id,3,"reference is resolved"),equals(c.type,"card","reference is resolved"),c=this.db.getPersistedNode(3,"card").data.c,equals(c.isReference,!0,"reference is resolved"),equals(c.id,2,"reference is resolved"),equals(c.type,"contact","reference is resolved")}),test("list ref registration",function(){var a={id:1,__type:"person","contacts-count":0,contacts:[{id:2,__type:"contact",card:{id:3,__type:"card"}}]};this.db.register(a),ok(this.db.getPersistedNode(1,"person")!=null,"person is registered");var b=this.db.getPersistedNode(1,"person").data;ok(b.contacts.isReference===!0,"ref attribute is defined"),ok(b.contacts.type==="contact","type ref is registered"),ok(b.contacts.list===!0,"list attribute is defined"),ok(_.isArray(b.contacts),"ref is formed as array"),ok(b.contacts[0].isReference===!0,"ref element added to list ref"),ok(b.contacts[0].type==="contact","ref is registered"),ok(b.contacts[0].id===2,"ref is registered"),ok(_.isUndefined(b.contacts.id),"no id for list");var c=this.db.getPersistedNode(2,"contact");ok(c!=null,"contact is registered"),ok(this.db.getPersistedNode(3,"card")!=null,"card is registered")}),test("inverse cascade for list entities",function(){var a={id:1,__type:"person",contacts:[{id:2,__type:"contact"}]};this.db.register(a);var b=this.db.getPersistedNode(2,"contact");ok(b.data.owner!=null,"owner ref is registered")}),test("inverse cascade for list entities inheritance",function(){var a={id:1,__type:"entity",concreteType:{name:"person"},contacts:[{id:2,__type:"contact"}]};this.db.register(a);var b=this.db.getPersistedNode(2,"contact");ok(b.data.owner.id===1,"owner ref is registered")}),test("inverse cascade for list entities inheritance:child",function(){var a={id:1,__type:"person",comments:[{id:2,__type:"comment"}]};this.db.register(a);var b=this.db.getPersistedNode(2,"comment");ok(b.data.owner.id===1,"owner ref is registered")}),test("parent registration",function(){var a={id:1,__type:"person",contacts:[{id:2,__type:"contact",card:{id:3,__type:"card"}}]};this.db.register(a),ok(this.db.getPersistedNode(1,"person")!=null,"person is registered"),ok(this.db.getPersistedNode(1,"entity")!=null,"entity as parent is registered"),ok(this.db.getPersistedNode(2,"contact")!=null,"contact is registered"),ok(this.db.getPersistedNode(3,"card")!=null,"card is registered")}),test("detect function works good",function(){var a={id:1,__type:"entity",concreteType:{name:"person"},contacts:[{id:2,__type:"contact",card:{id:3,__type:"card"}}]};this.db.register(a),ok(this.db.getPersistedNode(1,"person")!=null,"person is registered"),ok(this.db.getPersistedNode(1,"entity")!=null,"entity as parent is registered"),ok(this.db.getPersistedNode(2,"contact")!=null,"contact is registered"),ok(this.db.getPersistedNode(3,"card")!=null,"card is registered")}),test("detect function works good for registering",function(){var a={id:1,__type:"person",contacts:[{id:2,__type:"contact",card:{id:3,__type:"card"}}]};this.db.register(a),this.db.register({id:1,__type:"entity",email:"droid@f.com"})}),test("add operation with initialized inner list",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},b={__type:"person",id:1,name:"Ay ya ya",contacts:[a]};this.db.register(b);var c=this.db.register({id:5,__type:"contact",owner:{id:1}});b=this.db.getPersistedNode(1,"person"),equals(b.data.contacts.length,1,"one-to-many ref extended with added entity"),ok(!c.tree.person[1].changes.contacts)}),test("add operation with initialized inner list",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},b={__type:"person",id:1,name:"Ay ya ya",contacts:[a]};this.db.register(b);var c=this.db.register({id:777,__type:"contact",first:"Tutta",last:"Larsan",owner:{id:1}}),d=this.db.getPersistedNode(777,"contact");b=this.db.getPersistedNode(1,"person"),ok(d!=null,"object persisted after add"),equals(d.data.first,"Tutta","object properties extended correctly"),equals(b.data.contacts.length,2,"one-to-many ref extended with added entity"),equals(b.data.contacts[1].id,777,"one-to-many ref extended with added entity"),equals(c.tree.person[1].changes.contacts.length,2),equals(c.tree.contact[777].changes.last,"Larsan")}),test("add operation with not initialized inner list",function(){var a={__type:"person",id:1,name:"Ay ya ya"};this.db.register(a);var b=this.db.register({id:777,__type:"contact",first:"Tutta",last:"Larsan",owner:{id:1}}),c=this.db.getPersistedNode(777,"contact");a=this.db.getPersistedNode(1,"person"),ok(c!=null,"object persisted after add"),ok(_.isUndefined(a.data.contacts),"one-to-many ref is not auto initialized")}),test("one-to-one relation auto",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},b={__type:"card",id:3,n:"Super",c:a};this.db.register(a),this.db.register(b),a=this.db.getPersistedNode(5,"contact").data,b=this.db.getPersistedNode(3,"card").data,ok(b.c,"object is initialized"),ok(a.card,"object is initialized")}),test("cascade operation from bag and relation",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},b={__type:"person",id:1,name:"Ay ya ya",contacts:[a]},c={__type:"card",id:3,n:"Super",c:a};this.db.register(b),this.db.register(c),a=this.db.getPersistedNode(5,"contact").data,b=this.db.getPersistedNode(1,"person").data,c=this.db.getPersistedNode(3,"card").data,equals(b.contacts.length,1,"object is initialized"),ok(c.c,"object is initialized"),ok(a.owner,"object is initialized"),ok(a.card,"object is initialized")}),test("delete operation from bag and relation",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},b={__type:"person",id:1,name:"Ay ya ya",contacts:[a]},c={__type:"card",id:3,n:"Super",c:a};this.db.register(b),this.db.register(c);var d=this.db.remove(5,"contact");a=this.db.getPersistedNode(5,"contact"),b=this.db.getPersistedNode(1,"person").data,c=this.db.getPersistedNode(3,"card").data,equals(a,null,"object is deleted from storage"),equals(b.contacts.length,0,"object is deleted from relation bag"),equals(_.isNull(c.c),!0,"object is deleted from relation"),equals(d.tree.person[1].changes.contacts.length,0),equals(d.tree.card[3].changes.c,null)}),test("cascade delete operation",function(){var a={__type:"person",id:1,name:"Ay ya ya",car:{id:48},dogs:[{id:49},{id:50}]};this.db.register(a),ok(this.db.getPersistedNode(1,"person"),"object is registered"),ok(this.db.getPersistedNode(48,"car"),"object is registered"),ok(this.db.getPersistedNode(49,"dog"),"object is registered"),ok(this.db.getPersistedNode(50,"dog"),"object is registered"),this.db.remove(1,"person"),equals(this.db.getPersistedNode(1,"person"),null,"object is deleted from storage"),equals(this.db.getPersistedNode(48,"car"),null,"object is deleted from storage"),equals(this.db.getPersistedNode(49,"dog"),null,"object is deleted from storage"),equals(this.db.getPersistedNode(50,"dog"),null,"object is deleted from storage")}),test("get data simple",function(){var a={__type:"person",id:1,name:"Ay ya ya",car:{id:48},dogs:[{id:49},{id:50}]};this.db.register(a);var b=this.db.get(1,"person",{fields:["name"]}).data;equals(_(b).keys().length,3,"give what ask and __type"),ok(!_.isUndefined(b.name),"give what ask"),ok(!_.isUndefined(b.id),"give what ask"),ok(!_.isUndefined(b.__type),"give what ask"),equals(b.name,a.name,"give what ask")}),test("get data inheritance",function(){var a={__type:"person",id:1,name:"Ay ya ya",car:{id:48},dogs:[{id:49},{id:50}]};this.db.register(a);var b=this.db.get(1,"entity",{fields:["name"]}).data;equals(_(b).keys().length,3,"give what ask and __type"),ok(!_.isUndefined(b.name),"give what ask"),ok(!_.isUndefined(b.id),"give what ask"),equals(b.__type,"person","give what ask"),equals(b.name,a.name,"give what ask")}),test("get data one-to-one",function(){var a={__type:"person",id:1,name:"Ay ya ya",car:{id:48},dogs:[{id:49},{id:50}]};this.db.register(a);var b=this.db.get(1,"person",{fields:["name",{car:["id"]}]}).data;equals(_(b).keys().length,4,"give what ask"),equals(b.name,a.name,"give what ask"),equals(b.car.id,a.car.id,"give what ask")}),test("get data list",function(){var a={__type:"person",id:1,name:"Ay ya ya",car:{id:48},dogs:[{id:49},{id:50}]};this.db.register(a);var b=this.db.get(1,"person",{fields:["name",{dogs:["id"]}]}).data;equals(_(b).keys().length,4,"give what ask"),equals(b.name,a.name,"give what ask"),equals(b.dogs.length,2,"give what ask"),equals(b.dogs[0].id,49,"give what ask"),equals(b.dogs[1].id,50,"give what ask")}),test("not initialized fields go back from get",function(){var a={__type:"person",id:1,name:"Ay ya ya",car:{id:48},dogs:[{id:49},{id:50}]};this.db.register(a);var b=this.db.get(1,"person",{fields:["name","n1",{car:["id","n2"]},{dogs:["id","n3","n4"]}]});deepEqual(b.notInitializedFields,["n1",{car:["n2"]},{dogs:["n3","n4"]}],"not initialized fields")}),test("null one-to-one doesn't mean not initialized",function(){var a={__type:"person",id:1,name:"Ay ya ya",car:null,dogs:[{id:49},{id:50}]};this.db.register(a);var b=this.db.get(1,"person",{fields:["name","n1",{car:["id","n2"]}]});deepEqual(b.notInitializedFields,["n1"],"not initialized fields")}),test("null list doesn't mean not initialized",function(){var a={__type:"person",id:1,name:"Ay ya ya",dogs:null};this.db.register(a);var b=this.db.get(1,"person",{fields:["name","n1",{dogs:["id","n2"]}]});deepEqual(b.notInitializedFields,["n1"],"not initialized fields")}),test("empty list doesn't mean not initialized",function(){var a={__type:"person",id:1,name:"Ay ya ya",dogs:[]};this.db.register(a);var b=this.db.get(1,"person",{fields:["name","n1",{dogs:["id","n2"]}]});deepEqual(b.notInitializedFields,["n1"],"not initialized fields")}),test("not initialized fields go back for empty objects",function(){var a={__type:"person",id:1,name:"Ay ya ya",dogs:null};this.db.register(a);var b=this.db.get(1,"person",{fields:["name","n1",{dogs:["n3","n4"]}]});deepEqual(b.notInitializedFields,["n1"],"not initialized fields");var c=this.db.getPersistedNode(1,"person");equals(c.data.dogs.length,0,"auto initialize array with empty")}),test("simple changes come with registration",function(){var a={__type:"person",id:1,name:"Ay ya ya",dogs:null},b=this.db.register(a);deepEqual(b.tree.person[1].changes,{name:"Ay ya ya",dogs:[]})}),test("simple changes come with update",function(){var a={__type:"person",id:1,name:"Ay ya ya",dogs:null},b=this.db.register(a);a.description="Hey!!!",a.name="48",b=this.db.register(a),deepEqual(b.tree.person[1].changes,{name:"48",description:"Hey!!!"})}),test("array changes come with update",function(){var a={__type:"person",id:1,name:"Ay ya ya",arrayValue:[{a:1},{a:2}]},b=this.db.register(a);b=this.db.register({id:1,__type:"person",arrayValue:[]}),ok(b.tree["person"][1].changes.arrayValue!=null),b=this.db.register({id:1,__type:"person",arrayValue:[{a:1}]}),ok(b.tree["person"][1].changes.arrayValue!=null),b=this.db.register({id:1,__type:"person",arrayValue:[{a:2}]}),ok(b.tree["person"][1].changes.arrayValue!=null),b=this.db.register({id:1,__type:"person",arrayValue:[{a:2}]}),ok(!b.tree.person[1].changes.hasOwnProperty("arrayValue"))}),test("one-to-one changes come with registration",function(){var a={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW"}},b=this.db.register(a);deepEqual(b.tree.person[1].changes,{name:"Ay ya ya",car:{isReference:!0,id:48,type:"car"}}),deepEqual(b.tree.car[48].changes,{model:"BMW",owner:{isReference:!0,id:1,type:"person"}}),a.car=null,b=this.db.register(a),deepEqual(b.tree.person[1].changes,{car:null})}),test("one-to-one changes come with registration deep",function(){var a={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW",owner:{id:1,surname:"Bond"}}},b=this.db.register(a);deepEqual(b.tree.person[1].changes,{name:"Ay ya ya",surname:"Bond",car:{isReference:!0,id:48,type:"car"}}),deepEqual(b.tree.entity[1].changes,{name:"Ay ya ya",surname:"Bond",car:{isReference:!0,id:48,type:"car"}}),deepEqual(b.tree.car[48].changes,{model:"BMW",owner:{isReference:!0,id:1,type:"person"}}),equals(_.keys(b.tree).length,3,"count of types"),a.car=null,b=this.db.register(a),deepEqual(b.tree.person[1].changes,{car:null}),deepEqual(b.tree.entity[1].changes,{car:null}),equals(_.keys(b.tree).length,2,"count of types")}),test("one-to-one changes come with update ref",function(){var a={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW"}},b=this.db.register(a);deepEqual(b.tree.person[1].changes,{name:"Ay ya ya",car:{isReference:!0,id:48,type:"car"}}),a.car={id:49},b=this.db.register(a),deepEqual(b.tree.person[1].changes,{car:{isReference:!0,id:49,type:"car"}})}),test("remove simple property",function(){var a={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW",owner:{id:1,surname:"Bond"}}},b=this.db.register(a);this.db.removeProperties(1,"person",["name"]);var c=this.db.getPersistedNode(1,"person");ok(_.isUndefined(c.data.name))}),test("register null id one-to-one property",function(){var a={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW",owner:{id:1,surname:"Bond"}}},b=this.db.register(a);this.db.register({__type:"person",id:1,car:{id:null}});var c=this.db.getPersistedNode(1,"person");ok(_.isNull(c.data.car)),c=this.db.getPersistedNode(48,"car"),ok(_.isEmpty(c.refs),"removed from refs")}),test("register null one-to-one property",function(){var a={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW",owner:{id:1,surname:"Bond"}}},b=this.db.register(a);this.db.register({__type:"person",id:1,car:null});var c=this.db.getPersistedNode(1,"person");ok(_.isNull(c.data.car)),c=this.db.getPersistedNode(48,"car"),ok(_.isEmpty(c.refs),"removed from refs")}),test("register other one-to-one property",function(){var a={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW",owner:{id:1,surname:"Bond"}}},b=this.db.register(a);this.db.register({__type:"person",id:1,car:{id:49}});var c=this.db.getPersistedNode(48,"car");ok(_.isEmpty(c.refs),"removed from refs")}),test("register empty list property",function(){var a={__type:"person",id:1,name:"Ay ya ya",dogs:[{id:49},{id:50}]};this.db.register(a);var b=this.db.register(a);this.db.register({__type:"person",id:1,dogs:[]});var c=this.db.getPersistedNode(1,"person");ok(c.data.dogs.length===0),c=this.db.getPersistedNode(49,"dog"),ok(_.isEmpty(c.refs),"removed from refs"),c=this.db.getPersistedNode(50,"dog"),ok(_.isEmpty(c.refs),"removed from refs")}),test("remove one-to-one property",function(){var a={__type:"person",id:1,name:"Ay ya ya",car:{id:48,model:"BMW",owner:{id:1,surname:"Bond"}}},b=this.db.register(a);this.db.removeProperties(1,"person",["car"]);var c=this.db.getPersistedNode(1,"person");ok(_.isUndefined(c.data.car)),c=this.db.getPersistedNode(48,"car"),ok(_.isEmpty(c.refs),"remove from refs")}),test("remove entity from list",function(){var a={__type:"person",id:1,name:"Ay ya ya",dogs:[{id:48,name:"Guffy"},{id:49,name:"Laika"}]},b=this.db.register(a),c=this.db.removeFromList(1,"person",{dogs:{id:48}});ok(c.tree.person[1].changes.dogs,"dogs collection is changed"),ok(c.tree.dog[48].changes.owner===null,"owner for dog is changed");var d=this.db.getPersistedNode(1,"person");equals(d.data.dogs.length,1)}),test("remove list property",function(){var a={__type:"person",id:1,name:"Ay ya ya",dogs:[{id:48,name:"Guffy"}]},b=this.db.register(a);this.db.removeProperties(1,"person",["dogs"]);var c=this.db.getPersistedNode(1,"person");ok(_.isUndefined(c.data.dogs)),c=this.db.getPersistedNode(48,"dog"),ok(_.isEmpty(c.refs),"remove from refs")}),test("list changes with registration",function(){var a={__type:"person",id:1,name:"Ay ya ya",dogs:[{id:48,name:"Guffy"}]},b=this.db.register(a);deepEqual(b.tree.person[1].changes,{name:"Ay ya ya",dogs:[{isReference:!0,id:48,type:"dog"}]}),deepEqual(b.tree.dog[48].changes,{name:"Guffy",owner:{isReference:!0,id:1,type:"person"}})}),test("list changes with new one registration",function(){var a={__type:"person",id:1,name:"Ay ya ya",dogs:[]},b=this.db.register(a);b=this.db.register({id:48,name:"Guffy",__type:"dog",owner:{id:1}}),deepEqual(b.tree.person[1].changes,{dogs:[{isReference:!0,id:48,type:"dog"}]}),deepEqual(b.tree.dog[48].changes,{name:"Guffy",owner:{isReference:!0,id:1,type:"person"}})}),test("list changes with new one registration in parent",function(){var a={__type:"person",id:1,name:"Ay ya ya",comments:[]},b=this.db.register(a);b=this.db.register({id:48,description:"Super Comment",__type:"comment",owner:{id:1}}),deepEqual(b.tree.entity[1].changes,{comments:[{isReference:!0,id:48,type:"comment"}]}),deepEqual(b.tree.person[1].changes,{comments:[{isReference:!0,id:48,type:"comment"}]}),deepEqual(b.tree.comment[48].changes,{description:"Super Comment",owner:{isReference:!0,id:1,type:"person"}})})};return{run:c}})