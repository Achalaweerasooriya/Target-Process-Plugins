define(["Underscore","tau/store/store","tau/core/repository","tau/core/types"],function(a,b,c){var d=function(){module("[store]",{setup:function(){var a=this;a.mockControl=new MockControl,a.proxy=a.mockControl.createMock(new c({service:{}}));var d=[{name:"contacts",aliases:["c","contact"]},{name:"persons"}];a.store=new b({proxy:a.proxy,types:d})},teardown:function(){delete this.store,delete this.proxy,delete this.mockControl}}),test("find data using alias",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b}),this.store.get("c",{id:5}).done(),this.mockControl.verify(),equal(a.length,1,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly")}),test("check refresh api",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b}),this.store.refresh("contacts",{id:5}).done(),this.mockControl.verify(),equal(a.length,1,"commands count is correct"),included(a[0],{type:"contacts",name:"refresh",config:{id:5}},"command is created correctly")}),test("find data by one operation",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b}),this.store.get("contacts",{id:5}).done(),this.mockControl.verify(),equal(a.length,1,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly")}),test("find data in chain",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b}),this.store.get("contacts",{id:5}).get("contacts",{id:6}).done(),this.mockControl.verify(),equal(a.length,2,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly"),included(a[1],{type:"contacts",name:"get",config:{id:6}},"command is created correctly")}),test("find data using extensions",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b}),this.store.get("contacts",{id:5}).done(),this.mockControl.verify(),equal(a.length,1,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly")}),test("find data using extensions",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b}),this.store.get("contacts",{id:5}).done(),this.mockControl.verify(),equal(a.length,1,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly")}),test("find data using extensions in chain",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b});var b=this.store.get("contacts",{id:5});b.get("persons",{id:1}).done(),this.mockControl.verify(),equal(a.length,2,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly"),included(a[1],{type:"persons",name:"get",config:{id:1}},"command is created correctly")}),test("freeze commands",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b});var b=this.store.freeze();this.store.get("contacts",{id:5}).get("contacts",{id:6}).get("persons",{id:1}).done(),this.store.get("persons",{id:2}).get("persons",{id:3}).done(),b.unfreeze(),this.mockControl.verify(),equal(a.length,5,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly"),included(a[1],{type:"contacts",name:"get",config:{id:6}},"command is created correctly"),included(a[2],{type:"persons",name:"get",config:{id:1}},"command is created correctly"),included(a[3],{type:"persons",name:"get",config:{id:2}},"command is created correctly"),included(a[4],{type:"persons",name:"get",config:{id:3}},"command is created correctly")}),test("empty done with callbacks safety",function(){var a=[],b={success:function(b){a.push(b)}};this.store.done(b),equal(a.length,1,"callback come to us")}),test("freeze commands with callbacks",function(){var b=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(c){b=c,a.each(b,function(a){a.executed=!0,a.callbacks.success({command:a})})});var c=this.store.freeze(),d=[],e={success:function(a){d.push(a)}};this.store.get("contacts",{id:5},e).done(e),this.store.get("persons",{id:2},e).get("persons",{id:3},e).done(e),c.unfreeze(),this.mockControl.verify(),equal(d.length,5,"all callbacks come to us"),ok(d[0].command.config.id===5,"first callback"),ok(a.isArray(d[1]),"next callback is common"),ok(d[2].command.config.id===2,"callback is correct"),ok(d[3].command.config.id===3,"callback is correct"),ok(a.isArray(d[4]),"second common callback is correct"),equal(d[4].length,2,"second common callback is correct")}),test("find data mixin in chain",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b}),this.store.get("contacts",{id:5}).get("contacts",{id:6}).get("persons",{id:1}).get("persons",{id:2}).get("persons",{id:3}).done(),this.mockControl.verify(),equal(a.length,5,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly"),included(a[1],{type:"contacts",name:"get",config:{id:6}},"command is created correctly"),included(a[2],{type:"persons",name:"get",config:{id:1}},"command is created correctly"),included(a[3],{type:"persons",name:"get",config:{id:2}},"command is created correctly"),included(a[4],{type:"persons",name:"get",config:{id:3}},"command is created correctly")}),test("callbacks functionality works perfect",function(){this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a.each(b,function(a){a.executed=!0,a.callbacks.success({command:a,data:{id:5,name:"Vaska Pupkin"}})})});var b={},c={};this.store.get("contacts",{id:5},{success:function(a){b=a}}).done({success:function(a){c=a}}),this.mockControl.verify(),deepEqual(b.data,{id:5,name:"Vaska Pupkin"},"command result formed correctly"),equal(c.length,1,"common result formed correctly"),deepEqual(c[0].data,{id:5,name:"Vaska Pupkin"},"common result formed correctly")}),test("failure callbacks are processed as well",function(){this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a.each(b,function(b){a.extend(b,{executed:!0,failed:!0}),b.callbacks.failure({command:b,data:{responseText:"Error"}})})});var b={},c={},d={called:!1,globalCalled:!1,failure:function(a){b=a,this.called=!0},global:function(a){c=a,this.globalCalled=!0}};this.store.get("contacts",{id:5},{failure:{fn:d.failure},scope:d}).done({failure:d.global,scope:d}),this.mockControl.verify(),deepEqual(b.data,{responseText:"Error"},"command result formed correctly"),equal(c.length,1,"common result formed correctly")}),test("scope in callbacks works as required",function(){this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a.each(b,function(a){a.executed=!0,a.callbacks.success({command:a,data:{id:5,name:"Vaska Pupkin"}})})});var b={},c={},d={called:!1,globalCalled:!1,success:function(a){b=a,this.called=!0},global:function(a){c=a,this.globalCalled=!0}};this.store.get("contacts",{id:5},{success:{fn:d.success},scope:d}).done({success:d.global,scope:d}),this.mockControl.verify(),deepEqual(b.data,{id:5,name:"Vaska Pupkin"},"command result formed correctly"),equal(c.length,1,"common result formed correctly"),deepEqual(c[0].data,{id:5,name:"Vaska Pupkin"},"common result formed correctly"),ok(d.called,"scope for command works good"),ok(d.globalCalled,"scope for common works good")}),test("save operation",function(){this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a.each(b,function(a){a.executed=!0,a.callbacks.success({command:a,data:{id:5}})})}),this.store.save("contact",{id:5,$set:{name:"Brutality"}}).done()})};return{run:d}})