define(["Underscore","tau/store/store","tau/store/repository","tau/store/types"],function(_,a,b){var c=function(){module("[store]",{setup:function(){var c=this;c.mockControl=new MockControl,c.proxy=c.mockControl.createMock(new b({service:{}}));var d=[{name:"contacts",aliases:["c","contact"]},{name:"persons"}];c.store=new a({proxy:c.proxy,types:d})},teardown:function(){delete this.store,delete this.proxy,delete this.mockControl}}),test("find data using alias",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b}),this.store.get("c",{id:5}).done(),this.mockControl.verify(),equal(a.length,1,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly")}),test("check refresh api",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b}),this.store.refresh("contacts",{id:5}).done(),this.mockControl.verify(),equal(a.length,1,"commands count is correct"),included(a[0],{type:"contacts",name:"refresh",config:{id:5}},"command is created correctly")}),test("find data by one operation",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b}),this.store.get("contacts",{id:5}).done(),this.mockControl.verify(),equal(a.length,1,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly")}),test("find data in chain",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b}),this.store.get("contacts",{id:5}).get("contacts",{id:6}).done(),this.mockControl.verify(),equal(a.length,2,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly"),included(a[1],{type:"contacts",name:"get",config:{id:6}},"command is created correctly")}),test("find data using extensions",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b}),this.store.get("contacts",{id:5}).done(),this.mockControl.verify(),equal(a.length,1,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly")}),test("find data using extensions",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b}),this.store.get("contacts",{id:5}).done(),this.mockControl.verify(),equal(a.length,1,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly")}),test("find data using extensions in chain",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b});var b=this.store.get("contacts",{id:5});b.get("persons",{id:1}).done(),this.mockControl.verify(),equal(a.length,2,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly"),included(a[1],{type:"persons",name:"get",config:{id:1}},"command is created correctly")}),test("freeze commands",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b});var b=this.store.freeze();this.store.get("contacts",{id:5}).get("contacts",{id:6}).get("persons",{id:1}).done(),this.store.get("persons",{id:2}).get("persons",{id:3}).done(),b.unfreeze(),this.mockControl.verify(),equal(a.length,5,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly"),included(a[1],{type:"contacts",name:"get",config:{id:6}},"command is created correctly"),included(a[2],{type:"persons",name:"get",config:{id:1}},"command is created correctly"),included(a[3],{type:"persons",name:"get",config:{id:2}},"command is created correctly"),included(a[4],{type:"persons",name:"get",config:{id:3}},"command is created correctly")}),test("empty done with callbacks safety",function(){var a=[],b={success:function(b){a.push(b)}};this.store.done(b),equal(a.length,1,"callback come to us")}),test("freeze commands with callbacks",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b,_.each(a,function(a){a.executed=!0,a.callbacks.success({command:a})})});var b=this.store.freeze(),c=[],d={success:function(a){c.push(a)}};this.store.get("contacts",{id:5},d).done(d),this.store.get("persons",{id:2},d).get("persons",{id:3},d).done(d),b.unfreeze(),this.mockControl.verify(),equal(c.length,5,"all callbacks come to us"),ok(c[0].command.config.id===5,"first callback"),ok(_.isArray(c[1]),"next callback is common"),ok(c[2].command.config.id===2,"callback is correct"),ok(c[3].command.config.id===3,"callback is correct"),ok(_.isArray(c[4]),"second common callback is correct"),equal(c[4].length,2,"second common callback is correct")}),test("find data mixin in chain",function(){var a=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(b){a=b}),this.store.get("contacts",{id:5}).get("contacts",{id:6}).get("persons",{id:1}).get("persons",{id:2}).get("persons",{id:3}).done(),this.mockControl.verify(),equal(a.length,5,"commands count is correct"),included(a[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly"),included(a[1],{type:"contacts",name:"get",config:{id:6}},"command is created correctly"),included(a[2],{type:"persons",name:"get",config:{id:1}},"command is created correctly"),included(a[3],{type:"persons",name:"get",config:{id:2}},"command is created correctly"),included(a[4],{type:"persons",name:"get",config:{id:3}},"command is created correctly")}),test("callbacks functionality works perfect",function(){this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(a){_.each(a,function(a){a.executed=!0,a.callbacks.success({command:a,data:{id:5,name:"Vaska Pupkin"}})})});var a={},b={};this.store.get("contacts",{id:5},{success:function(b){a=b}}).done({success:function(a){b=a}}),this.mockControl.verify(),deepEqual(a.data,{id:5,name:"Vaska Pupkin"},"command result formed correctly"),equal(b.length,1,"common result formed correctly"),deepEqual(b[0].data,{id:5,name:"Vaska Pupkin"},"common result formed correctly")}),test("failure callbacks are processed as well",function(){this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(a){_.each(a,function(a){_.extend(a,{executed:!0,failed:!0}),a.callbacks.failure({command:a,data:{responseText:"Error"}})})});var a={},b={},c={called:!1,globalCalled:!1,failure:function(b){a=b,this.called=!0},global:function(a){b=a,this.globalCalled=!0}};this.store.get("contacts",{id:5},{failure:{fn:c.failure},scope:c}).done({failure:c.global,scope:c}),this.mockControl.verify(),deepEqual(a.data,{responseText:"Error"},"command result formed correctly"),equal(b.length,1,"common result formed correctly")}),test("scope in callbacks works as required",function(){this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(a){_.each(a,function(a){a.executed=!0,a.callbacks.success({command:a,data:{id:5,name:"Vaska Pupkin"}})})});var a={},b={},c={called:!1,globalCalled:!1,success:function(b){a=b,this.called=!0},global:function(a){b=a,this.globalCalled=!0}};this.store.get("contacts",{id:5},{success:{fn:c.success},scope:c}).done({success:c.global,scope:c}),this.mockControl.verify(),deepEqual(a.data,{id:5,name:"Vaska Pupkin"},"command result formed correctly"),equal(b.length,1,"common result formed correctly"),deepEqual(b[0].data,{id:5,name:"Vaska Pupkin"},"common result formed correctly"),ok(c.called,"scope for command works good"),ok(c.globalCalled,"scope for common works good")}),test("save operation",function(){this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(a){_.each(a,function(a){a.executed=!0,a.callbacks.success({command:a,data:{id:5}})})}),this.store.save("contact",{id:5,$set:{name:"Brutality"}}).done()})};return{run:c}})