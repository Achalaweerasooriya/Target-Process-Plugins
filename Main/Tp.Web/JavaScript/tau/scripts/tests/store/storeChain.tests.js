define(["Underscore","tau/store/store","tau/store/repository","tau/store/types"],function(_,store,repository){var innerRun=function(){module("[store]",{setup:function(){var self=this;self.mockControl=new MockControl,self.proxy=self.mockControl.createMock(new repository({service:{}}));var types=[{name:"contacts",aliases:["c","contact"]},{name:"persons"}];self.store=new store({proxy:self.proxy,types:types})},teardown:function(){delete this.store,delete this.proxy,delete this.mockControl}}),test("find data using alias",function(){var commands=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(args){commands=args}),this.store.get("c",{id:5}).done(),this.mockControl.verify(),equal(commands.length,1,"commands count is correct"),included(commands[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly")}),test("check refresh api",function(){var commands=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(args){commands=args}),this.store.refresh("contacts",{id:5}).done(),this.mockControl.verify(),equal(commands.length,1,"commands count is correct"),included(commands[0],{type:"contacts",name:"refresh",config:{id:5}},"command is created correctly")}),test("find data by one operation",function(){var commands=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(args){commands=args}),this.store.get("contacts",{id:5}).done(),this.mockControl.verify(),equal(commands.length,1,"commands count is correct"),included(commands[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly")}),test("find data in chain",function(){var commands=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(args){commands=args}),this.store.get("contacts",{id:5}).get("contacts",{id:6}).done(),this.mockControl.verify(),equal(commands.length,2,"commands count is correct"),included(commands[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly"),included(commands[1],{type:"contacts",name:"get",config:{id:6}},"command is created correctly")}),test("find data using extensions",function(){var commands=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(args){commands=args}),this.store.get("contacts",{id:5}).done(),this.mockControl.verify(),equal(commands.length,1,"commands count is correct"),included(commands[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly")}),test("find data using extensions",function(){var commands=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(args){commands=args}),this.store.get("contacts",{id:5}).done(),this.mockControl.verify(),equal(commands.length,1,"commands count is correct"),included(commands[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly")}),test("find data using extensions in chain",function(){var commands=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(args){commands=args});var store=this.store.get("contacts",{id:5});store.get("persons",{id:1}).done(),this.mockControl.verify(),equal(commands.length,2,"commands count is correct"),included(commands[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly"),included(commands[1],{type:"persons",name:"get",config:{id:1}},"command is created correctly")}),test("freeze commands",function(){var commands=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(args){commands=args});var promise=this.store.freeze();this.store.get("contacts",{id:5}).get("contacts",{id:6}).get("persons",{id:1}).done(),this.store.get("persons",{id:2}).get("persons",{id:3}).done(),promise.unfreeze(),this.mockControl.verify(),equal(commands.length,5,"commands count is correct"),included(commands[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly"),included(commands[1],{type:"contacts",name:"get",config:{id:6}},"command is created correctly"),included(commands[2],{type:"persons",name:"get",config:{id:1}},"command is created correctly"),included(commands[3],{type:"persons",name:"get",config:{id:2}},"command is created correctly"),included(commands[4],{type:"persons",name:"get",config:{id:3}},"command is created correctly")}),test("empty done with callbacks safety",function(){var callbacks=[],call={success:function(r){callbacks.push(r)}};this.store.done(call),equal(callbacks.length,1,"callback come to us")}),test("freeze commands with callbacks",function(){var commands=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(args){commands=args,_.each(commands,function(command){command.executed=!0,command.callbacks.success({command:command})})});var promise=this.store.freeze(),callbacks=[],call={success:function(r){callbacks.push(r)}};this.store.get("contacts",{id:5},call).done(call),this.store.get("persons",{id:2},call).get("persons",{id:3},call).done(call),promise.unfreeze(),this.mockControl.verify(),equal(callbacks.length,5,"all callbacks come to us"),ok(callbacks[0].command.config.id===5,"first callback"),ok(_.isArray(callbacks[1]),"next callback is common"),ok(callbacks[2].command.config.id===2,"callback is correct"),ok(callbacks[3].command.config.id===3,"callback is correct"),ok(_.isArray(callbacks[4]),"second common callback is correct"),equal(callbacks[4].length,2,"second common callback is correct")}),test("find data mixin in chain",function(){var commands=null;this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(args){commands=args}),this.store.get("contacts",{id:5}).get("contacts",{id:6}).get("persons",{id:1}).get("persons",{id:2}).get("persons",{id:3}).done(),this.mockControl.verify(),equal(commands.length,5,"commands count is correct"),included(commands[0],{type:"contacts",name:"get",config:{id:5}},"command is created correctly"),included(commands[1],{type:"contacts",name:"get",config:{id:6}},"command is created correctly"),included(commands[2],{type:"persons",name:"get",config:{id:1}},"command is created correctly"),included(commands[3],{type:"persons",name:"get",config:{id:2}},"command is created correctly"),included(commands[4],{type:"persons",name:"get",config:{id:3}},"command is created correctly")}),test("callbacks functionality works perfect",function(){this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(commands){_.each(commands,function(command){command.executed=!0,command.callbacks.success({command:command,data:{id:5,name:"Vaska Pupkin"}})})});var commandSuccessResult={},commonResult={};this.store.get("contacts",{id:5},{success:function(result){commandSuccessResult=result}}).done({success:function(result){commonResult=result}}),this.mockControl.verify(),deepEqual(commandSuccessResult.data,{id:5,name:"Vaska Pupkin"},"command result formed correctly"),equal(commonResult.length,1,"common result formed correctly"),deepEqual(commonResult[0].data,{id:5,name:"Vaska Pupkin"},"common result formed correctly")}),test("failure callbacks are processed as well",function(){this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(commands){_.each(commands,function(command){_.extend(command,{executed:!0,failed:!0}),command.callbacks.failure({command:command,data:{responseText:"Error"}})})});var commandResult={},commonResult={},scope={called:!1,globalCalled:!1,failure:function(r){commandResult=r,this.called=!0},global:function(r){commonResult=r,this.globalCalled=!0}};this.store.get("contacts",{id:5},{failure:{fn:scope.failure},scope:scope}).done({failure:scope.global,scope:scope}),this.mockControl.verify(),deepEqual(commandResult.data,{responseText:"Error"},"command result formed correctly"),equal(commonResult.length,1,"common result formed correctly")}),test("scope in callbacks works as required",function(){this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(commands){_.each(commands,function(command){command.executed=!0,command.callbacks.success({command:command,data:{id:5,name:"Vaska Pupkin"}})})});var commandSuccessResult={},commonResult={},scope={called:!1,globalCalled:!1,success:function(r){commandSuccessResult=r,this.called=!0},global:function(r){commonResult=r,this.globalCalled=!0}};this.store.get("contacts",{id:5},{success:{fn:scope.success},scope:scope}).done({success:scope.global,scope:scope}),this.mockControl.verify(),deepEqual(commandSuccessResult.data,{id:5,name:"Vaska Pupkin"},"command result formed correctly"),equal(commonResult.length,1,"common result formed correctly"),deepEqual(commonResult[0].data,{id:5,name:"Vaska Pupkin"},"common result formed correctly"),ok(scope.called,"scope for command works good"),ok(scope.globalCalled,"scope for common works good")}),test("save operation",function(){this.proxy.expects().execute(TypeOf.isA(Array)).andStub(function(commands){_.each(commands,function(command){command.executed=!0,command.callbacks.success({command:command,data:{id:5}})})}),this.store.save("contact",{id:5,$set:{name:"Brutality"}}).done()})};return{run:innerRun}})