define(["Underscore","tau/store/store","tau/store/repository","tau/store/services/service.rest","tau/rules/core"],function(_,store,repository,rest,rules){var innerRun=function(){module("[rules]",{setup:function(){var self=this;self.mockControl=new MockControl,self.service=self.mockControl.createMock(rest);var config={service:self.service,types:{card:{name:"card",fields:["n"],refs:{c:{name:"contact"}}},entity:{name:"entity",fields:["dsc"],isParentType:!0,discriminator:"childType",detectType:function(obj){return obj.childType}},person:{parent:"entity",name:"person",fields:["name"],refs:{contacts:{list:!0,name:"contact",fields:["email"]},cards:{list:!0,name:"card",fields:["id"]}}},contact:{name:"contact",fields:["email"],refs:{owner:{name:"person"},card:{name:"card"}}}}};self.repository=new repository(config),self.store=new store({proxy:self.repository}),self.rules=new rules({store:self.store})},teardown:function(){delete this.store,delete this.proxy,delete this.mockControl,this.rules.destroy(),delete this.rules}}),test("auto include when property initialized",function(){var json={__type:"person",id:5,name:"Vasya Pupkin",email:"pip@pup.com",role:"master"};this.repository.registerData(json);var command=null;this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){return command=args,{id:5,name:"Lilu",role:"slave"}}),this.rules.register({type:"person",changes:["name","email"],fields:["role"]}),this.store.save("person",{id:5,$set:{name:"Lilu"},fields:["name"]}).done(),this.mockControl.verify(),included(command.config,{fields:["id","name","role"]},"fields are attached")}),test("no auto include when property is not initialized",function(){var json={__type:"person",id:5,name:"Vasya Pupkin",email:"pip@pup.com",role:"master"};this.repository.registerData(json);var command=null;this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){return command=args,{id:5,name:"Lilu",role:"slave"}}),this.rules.register({type:"person",changes:["name","email"],fields:["role"]}),this.store.save("person",{id:5,$set:{name:"Lilu"},fields:["name"]}).done(),this.mockControl.verify(),included(command.config,{fields:["id","name","role"]},"fields are attached")}),test("double rule",function(){var json={__type:"person",id:5,name:"Vasya Pupkin",email:"pip@pup.com",role:"master"};this.repository.registerData(json);var command=null;this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){return command=args,{id:5,name:"Lilu",role:"slave"}}),this.rules.register({type:"person",changes:["name","email"],fields:["role"]}),this.rules.register({type:"person",changes:["name","email"],fields:["role"]}),this.store.save("person",{id:5,$set:{name:"Lilu"},fields:["name"]}).done(),this.mockControl.verify(),included(command.config,{fields:["id","name","role"]},"fields are attached"),ok(command.config.fields.length,3,"fields are attached")}),test("several auto includes",function(){var json={__type:"person",id:5,name:"Vasya Pupkin",email:"pip@pup.com",role:"master",avatar:"yes"};this.repository.registerData(json);var command=null;this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){return command=args,{id:5,name:"Lilu",role:"slave"}}),this.rules.register({type:"person",changes:["name"],fields:["role"]}),this.rules.register({type:"person",changes:["name"],fields:["avatar"]}),this.store.save("person",{id:5,$set:{name:"Lilu"},fields:["name"]}).done(),this.mockControl.verify(),included(command.config,{fields:["id","name","role","avatar"]},"fields are attached"),ok(command.config.fields.length,4,"fields are attached")})};return{run:innerRun}})