define(["tau/models/model.extensions","tests/common/modelConfig","tests/common/testData","tau/configurator","tau/services/service.rest","tau/core/repository"],function(a,b,c,d,e,f){var g=function(){module("[model.extensions]",{setup:function(){d.clear(),d.disableRules(),this.mockControl=new MockControl,this.serviceMock=this.mockControl.createMock(e),this.repository=new f({service:this.serviceMock}),this.repository.registerData(c.getSummaryForUserStory()),this.repositoryMock=this.mockControl.createMock(this.repository),d.setProxy(this.repositoryMock),this.model={store:d.getStore(),config:{context:b.createForUserStory(1)}}},teardown:function(){delete this.mockControl,delete this.serviceMock,delete this.repository,delete this.repositoryMock,delete this.model}}),test("calculateBugsAndTasksCount should make requests to store",function(){var b=c.getSummaryForUserStory(),d={count:b["tasks-count"]+b["bugs-count"]},e={},f={callback:function(a){e=a}},g={scope:f,callback:f.callback},h=[Similar.to({name:"get",type:"userStory",config:Similar.to({id:this.model.config.context.entity.id,fields:["id","tasks-count","bugs-count"]})})];this.repositoryMock.expects().execute(h).andStub(this.repository.execute.tauCreateDelegate(this.repository)),a.calculateBugsAndTasksCount.call(this.model,g),same(e,d,"Returned result is valid"),this.mockControl.verify()}),test("calculateBugsAndTasksCount should depend from practices",function(){this.model.config.context.applicationContext.processes[0].practices=[{name:"Planning"}];var b=c.getSummaryForUserStory(),d={count:b["tasks-count"]},e={},f={callback:function(a){e=a}},g={scope:f,callback:f.callback},h=[Similar.to({name:"get",type:"userStory",config:Similar.to({id:this.model.config.context.entity.id,fields:["id","tasks-count"]})})];this.repositoryMock.expects().execute(h).andStub(this.repository.execute.tauCreateDelegate(this.repository)),a.calculateBugsAndTasksCount.call(this.model,g),same(e,d,"Returned result is valid"),this.mockControl.verify()})};return{run:g}})