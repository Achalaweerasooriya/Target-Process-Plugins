define(["tau/models/model.extensions","tests/common/modelConfig","tests/common/testData","tau/configurator","tau/store/services/service.rest","tau/store/repository"],function(modelExtensions,modelConfig,testData,configurator,restService,repository){var innerRun=function(){module("[model.extensions]",{setup:function(){configurator.clear(),configurator.disableRules(),this.mockControl=new MockControl,this.serviceMock=this.mockControl.createMock(restService),this.repository=new repository({service:this.serviceMock}),this.repository.registerData(testData.getSummaryForUserStory()),this.repositoryMock=this.mockControl.createMock(this.repository),configurator.setProxy(this.repositoryMock),this.model={store:configurator.getStore(),config:{context:modelConfig.createForUserStory(1)}}},teardown:function(){delete this.mockControl,delete this.serviceMock,delete this.repository,delete this.repositoryMock,delete this.model}}),test("calculateBugsAndTasksCount should make requests to store",function(){var testObj=testData.getSummaryForUserStory(),expectedData={count:testObj["tasks-count"]+testObj["bugs-count"]},actualData={},scope={callback:function(data){actualData=data}},callbackInfo={scope:scope,callback:scope.callback},expectedCommands=[Similar.to({name:"get",type:"userStory",config:Similar.to({id:this.model.config.context.entity.id,fields:["id","tasks-count","bugs-count"]})})];this.repositoryMock.expects().execute(expectedCommands).andStub(_.bind(this.repository.execute,this.repository)),modelExtensions.calculateBugsAndTasksCount.call(this.model,callbackInfo),same(actualData,expectedData,"Returned result is valid"),this.mockControl.verify()}),test("calculateBugsAndTasksCount should depend from practices",function(){this.model.config.context.applicationContext.processes[0].practices=[{name:"Planning"}];var testObj=testData.getSummaryForUserStory(),expectedData={count:testObj["tasks-count"]},actualData={},scope={callback:function(data){actualData=data}},callbackInfo={scope:scope,callback:scope.callback},expectedCommands=[Similar.to({name:"get",type:"userStory",config:Similar.to({id:this.model.config.context.entity.id,fields:["id","tasks-count"]})})];this.repositoryMock.expects().execute(expectedCommands).andStub(_.bind(this.repository.execute,this.repository)),modelExtensions.calculateBugsAndTasksCount.call(this.model,callbackInfo),same(actualData,expectedData,"Returned result is valid"),this.mockControl.verify()})};return{run:innerRun}})