define(["Underscore","tau/core/model.editable.base","tau/core/bus","tests/components/utils/dispatcher"],function(a,b,c,d){return{run:function(){function e(e){module("[model.editable.base] events life cycle",{setup:function(){this.bus=new c,this.events=e||["validate","afterValidate","beforeSave","afterSave"],this.modelDispatcher=d.createDispatcher(this.bus,this.events),this.verifyConfigOption=function(a,b){ok(this.modelDispatcher.args[a][b],"'"+b+"' does not exist in "+a+" arguments")},this.model=new b({bus:this.bus,store:{save:function(b,c,d){return a.extend(c,{type:b}),d.success({command:c,data:{}}),this},done:function(){return this}}})},tearDown:function(){delete this.modelDispatcher,delete this.model,delete this.bus}})}e(),test("beforeSave and afterSave arguments",function(){this.bus.fire("save",{id:45,$set:{name:"Test name"},typeName:"UgaAga"}),d.verifyLifeCycle(this.events,this.modelDispatcher,"model editable"),same(this.modelDispatcher.order,this.events),this.verifyConfigOption("beforeSave","cmd"),this.verifyConfigOption("beforeSave","type"),this.verifyConfigOption("afterSave","cmd"),this.verifyConfigOption("afterSave","type")}),e(["validate","afterValidate","validationFailed"]),test("beforeSave and afterSave are not fired if validation failed",function(){this.bus.on("validate",function(a){a.data.validation.isValid=!1}),this.bus.fire("save",{id:45,$set:{name:"Test name"},typeName:"UgaAga"}),d.verifyLifeCycle(this.events,this.modelDispatcher,"model editable"),ok(!this.modelDispatcher.counts.beforeSave),ok(!this.modelDispatcher.counts.afterSave)})}}})