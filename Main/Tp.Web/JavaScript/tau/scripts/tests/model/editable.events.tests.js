define(["Underscore","tau/core/model.editable.base","tau/core/bus","tests/components/utils/dispatcher"],function(_,BaseEditable,Bus,dispatcher){return{run:function(){function setup(events){module("[model.editable.base] events life cycle",{setup:function(){this.bus=new Bus,this.events=events||["validate","afterValidate","beforeSave","afterSave"],this.modelDispatcher=dispatcher.createDispatcher(this.bus,this.events),this.verifyConfigOption=function(evtName,option){ok(this.modelDispatcher.args[evtName][option],"'"+option+"' does not exist in "+evtName+" arguments")},this.model=new BaseEditable({bus:this.bus,store:{save:function(type,cmd,callbacks){return _.extend(cmd,{type:type}),callbacks.success({command:cmd,data:{}}),this},done:function(){return this}}})},tearDown:function(){delete this.modelDispatcher,delete this.model,delete this.bus}})}setup(),test("beforeSave and afterSave arguments",function(){this.bus.fire("save",{id:45,$set:{name:"Test name"},typeName:"UgaAga"}),dispatcher.verifyLifeCycle(this.events,this.modelDispatcher,"model editable"),same(this.modelDispatcher.order,this.events),this.verifyConfigOption("beforeSave","cmd"),this.verifyConfigOption("beforeSave","type"),this.verifyConfigOption("afterSave","cmd"),this.verifyConfigOption("afterSave","type")}),setup(["validate","afterValidate","validationFailed"]),test("beforeSave and afterSave are not fired if validation failed",function(){this.bus.on("validate",function(evt){evt.data.validation.isValid=!1}),this.bus.fire("save",{id:45,$set:{name:"Test name"},typeName:"UgaAga"}),dispatcher.verifyLifeCycle(this.events,this.modelDispatcher,"model editable"),ok(!this.modelDispatcher.counts.beforeSave),ok(!this.modelDispatcher.counts.afterSave)})}}})