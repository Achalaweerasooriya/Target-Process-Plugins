define(["Underscore","tau/core/state.manager","tau/services/service.routing","tau/core/external"],function(_,StateManager,ServiceRouting,External){var innerRun=function(){module("[stateManager]",{setup:function(){var self=this;self.originalHash='board/5&component1={"collapsed":true}&component2={"a":1}&component3={"b":1}&complexObj1={"a":{"x":1}}&complexObj2={"a":{"x":[1,2,3]}}',self.external=new External({location:{hash:"#"+self.originalHash}}),self.service=new ServiceRouting({external:self.external}),self.stateManager=new StateManager({service:self.service,state:self.external.hashParams()})},teardown:function(){delete this.originalHash,delete this.external,delete this.service,delete this.stateManager}}),test("should allow to get state of existing parameter",function(){var result=null;this.stateManager.get({id:"component1",fields:["collapsed"],callback:function(r){result=r}}),same(result,{collapsed:!0},"parameter value")}),test("should allow to get state of non-existing parameter",function(){var result=null;this.stateManager.get({id:"component77",fields:["x"],callback:function(r){result=r}}),same(result,{x:null},"parameter value")}),test("should allow to set state of existing parameter",function(){var result=null;this.stateManager.set({id:"component1",set:{collapsed:!1},callback:function(r){result=r}}),same(result,{collapsed:!1},"parameter value")}),test("should allow to set state of non-existing parameter",function(){var result=null;this.stateManager.set({id:"component77",set:{x:22},callback:function(r){result=r}}),same(result,{x:22},"parameter value")}),test("should propagate state changes",function(){var self=this;this.external.onHashChange(function(ext){var hash=ext.hashParams();self.stateManager.update(hash)});var result={},scope={},callback=function(data){result[data.paramId+"_"+data.fieldName]=data};self.stateManager.bind({paramId:"component1",fieldName:"collapsed",callback:callback,listener:scope}),self.stateManager.bind({paramId:"component2",fieldName:"a",callback:callback,listener:scope}),self.stateManager.bind({paramId:"component3",fieldName:"a",callback:callback,listener:scope}),self.stateManager.bind({paramId:"component3",fieldName:"b",callback:callback,listener:scope}),self.stateManager.bind({paramId:"component4",fieldName:"x",callback:callback,listener:scope}),self.stateManager.bind({paramId:"complexObj1",fieldName:"a",callback:callback,listener:scope}),self.stateManager.bind({paramId:"complexObj2",fieldName:"a",callback:callback,listener:scope}),this.external.setHash('board/5&component1={"collapsed":false}&component3={"a": 7}&component4={"x":5}&complexObj1={"a":{"x":1}}&complexObj2={"a":{"x":[1,2]}}'),this.external.triggerHashChange(),same(result.component1_collapsed,{paramId:"component1",fieldName:"collapsed",value:!1,delta:{curr:!1,prev:!0}},"should react on field value change"),same(result.component2_a,{paramId:"component2",fieldName:"a",value:null,delta:{curr:null,prev:1}},"should react on removing the whole parameter"),same(result.component3_a,{paramId:"component3",fieldName:"a",value:7,delta:{curr:7,prev:null}},"should react on adding new field"),same(result.component3_b,{paramId:"component3",fieldName:"b",value:null,delta:{curr:null,prev:1}},"should react on removing existing field"),same(result.component4_x,{paramId:"component4",fieldName:"x",value:5,delta:{curr:5,prev:null}},"should react on adding new parameter"),same(result.complexObj2_a,{paramId:"complexObj2",fieldName:"a",value:{x:[1,2]},delta:{curr:{x:[1,2]},prev:{x:[1,2,3]}}},"should react on array change"),equals(result.complexObj1_a,null,"should not react on another params change"),self.stateManager.unbind(scope)})};return{run:innerRun}})