define(["Underscore","tau/configurator","tau/store/repository","tau/store/services/service.rest","tests/common/modelConfig"],function(_,a,b,c,d){var e={scope:null,setup:function(b,c){return this.scope=b,_(c).defaults({}),a.clear(),this.setAppPath("/TP"),this.setCurrentDate(new Date(1307600546192)),a.disableRules(),this.scope.mockControl=new MockControl,this},setAppPath:function(b){var c=this.scope;return c.rootAppPath=b,a.setApplicationPath(c.rootAppPath),this},setCurrentDate:function(b){return a.setCurrentDate(b),this},getAppPath:function(){var a=this.scope;return a.rootAppPath},setInitialData:function(b){return _(b).defaults({testData:[]}),a.setInitialData(b.testData),this.scope.testData=b.testData,this},mockRepository:function(b){b=b||{},_(b).defaults({testData:[]});var d=this.scope,e=d.serviceMock=d.mockControl.createMock(c);return a.setService(e),d.repository=a.getProxy(),d.repository.registerData(b.testData),d.testData=b.testData,d.repositoryMock=d.mockControl.createMock(d.repository),a.setProxy(d.repositoryMock),this},mockService:function(b){b=b||{},_(b).defaults({testData:[]});var d=this.scope;return d.serviceMock=d.mockControl.createMock(c),a.setService(d.serviceMock),d.repository=a.getProxy(),d.repository.registerData(b.testData),d.testData=b.testData,this},createModel:function(a){var b=this.scope;_(a).defaults({context:{type:"story",id:15},data:{}});if(!a.factory)throw"Factory is missing";return a.context.type&&(b.context=d[a.context.type](a.context.id)),_(b.context).extend(a.data),b.model=a.factory.createModel(b.context),this},tearDown:function(a){delete a.rootAppPath,delete a.mockControl,delete a.repository,delete a.repositoryMock,delete a.context,delete a.model,delete a.assignable,delete a.bug,delete a.story,delete a.component,delete a.config}};return e})