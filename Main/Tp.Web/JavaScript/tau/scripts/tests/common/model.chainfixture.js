define(["Underscore","tau/configurator","tau/store/repository","tau/store/services/service.rest","tests/common/modelConfig"],function(_,configurator,repository,serviceRest,modelConfig){var fixtureChained={scope:null,setup:function(scope,config){return this.scope=scope,_(config).defaults({}),configurator.getExternal().unbindHashChange(),configurator.clear(),this.setAppPath("/TP"),this.setCurrentDate(new Date(1307600546192)),configurator.disableRules(),this.scope.mockControl=new MockControl,this},setAppPath:function(path){var scope=this.scope;return scope.rootAppPath=path,configurator.setApplicationPath(scope.rootAppPath),this},setCurrentDate:function(date){return configurator.setCurrentDate(date),this},getAppPath:function(){var scope=this.scope;return scope.rootAppPath},setInitialData:function(config){return _(config).defaults({testData:[]}),configurator.setInitialData(config.testData),this.scope.testData=config.testData,this},mockRepository:function(config){config=config||{},_(config).defaults({testData:[]});var scope=this.scope,serviceMock=scope.serviceMock=scope.mockControl.createMock(serviceRest);return configurator.setService(serviceMock),scope.repository=configurator.getProxy(),scope.repository.registerData(config.testData),scope.testData=config.testData,scope.repositoryMock=scope.mockControl.createMock(scope.repository),configurator.setProxy(scope.repositoryMock),this},mockService:function(config){config=config||{},_(config).defaults({testData:[]});var scope=this.scope;return scope.serviceMock=scope.mockControl.createMock(serviceRest),configurator.setService(scope.serviceMock),scope.repository=configurator.getProxy(),scope.repository.registerData(config.testData),scope.testData=config.testData,this},createModel:function(config){var scope=this.scope;_(config).defaults({context:{type:"story",id:15},data:{}});if(!config.factory)throw"Factory is missing";return config.context.type&&(scope.context=modelConfig[config.context.type](config.context.id)),_(scope.context).extend(config.data),scope.model=config.factory.createModel(scope.context),this},tearDown:function(scope){delete scope.rootAppPath,delete scope.mockControl,delete scope.repository,delete scope.repositoryMock,delete scope.context,delete scope.model,delete scope.assignable,delete scope.bug,delete scope.story,delete scope.component,delete scope.config}};return fixtureChained})