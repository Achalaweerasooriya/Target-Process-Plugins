define(["Underscore","tau/configurator","tau/core/repository","tau/services/service.rest","tests/common/modelConfig"],function(a,b,c,d,e){var f={scope:null,setup:function(c,d){return this.scope=c,a(d).defaults({}),b.clear(),this.setAppPath("/TP"),this.setCurrentDate(new Date(1307600546192)),b.disableRules(),this.scope.mockControl=new MockControl,this},setAppPath:function(a){var c=this.scope;return c.rootAppPath=a,b.setApplicationPath(c.rootAppPath),this},setCurrentDate:function(a){return b.setCurrentDate(a),this},getAppPath:function(){var a=this.scope;return a.rootAppPath},setInitialData:function(c){return a(c).defaults({testData:[]}),b.setInitialData(c.testData),this.scope.testData=c.testData,this},mockRepository:function(c){c=c||{},a(c).defaults({testData:[]});var e=this.scope,f=e.serviceMock=e.mockControl.createMock(d);return b.setService(f),e.repository=b.getProxy(),e.repository.registerData(c.testData),e.testData=c.testData,e.repositoryMock=e.mockControl.createMock(e.repository),b.setProxy(e.repositoryMock),this},mockService:function(c){c=c||{},a(c).defaults({testData:[]});var e=this.scope;return e.serviceMock=e.mockControl.createMock(d),b.setService(e.serviceMock),e.repository=b.getProxy(),e.repository.registerData(c.testData),e.testData=c.testData,this},createModel:function(b){var c=this.scope;a(b).defaults({context:{type:"story",id:15},data:{}});if(!b.factory)throw"Factory is missing";return b.context.type&&(c.context=e[b.context.type](b.context.id)),a(c.context).extend(b.data),c.model=b.factory.createModel(c.context),this},tearDown:function(a){delete a.rootAppPath,delete a.mockControl,delete a.repository,delete a.repositoryMock,delete a.context,delete a.model,delete a.assignable,delete a.bug,delete a.story,delete a.component,delete a.config}};return f})