define(["tests/common/model.chainfixture"],function(fixture){return{shouldInitializeValidData:function(config){_(config).defaults({testData:[],context:{type:"bug",id:"15"},data:{},testName:"should initialize with valid data"});if(!config.moduleName&&!config.factory)throw"Required specification parameter is missing";module("[model."+config.moduleName+"] initialize and afterInit",{setup:function(){fixture.setup(this).setInitialData({testData:config.testData}).createModel({factory:config.factory,context:config.context,data:config.data})},teardown:function(){fixture.tearDown(this)}}),test(config.testName,function(){var data={},dataArr=[],countOfCalls=0;this.model.on("afterInit",function(evtArgs){data=evtArgs.data,dataArr.push(data),countOfCalls++}),this.model.initialize(),config.fnAsserts.call(this,data,countOfCalls,dataArr)})},shouldRequestStoreOnInitialize:function(config){_(config).defaults({testData:[],context:{type:"bug",id:"15"},data:{},testName:"should make request to store on initialize"});if(!config.moduleName&&!config.factory)throw"Required specification parameter is missing";if(config.expectedCommands&&(config.expectedCmdFields||config.expectedCmdFieldsArr))throw"expectedCommands and expectedCmdFields(Arr) parameters are mutually exclusive";module("[model."+config.moduleName+":"+config.context.type+"]",{setup:function(){fixture.setup(this).mockRepository({testData:config.testData}).createModel({factory:config.factory,context:config.context,data:config.data})},teardown:function(){fixture.tearDown(this)}}),test("should make request to store on initialize",function(){var self=this,expectedCmdArray=[],fieldsArr=[];config.expectedCommands?expectedCmdArray=config.expectedCommands:(config.expectedCmdFields&&fieldsArr.push(config.expectedCmdFields),config.expectedCmdFieldsArr&&(fieldsArr=fieldsArr.concat(config.expectedCmdFieldsArr)),_.each(fieldsArr,function(items){var command={name:"get",type:self.context.entity.entityType.name},commandConfig={id:self.context.entity.id,fields:["id"]};commandConfig.fields=commandConfig.fields.concat(items),command.config=Similar.to(commandConfig),expectedCmdArray.push(Similar.to(command))})),this.repositoryMock.expects().execute(expectedCmdArray).andStub(_.bind(this.repository.execute,this.repository)),this.model.initialize(),this.mockControl.verify()})}}})