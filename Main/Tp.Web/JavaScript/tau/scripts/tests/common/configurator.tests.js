define(["Underscore","jQuery","tau/configurator","tau/configurator","tau/services/service.rest","tau/store/store"],function(a,b,c,d,e,f){var g=function(){function a(a){return{stack:a,handleKeyDown:function(a){this.stack.push(a)}}}module("[configurator] module tests",{setup:function(){c.clear(),this.mockControl=new MockControl},teardown:function(){delete this.mockControl}}),test("should return store",function(){var a={},b=c.getStore(a);ok(b instanceof f,"Returned store type is valid")}),module("[configurator] module (alternative store) tests",{setup:function(){c.clear(),this.mockControl=new MockControl,this.serviceRestMock=this.mockControl.createMock(e),c.setService(this.serviceRestMock),c.setInitialData({})},teardown:function(){delete this.mockControl,delete this.serviceRestMock,c.clear()}}),test("should allow to replace store with custom instance",function(){var a=c.getStore();same(a.config.proxy.service,this.serviceRestMock,"Actual custom service is valid")}),test("should allow to replace store with custom instance for another configurator module reference",function(){var a=d.getStore();same(a.config.proxy.service,this.serviceRestMock,"Service from another configurator module reference is valid")}),test("should allow to replace store with custom instance for another configurator module reference",function(){var a=d.getStore();same(a.config.proxy.service,this.serviceRestMock,"Service from another configurator module reference is valid")}),test("should distribute keyboard event",function(){var d=[],e=[],f=a(d),g=a(e),h=b(document);h.simulate("keydown",{keyCode:b.ui.keyCode.BACKSPACE}),h.simulate("keydown",{keyCode:b.ui.keyCode.ESCAPE}),equal(d.length,0,"Count of handled key events for handler1 is valid"),equal(e.length,0,"Count of handled key events for handler2 is valid"),c.getKeyBoardManager().pushHandler(f),h.simulate("keydown",{keyCode:b.ui.keyCode.BACKSPACE}),h.simulate("keydown",{keyCode:b.ui.keyCode.ESCAPE}),equal(d.length,2,"Count of handled key events for handler1 is valid"),equal(e.length,0,"Count of handled key events for handler2 is valid"),c.getKeyBoardManager().pushHandler(g),h.simulate("keydown",{keyCode:b.ui.keyCode.BACKSPACE}),h.simulate("keydown",{keyCode:b.ui.keyCode.ESCAPE}),equal(d.length,2,"Count of handled key events for handler1 is valid"),equal(e.length,2,"Count of handled key events for handler2 is valid"),c.getKeyBoardManager().popHandler(),h.simulate("keydown",{keyCode:b.ui.keyCode.BACKSPACE}),h.simulate("keydown",{keyCode:b.ui.keyCode.ESCAPE}),equal(d.length,4,"Count of handled key events for handler1 is valid"),equal(e.length,2,"Count of handled key events for handler2 is valid"),c.getKeyBoardManager().popHandler(),h.simulate("keydown",{keyCode:b.ui.keyCode.BACKSPACE}),h.simulate("keydown",{keyCode:b.ui.keyCode.ESCAPE}),equal(d.length,4,"Count of handled key events for handler1 is valid"),equal(e.length,2,"Count of handled key events for handler2 is valid")}),module("[configurator] window, routing and history test"),test("should allow to set mock window",function(){c.setWindow({location:{hash:"bzzz"}})}),test("should allow to get current ACID from location param",function(){c.setWindow({location:{href:"http://plan.tpondemand.com/TeamsBoard/default.aspx?acid=2747ACD147E9F84031390C575832838D#TBP=bbef70b64ab6"}}),equal(c.getCurrentAcid(),"2747ACD147E9F84031390C575832838D","get acid from parameters"),c.setWindow({location:{href:"http://plan.tpondemand.com"}}),equal(c.getCurrentAcid(),"","get acid from parameters")})};return{run:g}})