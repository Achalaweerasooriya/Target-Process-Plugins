define(["Underscore","jQuery","tau/configurator","tau/configurator","tau/store/services/service.rest","tau/store/store"],function(_,$,a,b,c,d){var e=function(){function e(a){return{stack:a,handleKeyDown:function(a){this.stack.push(a)}}}module("[configurator] module tests",{setup:function(){a.clear(),this.mockControl=new MockControl},teardown:function(){delete this.mockControl}}),test("should return store",function(){var b={},c=a.getStore(b);ok(c instanceof d,"Returned store type is valid")}),module("[configurator] module (alternative store) tests",{setup:function(){a.clear(),this.mockControl=new MockControl,this.serviceRestMock=this.mockControl.createMock(c),a.setService(this.serviceRestMock),a.setInitialData({})},teardown:function(){delete this.mockControl,delete this.serviceRestMock,a.clear()}}),test("should allow to replace store with custom instance",function(){var b=a.getStore();same(b.config.proxy.service,this.serviceRestMock,"Actual custom service is valid")}),test("should allow to replace store with custom instance for another configurator module reference",function(){var a=b.getStore();same(a.config.proxy.service,this.serviceRestMock,"Service from another configurator module reference is valid")}),test("should allow to replace store with custom instance for another configurator module reference",function(){var a=b.getStore();same(a.config.proxy.service,this.serviceRestMock,"Service from another configurator module reference is valid")}),test("should distribute keyboard event",function(){var b=[],c=[],d=e(b),f=e(c),g=$(document);g.simulate("keydown",{keyCode:$.ui.keyCode.BACKSPACE}),g.simulate("keydown",{keyCode:$.ui.keyCode.ESCAPE}),equal(b.length,0,"Count of handled key events for handler1 is valid"),equal(c.length,0,"Count of handled key events for handler2 is valid"),a.getKeyBoardManager().pushHandler(d),g.simulate("keydown",{keyCode:$.ui.keyCode.BACKSPACE}),g.simulate("keydown",{keyCode:$.ui.keyCode.ESCAPE}),equal(b.length,2,"Count of handled key events for handler1 is valid"),equal(c.length,0,"Count of handled key events for handler2 is valid"),a.getKeyBoardManager().pushHandler(f),g.simulate("keydown",{keyCode:$.ui.keyCode.BACKSPACE}),g.simulate("keydown",{keyCode:$.ui.keyCode.ESCAPE}),equal(b.length,2,"Count of handled key events for handler1 is valid"),equal(c.length,2,"Count of handled key events for handler2 is valid"),a.getKeyBoardManager().popHandler(),g.simulate("keydown",{keyCode:$.ui.keyCode.BACKSPACE}),g.simulate("keydown",{keyCode:$.ui.keyCode.ESCAPE}),equal(b.length,4,"Count of handled key events for handler1 is valid"),equal(c.length,2,"Count of handled key events for handler2 is valid"),a.getKeyBoardManager().popHandler(),g.simulate("keydown",{keyCode:$.ui.keyCode.BACKSPACE}),g.simulate("keydown",{keyCode:$.ui.keyCode.ESCAPE}),equal(b.length,4,"Count of handled key events for handler1 is valid"),equal(c.length,2,"Count of handled key events for handler2 is valid")}),module("[configurator] window, routing and history test"),test("should allow to set mock window",function(){a.setWindow({location:{hash:"bzzz"}})}),test("should allow to get current ACID from location param",function(){a.setWindow({location:{href:"http://plan.tpondemand.com/TeamsBoard/default.aspx?acid=2747ACD147E9F84031390C575832838D#TBP=bbef70b64ab6"}}),equal(a.getCurrentAcid(),"2747ACD147E9F84031390C575832838D","get acid from parameters"),a.setWindow({location:{href:"http://plan.tpondemand.com"}}),equal(a.getCurrentAcid(),"","get acid from parameters")}),module("[configurator] external",{setup:function(){},teardown:function(){a.clearSingles()}}),test("should allow to set/get external",function(){a.setExternal({location:{hash:"#board/5"}});var b=a.getExternal().getHash();equal(b,"board/5","hash is valid")}),test("should allow to get state manager",function(){a.setExternal({location:{hash:"#board/5"}});var b=a.getExternal(),c=a.getStateManager();c.set({id:"key1",set:{field1:1,field2:2},callback:function(){b.triggerHashChange()}}),equals(b.getHash(),'board/5&key1={"field1":1,"field2":2}',"state manager and external are binded");var d={},e=null;c.bind({paramId:"key1",fieldName:"field1",callback:function(a){e=a},listener:d}),b.setHashParam("key1",{field1:100}),b.triggerHashChange();var f={paramId:"key1",fieldName:"field1",value:100,delta:{prev:1,curr:100}};same(e,f,"state manager and external are binded in backward more")})};return{run:e}})