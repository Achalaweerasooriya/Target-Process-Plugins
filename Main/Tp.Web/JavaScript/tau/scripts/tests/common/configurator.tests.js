define(["Underscore","jQuery","tau/configurator","tau/configurator","tau/store/services/service.rest","tau/store/store"],function(_,$,configurator,anotherConfiguratorInstance,serviceRest,store){var innerRun=function(){function createHandler(handlerStack){return{stack:handlerStack,handleKeyDown:function(evt){this.stack.push(evt)}}}module("[configurator] module tests",{setup:function(){configurator.clear(),this.mockControl=new MockControl},teardown:function(){delete this.mockControl}}),test("should return store",function(){var config={},configuredStore=configurator.getStore(config);ok(configuredStore instanceof store,"Returned store type is valid")}),module("[configurator] module (alternative store) tests",{setup:function(){configurator.clear(),this.mockControl=new MockControl,this.serviceRestMock=this.mockControl.createMock(serviceRest),configurator.setService(this.serviceRestMock),configurator.setInitialData({})},teardown:function(){delete this.mockControl,delete this.serviceRestMock,configurator.clear()}}),test("should allow to replace store with custom instance",function(){var actualStore=configurator.getStore();same(actualStore.config.proxy.service,this.serviceRestMock,"Actual custom service is valid")}),test("should allow to replace store with custom instance for another configurator module reference",function(){var actualStore=anotherConfiguratorInstance.getStore();same(actualStore.config.proxy.service,this.serviceRestMock,"Service from another configurator module reference is valid")}),test("should allow to replace store with custom instance for another configurator module reference",function(){var actualStore=anotherConfiguratorInstance.getStore();same(actualStore.config.proxy.service,this.serviceRestMock,"Service from another configurator module reference is valid")}),test("should distribute keyboard event",function(){var handler1Stack=[],handler2Stack=[],handler1=createHandler(handler1Stack),handler2=createHandler(handler2Stack),$document=$(document);$document.simulate("keydown",{keyCode:$.ui.keyCode.BACKSPACE}),$document.simulate("keydown",{keyCode:$.ui.keyCode.ESCAPE}),equal(handler1Stack.length,0,"Count of handled key events for handler1 is valid"),equal(handler2Stack.length,0,"Count of handled key events for handler2 is valid"),configurator.getKeyBoardManager().pushHandler(handler1),$document.simulate("keydown",{keyCode:$.ui.keyCode.BACKSPACE}),$document.simulate("keydown",{keyCode:$.ui.keyCode.ESCAPE}),equal(handler1Stack.length,2,"Count of handled key events for handler1 is valid"),equal(handler2Stack.length,0,"Count of handled key events for handler2 is valid"),configurator.getKeyBoardManager().pushHandler(handler2),$document.simulate("keydown",{keyCode:$.ui.keyCode.BACKSPACE}),$document.simulate("keydown",{keyCode:$.ui.keyCode.ESCAPE}),equal(handler1Stack.length,2,"Count of handled key events for handler1 is valid"),equal(handler2Stack.length,2,"Count of handled key events for handler2 is valid"),configurator.getKeyBoardManager().popHandler(),$document.simulate("keydown",{keyCode:$.ui.keyCode.BACKSPACE}),$document.simulate("keydown",{keyCode:$.ui.keyCode.ESCAPE}),equal(handler1Stack.length,4,"Count of handled key events for handler1 is valid"),equal(handler2Stack.length,2,"Count of handled key events for handler2 is valid"),configurator.getKeyBoardManager().popHandler(),$document.simulate("keydown",{keyCode:$.ui.keyCode.BACKSPACE}),$document.simulate("keydown",{keyCode:$.ui.keyCode.ESCAPE}),equal(handler1Stack.length,4,"Count of handled key events for handler1 is valid"),equal(handler2Stack.length,2,"Count of handled key events for handler2 is valid")}),module("[configurator] window, routing and history test"),test("should allow to set mock window",function(){configurator.setWindow({location:{hash:"bzzz"}})}),test("should allow to get current ACID from location param",function(){configurator.setWindow({location:{href:"http://plan.tpondemand.com/TeamsBoard/default.aspx?acid=2747ACD147E9F84031390C575832838D#TBP=bbef70b64ab6"}}),equal(configurator.getCurrentAcid(),"2747ACD147E9F84031390C575832838D","get acid from parameters"),configurator.setWindow({location:{href:"http://plan.tpondemand.com"}}),equal(configurator.getCurrentAcid(),"","get acid from parameters")}),module("[configurator] external",{setup:function(){},teardown:function(){configurator.clear()}}),test("should allow to set/get external",function(){configurator.getHashService().setFakeWindow("#board/5");var hash=configurator.getExternal().getHash();equal(hash,"board/5","hash is valid")}),test("should allow to get state manager",function(){configurator.getHashService().setFakeWindow("#board/5"),configurator.getHashService().setDefaultEncoder();var external=configurator.getHashService(),sm=configurator.getStateManager();sm.set({id:"key1",set:{field1:1,field2:2},callback:function(){external.triggerHashChange()}}),equals(external.getHash(),'board/5&key1={"field1":1,"field2":2}',"state manager and external are binded");var scope={},actualResult=null;sm.bind({paramId:"key1",fieldName:"field1",callback:function(r){actualResult=r},listener:scope}),external.setHashParam("key1",{field1:100}),external.triggerHashChange();var expectedResult={paramId:"key1",fieldName:"field1",value:100,delta:{prev:1,curr:100}};same(actualResult,expectedResult,"state manager and external are binded in backward more")})};return{run:innerRun}})