define(["Underscore","tau/store/repository","tau/store/services/service.rest","tau/store/header"],function(_,repository,serviceRest,tauHeader){var innerRun=function(){module("[repository]",{setup:function(){var self=this;self.mockControl=new MockControl,self.service=self.mockControl.createMock(serviceRest);var config={service:self.service,types:{card:{name:"card",fields:["n"],refs:{c:{name:"contact",relationProperty:"card"},owner:{name:"person",relationProperty:"cards"}}},entity:{name:"entity",fields:["dsc"],isParentType:!0,discriminator:"childType",detectType:function(obj){return obj.childType}},superPapa:{name:"superPapa",refs:{entities:{list:!0,name:"entity"}}},person:{parent:"entity",name:"person",fields:["name"],refs:{contacts:{list:!0,name:"contact",fields:["email"],relationProperty:"owner"},cards:{list:!0,name:"card",fields:["id"],relationProperty:"owner"}}},contact:{name:"contact",fields:["email",tauHeader.ref("owner")],refs:{owner:{name:"person",relationProperty:"contacts"},card:{name:"card",relationProperty:"c"}}}}};self.repository=new repository(config)},teardown:function(){delete this.mockControl,delete this.repository,delete this.service}}),test("ask service for information when object is not found",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args}),this.repository.execute({type:"person",config:{id:5}}),ok(options.config.id===5,"options are initialized"),this.mockControl.verify()}),test("dont ask service for information when object is retrieved once",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args,args.callbacks.success({id:5,name:"Vasya Pupkin"})}),this.repository.execute({type:"person",config:{id:5,fields:["name"]}}),this.repository.execute({type:"person",config:{id:5,fields:["name"]}}),this.mockControl.verify()}),test("ask service again for information when do refresh and events about changes published",function(){var callsCount=0,countOfNotifies=0;this.repository.on({eventName:"afterSave",type:"person"},function(ev){countOfNotifies++}),this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){callsCount++,args.callbacks.success({id:5,name:"Vasya Pupkin",surname:"Petrovich"})}),this.service.expects().refresh(TypeOf.isA(Object)).andStub(function(args){callsCount++,args.callbacks.success({id:5,name:"Vasya Supkin"})}),this.repository.execute({type:"person",config:{id:5,fields:["name","surname"]}}),this.repository.execute({name:"refresh",type:"person",config:{id:5,$force:!0,fields:["name"]}}),equals(2,callsCount,"service is called twice"),equals(1,countOfNotifies,"callback exists"),ok(this.repository.db.getPersistedNode(5,"person").data.hasOwnProperty("surname"),"surname is not cleaned up"),this.mockControl.verify()}),test("default fields are included into command",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args}),this.repository.execute({type:"person",config:{id:5}}),this.mockControl.verify(),included(options,{config:{id:5,fields:["id","name"]}})}),test("simple duplicated fields are merged",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args}),this.repository.execute({type:"person",config:{id:5,fields:["id","name","name","name","id"]}}),this.mockControl.verify(),included(options,{config:{id:5,fields:["id","name"]}})}),test("complex duplicated fields are merged",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args}),this.repository.execute({type:"person",config:{id:5,fields:["id","name","name",{contacts:["id","email"]},"name","id",{contacts:["id","name"]}]}}),this.mockControl.verify(),included(options,{config:{id:5,fields:["id","name",{contacts:["id","email","name"],list:!0}]}})}),test("additional request when ask additional field",function(){var json={__type:"person",id:5,name:"Vasya Pupkin"};this.repository.registerData(json);var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args,args.callbacks.success({id:5,description:"Cool guy"})});var response={data:{}};this.repository.execute({type:"person",config:{id:5,fields:["description"]},callbacks:{success:function(r){response=r}}}),this.mockControl.verify(),included(options,{config:{id:5,fields:["id","description"]}}),deepEqual(response.data,{id:5,description:"Cool guy",__type:"person"})}),test("find operation",function(){var json={__type:"person",id:5,name:"Vasya Pupkin"};this.repository.registerData(json);var options={};this.service.expects().find(TypeOf.isA(Object)).andStub(function(args){options=args;var r=[{id:5,description:"Cool guy"}];r.getNextPage=function(){return""},args.callbacks.success(r)});var response={data:{}};this.repository.execute({name:"find",type:"person",config:{$limit:2,$skip:5,$query:{name:{$contains:"Vasya"}},fields:["description"]},callbacks:{success:function(r){response=r}}}),this.mockControl.verify(),included(options,{config:{$limit:2,$skip:5,$query:{name:{$contains:"Vasya"}},fields:["id","description"]}}),deepEqual(response.data,[{id:5,description:"Cool guy",__type:"person"}]),equals(response.data.isNextPageAvailable(),!0);var nextPageCommand=response.data.getNextPageCommand();ok(nextPageCommand!=null),equals(nextPageCommand.config.$skip,7),equals(nextPageCommand.config.$limit,2),ok(_.isUndefined(nextPageCommand.failed)),ok(_.isUndefined(nextPageCommand.executed))}),test("turboGet operation",function(){var json={__type:"person",id:5,name:"Vasya Pupkin"};this.repository.registerData(json);var options={};this.service.expects().turboGet(TypeOf.isA(Object)).andStub(function(args){options=args;var r=[{id:5,description:"Cool guy"}];r.getNextPage=function(){return""},args.callbacks.success(r)});var response={data:{}};this.repository.execute({name:"turboGet",type:"person",config:{$query:{name:{$contains:"Vasya"}},fields:["description"]},callbacks:{success:function(r){response=r}}}),this.mockControl.verify(),included(options,{config:{$query:{name:{$contains:"Vasya"}},fields:["id","description"]}}),deepEqual(response.data,[{id:5,description:"Cool guy"}])}),test("not appending discriminator if type registered",function(){var json={__type:"person",id:5,name:"Vasya Pupkin"};this.repository.registerData(json);var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args,args.callbacks.success({id:5,description:"Cool guy"})});var response={data:{}};this.repository.execute({type:"entity",config:{id:5,fields:["description"]},callbacks:{success:function(r){response=r}}}),this.mockControl.verify(),included(options,{config:{id:5,fields:["id","description"]}}),deepEqual(response.data,{id:5,description:"Cool guy",__type:"person"})}),test("appending discriminator",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args,args.callbacks.success({id:5,description:"Cool guy",childType:"person"})});var response={data:{}};this.repository.execute({type:"entity",config:{id:5,fields:["description"]},callbacks:{success:function(r){response=r}}}),this.mockControl.verify(),included(options,{config:{id:5,fields:["id","description","childType"]}}),included(response.data,{id:5,description:"Cool guy",__type:"person"})}),test("appending discriminator to inner entities",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args,args.callbacks.success({id:5,entities:[{id:1,childType:"person"}]})});var response={data:{}};this.repository.execute({type:"superPapa",config:{id:5,fields:[{entities:["id"]}]},callbacks:{success:function(r){response=r}}}),this.mockControl.verify(),included(options,{config:{id:5,fields:["id",{entities:["id","childType"],list:!0}]}})}),test("not double appending discriminator",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args,args.callbacks.success({id:5,description:"Cool guy",childType:"person"})});var response={data:{}};this.repository.execute({type:"entity",config:{id:5,fields:["description","childType"]},callbacks:{success:function(r){response=r}}}),this.mockControl.verify(),included(options,{config:{id:5,fields:["id","description","childType"]}}),included(response.data,{id:5,description:"Cool guy",__type:"person"})}),test("commands should be merged in one if asking same resource",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args,args.callbacks.success({id:5,name:"Vasya Pupkin",description:"Cool guy"})});var callbacks={cmd1:{},cmd2:{}};this.repository.execute([{type:"person",config:{id:5,fields:["description"]},callbacks:{success:function(r){callbacks.cmd1=r}}},{type:"person",config:{id:5,fields:["name"]},callbacks:{success:function(r){callbacks.cmd2=r}}}]),included(options,{config:{id:5,fields:["id","description","name"]}}),included(callbacks.cmd1.data,{id:5,name:"Vasya Pupkin",description:"Cool guy"}),included(callbacks.cmd2.data,{id:5,name:"Vasya Pupkin",description:"Cool guy"}),this.mockControl.verify()}),test("multiply commands of the same type should be supported",function(){var optionsCmd1={},optionsCmd2={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){optionsCmd1=args;var testData={id:1,description:"Cool guy"};args.callbacks.success(testData)}),this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){optionsCmd2=args;var testData={id:2,name:"Vasya Pupkin"};args.callbacks.success(testData)});var callbacks={cmd1:{},cmd2:{}},commands=[{type:"person",config:{id:1,fields:["description"]},callbacks:{success:function(r){callbacks.cmd1=r}}},{type:"person",config:{id:2,fields:["name"]},callbacks:{success:function(r){callbacks.cmd2=r}}}];this.repository.execute(commands),included(optionsCmd1,{config:{id:1,fields:["id","description"]}}),included(optionsCmd2,{config:{id:2,fields:["id","name"]}}),included(callbacks.cmd1.data,{id:1,description:"Cool guy"}),included(callbacks.cmd2.data,{id:2,name:"Vasya Pupkin"}),this.mockControl.verify()}),test("one to one relation works correctly",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args,args.callbacks.success({id:1,email:"pup@gmail.com",owner:{id:5,name:"Vasya Pupkin"}})}),this.repository.execute({type:"contact",config:{id:1,fields:[{owner:[]}]}}),included(options,{config:{id:1,fields:["id",{owner:["id","name"]}]}},"formed correctly"),this.mockControl.verify()}),test("merging of one to one relation in commands works correctly",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args,args.callbacks.success({id:1,email:"pup@gmail.com",owner:{id:5,name:"Vasya Pupkin",description:"Cool guy"}})}),this.repository.execute([{type:"contact",config:{id:1,fields:["id",{owner:["id","description"]}]}},{type:"contact",config:{id:1}}]),included(options,{config:{id:1,fields:["id",{owner:["id","description","name"]},"email"]}},"formed correctly"),this.mockControl.verify()}),test("merging of list relations in commands works correctly",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args,args.callbacks.success([])}),this.repository.execute([{type:"person",config:{id:1,fields:["name"]}},{type:"person",config:{id:1,fields:[{cards:["id","description"]},{contacts:["id","type"]}]}}]),included(options,{config:{id:1,fields:["id","name",{cards:["id","description"],list:!0},{contacts:["id","type"],list:!0}]}},"formed correctly"),this.mockControl.verify()}),test("one to one relation is cached correctly",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args,args.callbacks.success({id:1,email:"pup@gmail.com",owner:{id:5,name:"Vasya Pupkin"}})}),this.repository.execute({type:"contact",config:{id:1,fields:[{owner:[]}]}}),this.repository.execute({type:"person",config:{id:5,fields:["id","name"]}}),this.mockControl.verify()}),test("anonymous one-to-one fields",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args,args.callbacks.success({id:1,creator:{id:5,login:"papa"}})}),this.repository.execute({type:"contact",config:{id:1,fields:["id",{creator:["id","login"]}]}}),included(options,{config:{id:1,fields:["id",{creator:["id","login"]}]}},"formed correctly"),this.mockControl.verify()}),test("don't double requests to one-to-one fields",function(){this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:1,creator:{id:5,login:"papa"}})}),this.repository.execute({type:"contact",config:{id:1,fields:["id",{creator:["id","login"]}]}}),this.repository.execute({type:"contact",config:{id:1,fields:["id",{creator:["id"]}]}}),this.mockControl.verify()}),test("retrieve all contacts",function(){this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success([{id:1,creator:{id:5,login:"papa"}},{id:2,creator:{id:5,login:"papa"}}])});var result=null;this.repository.execute({type:"contact",config:{fields:["id",{creator:["id","login"]}]},callbacks:{success:function(r){result=r}}}),this.repository.execute({type:"contact",config:{fields:["id",{creator:["id","login"]}]},callbacks:{success:function(r){result=r}}}),this.mockControl.verify(),ok(result,"data is retrieved"),ok(result.data.length===2,"data is retrieved")}),test("retrieve all contacts and reinit store",function(){this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success([{id:1,creator:{id:5,login:"papa"}},{id:2,creator:{id:5,login:"papa"}}])}),this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success([{id:1,creator:{id:5,login:"papa"}},{id:2,creator:{id:5,login:"papa"}}])});var result=null;this.repository.execute({type:"contact",config:{fields:["id",{creator:["id","login"]}]},callbacks:{success:function(r){result=r}}}),this.repository.evictData(),this.repository.execute({type:"contact",config:{fields:["id",{creator:["id","login"]}]},callbacks:{success:function(r){result=r}}}),this.mockControl.verify()}),test("retrieve all contacts: cause request if flag mark all is absent",function(){this.repository.registerData([{id:1,__type:"contact",creator:{id:5,login:"papa"}},{id:2,__type:"contact",creator:{id:5,login:"papa"}}]),this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success([{id:1,creator:{id:5,login:"papa"}},{id:2,creator:{id:5,login:"papa"}}])});var result=null;this.repository.execute({type:"contact",config:{fields:["id",{creator:["id","login"]}]},callbacks:{success:function(r){result=r}}}),this.mockControl.verify(),ok(result,"data is retrieved"),ok(result.data.length===2,"data is retrieved")}),test("retrieve all contacts doesn't twice request data",function(){this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success([{id:1,creator:{id:5,login:"papa"}},{id:2,creator:{id:5,login:"papa"}}])});var result=null,getCommand=function(){return{type:"contact",config:{fields:["id",{creator:["id","login"]}]},callbacks:{success:function(r){result=r}}}};this.repository.execute(getCommand()),this.repository.execute(getCommand()),this.mockControl.verify(),ok(result,"data is retrieved"),equals(result.data.length,2,"count of contacts")}),test("retrieve all contacts and extending one of contacts causes data reget",function(){this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success([{id:1,email:"pautina",creator:{id:5,login:"papa"}},{id:2,creator:{id:5,login:"papa"}}])}),this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success([{id:1,email:"pautina",creator:{id:5,login:"papa"}},{id:2,email:"pauk",creator:{id:5,login:"papa"}}])});var result=null,getCommand=function(){return{type:"contact",config:{fields:["id",{creator:["id","login"]}]},callbacks:{success:function(r){result=r}}}};this.repository.execute(getCommand());var command=getCommand();command.config.fields.push("email"),this.repository.execute(command),this.mockControl.verify(),ok(result,"data is retrieved"),equals(result.data.length,2,"count of contacts")}),test("auto-appending list attribute using tau.list",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args}),this.repository.execute({type:"person",config:{id:1,fields:[tauHeader.list("contacts")]}}),this.mockControl.verify(),included(options,{config:{id:1,fields:["id",{contacts:["id","email"],list:!0}]}},"formed correctly")}),test("auto-appending list attribute using {} notation",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args}),this.repository.execute({type:"person",config:{id:1,fields:[{contacts:["email","address"]}]}}),this.mockControl.verify(),included(options,{config:{id:1,fields:["id",{contacts:["id","email","address"],list:!0}]}},"formed correctly")}),test("don't double requests to list properties",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args}),this.repository.execute({type:"person",config:{id:1,fields:[{contacts:["email","address"]}]}}),options.callbacks.success({id:1,contacts:[{id:2,email:"a",address:"b"},{id:3,email:"c",address:"d"}]}),this.repository.execute({type:"person",config:{id:1,fields:[{contacts:["email"]}]}}),this.mockControl.verify(),included(options,{config:{id:1,fields:["id",{contacts:["id","email","address"],list:!0}]}},"formed correctly")}),test("id is auto-appended to all fields configurations for tau.ref",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args}),this.repository.execute({type:"contact",config:{id:1,fields:["email",tauHeader.ref("owner",["login"])]}}),this.mockControl.verify(),included(options,{config:{id:1,fields:["id","email",{owner:["id","login"]}]}},"formed correctly")}),test("id is auto-appended to all fields configurations for complex field",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(args){options=args}),this.repository.execute({type:"contact",config:{id:1,fields:["email",{creator:["login",{"super-creator":["super-login"]}]}]}}),this.mockControl.verify(),included(options,{config:{id:1,fields:["id","email",{creator:["id","login",{"super-creator":["id","super-login"]}]}]}},"formed correctly")}),test("add operation",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},person={__type:"person",id:1,name:"Ay ya ya",contacts:[contact]};this.repository.registerData(person),this.service.expects().save(TypeOf.isA(Object)).andStub(function(command){command.callbacks.success({id:3})}),this.repository.execute({type:"contact",name:"save",config:{$set:{first:"Tutta",last:"Larsan",owner:{id:1}}}}),this.mockControl.verify();var persistedObject=this.repository.db.getPersistedNode(3,"contact").data,person=this.repository.db.getPersistedNode(1,"person").data;ok(persistedObject!=null,"object persisted after add"),equals(persistedObject.first,"Tutta","object properties extended correctly"),equals(person.contacts.length,2,"one-to-many ref extended with added entity"),equals(person.contacts[1].id,3,"one-to-many ref extended with added entity")}),test("update operation",function(){var obj={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(obj),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){}),this.repository.execute({type:"person",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.mockControl.verify();var contact=this.repository.execute({type:"contact",id:5,callbacks:{success:function(obj){equals(obj.last,"Supkin","name for entity in repository initialized")}}})}),test("beforeSave is fired when signed on type",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(contact);var args={},countOfNotifies=0,config={eventName:"beforeSave",type:"contact"};this.repository.on(config,function(ev){ev.data.cmd.config.fields.push("name"),ev.data.cmd.config.fields.push("name"),ev.data.cmd.config.fields.push("name"),ev.data.cmd.config.fields.push("name"),args.contact=ev,countOfNotifies++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:5})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.mockControl.verify(),ok(args.contact,"beforeSave is fired"),equals(countOfNotifies,1,"count of notification events"),ok(args.contact.data.obj,"args is correct"),deepEqual(args.contact.data.obj,{id:5,type:"contact"},"args is correct"),deepEqual(args.contact.data.changes,{last:"Supkin"},"args is correct"),ok(args.contact.data.id,"args is correct"),ok(args.contact.data.type,"args is correct"),ok(args.contact.data.cmd,"args is correct"),equals(args.contact.data.cmd.config.fields.length,2,"fields count is correct"),ok(args.contact.data.changes.last==="Supkin","args is correct")}),test("beforeSave is fired for new object",function(){var contact={id:5,__type:"contact",first:"Vasya",last:"Pupkin"};this.repository.registerData(contact);var args={},countOfNotifies=0,config={eventName:"beforeSave",type:"contact"};this.repository.on(config,function(ev){args.contact=ev,countOfNotifies++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{$set:{last:"Supkin"}}}),this.mockControl.verify(),ok(args.contact,"beforeSave is fired"),equals(countOfNotifies,1,"count of notification events"),ok(args.contact.data.obj,"args is correct"),ok(args.contact.data.type,"args is correct"),deepEqual(args.contact.data.changes,{last:"Supkin"},"args is correct"),ok(args.contact.data.cmd,"args is correct")}),test("afterSave filter for new object",function(){var args={},countOfNotifies=0,config={eventName:"beforeSave",type:"contact",filter:{last:"Supkin"}};this.repository.on(config,function(ev){args.contact=ev,countOfNotifies++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{$set:{last:"Supkin"}}}),this.mockControl.verify(),ok(args.contact,"beforeSave is fired"),equals(countOfNotifies,1,"count of notification events"),ok(args.contact.data.obj,"args is correct"),ok(args.contact.data.type,"args is correct"),deepEqual(args.contact.data.changes,{last:"Supkin"},"args is correct"),ok(args.contact.data.cmd,"args is correct")}),test("beforeSave is not fired",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(contact);var countOfNotifies=0,config={eventName:"beforeSave",type:"person"};this.repository.on(config,function(ev){countOfNotifies++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:5})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.mockControl.verify(),equals(countOfNotifies,0,"count of notification events")}),test("failure is fired when signed",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(contact);var args={},countOfNotifies=0,config={eventName:"failure"};this.repository.on(config,function(ev){args.contact=ev,countOfNotifies++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.failure({id:5})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.mockControl.verify(),ok(args.contact,"failure is fired"),equals(countOfNotifies,1,"count of notification events")}),test("beforeSave filter by id",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(contact),this.repository.registerData({__type:"contact",id:6});var args={},countOfNotifies=0,config={eventName:"beforeSave",type:"contact",filter:{id:5}};this.repository.on(config,function(ev){args.contact=ev,countOfNotifies++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{last:"Dopkin"}}}),this.mockControl.verify(),ok(args.contact,"event is fired"),equals(countOfNotifies,1,"count of notification events")}),test("beforeSave filter by changes",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(contact),this.repository.registerData({__type:"contact",id:6,last:"Pupkin"});var args={},countOfNotifies=0,config={eventName:"beforeSave",type:"contact",filter:{last:"Pupkin"},hasChanges:["first"]};this.repository.on(config,function(ev){args.contact=ev,countOfNotifies++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{first:"VasIsDas"}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{email:"Dopkin@d.com"}}}),this.mockControl.verify(),ok(args.contact,"event is fired"),equals(countOfNotifies,1,"count of notification events")}),test("afterSave filter by changes",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(contact),this.repository.registerData({__type:"contact",id:6,last:"Pupkin"});var args={},countOfNotifies=0,config={eventName:"beforeSave",type:"contact",filter:{last:"Pupkin"},hasChanges:["owner"]};this.repository.on(config,function(ev){args.contact=ev,countOfNotifies++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{owner:{id:45}}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{email:"Dopkin@d.com"}}}),this.mockControl.verify(),ok(args.contact,"event is fired"),equals(countOfNotifies,1,"count of notification events")}),test("'hasChanges' filter should support array syntax for logical conditions",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(contact);var contact2={__type:"contact",id:6,first:"Petr",last:"Prokofiev"};this.repository.registerData(contact2);var args={},countOfNotifies=0,config={eventName:"beforeSave",type:"contact",hasChanges:["last","owner|email"]};this.repository.on(config,function(ev){args.contact=ev,countOfNotifies++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:6})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Pupkinman",owner:{id:45}}}}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Spiderman"}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{last:"Petrov",owner:{id:45},email:"xyz@zyx.com"}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{email:"petrov2012@zyx.com"}}}),this.mockControl.verify(),ok(args.contact,"event is fired"),equals(countOfNotifies,2,"count of notification events")}),test("beforeRemove filter by property",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(contact),this.repository.registerData({__type:"contact",id:6});var args={},countOfNotifies=0,config={eventName:"beforeRemove",type:"contact",filter:{last:"Pupkin"}};this.repository.on(config,function(ev){args.contact=ev,countOfNotifies++}),this.service.expects().remove(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({})}),this.service.expects().remove(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({})}),this.repository.execute({type:"contact",name:"remove",config:{id:5}}),this.repository.execute({type:"contact",name:"remove",config:{id:6}}),this.mockControl.verify(),ok(args.contact,"event is fired"),equals(countOfNotifies,1,"count of notification events")}),test("afterRemove filter by property",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin",owner:{id:1}};this.repository.registerData(contact),this.repository.registerData({__type:"contact",id:6});var args={},countOfNotifies=0,config={eventName:"afterRemove",type:"contact",filter:{owner:{id:1}}};this.repository.on(config,function(ev){args.contact=ev,countOfNotifies++}),this.service.expects().remove(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({})}),this.service.expects().remove(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({})}),this.repository.execute({type:"contact",name:"remove",config:{id:5}}),this.repository.execute({type:"contact",name:"remove",config:{id:6}}),this.mockControl.verify(),ok(args.contact,"event is fired"),equals(countOfNotifies,1,"count of notification events")}),test("beforeSave filter by property",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(contact),this.repository.registerData({__type:"contact",id:6});var args={},countOfNotifies=0,config={eventName:"beforeSave",type:"contact",filter:{last:"Pupkin"}};this.repository.on(config,function(ev){args.contact=ev,countOfNotifies++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{last:"Dopkin"}}}),this.mockControl.verify(),ok(args.contact,"event is fired"),equals(countOfNotifies,1,"count of notification events")}),test("afterSave filter by ref one-to-one",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin",owner:{id:1}};this.repository.registerData(contact),this.repository.registerData({__type:"contact",id:6});var args={},countOfNotifies=0,config={eventName:"afterSave",type:"contact",filter:{owner:{id:1}}};this.repository.on(config,function(ev){args.contact=ev,countOfNotifies++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{last:"Dopkin"}}}),this.mockControl.verify(),ok(args.contact,"event is fired"),equals(countOfNotifies,1,"count of notification events")}),test("beforeSave filter by ref one-to-one",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin",owner:{id:1}};this.repository.registerData(contact),this.repository.registerData({__type:"contact",id:6});var args={},countOfNotifies=0,config={eventName:"beforeSave",type:"contact",filter:{owner:{id:1}}};this.repository.on(config,function(ev){args.contact=ev,countOfNotifies++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{last:"Dopkin"}}}),this.mockControl.verify(),ok(args.contact,"event is fired"),equals(countOfNotifies,1,"count of notification events")}),test("afterSave is fired when signed on type",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(contact);var args={},countOfNotifies=0,config={eventName:"afterSave",type:"contact"};this.repository.on(config,function(ev){args.contact=ev,countOfNotifies++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(args){args.callbacks.success({id:5})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.mockControl.verify(),ok(args.contact,"afterSave is fired"),equals(countOfNotifies,1,"count of notification events"),ok(args.contact.data.cmd,"args is correct"),deepEqual(args.contact.data.changes,{last:"Supkin"},"args is correct")}),test("remove listeners",function(){var listener={},config={eventName:"beforeRemove",type:"contact",listener:listener};this.repository.on(config,function(ev){});var configAlt={eventName:"beforeSave",type:"contact",listener:listener};this.repository.on(configAlt,function(ev){});var configIn={eventName:"afterSave",type:"contact",listener:{}};this.repository.on(configIn,function(ev){}),this.repository.unbind(listener),ok(this.repository._getListeners(config).length===0,"no such listeners found"),ok(this.repository._getListeners(configAlt).length===0,"no such listeners found"),ok(this.repository._getListeners(configIn).length===1,"don't remove listener")}),test("double sign on the same listener is ok",function(){var listener={};this.repository.on({eventName:"beforeRemove",type:"contact",listener:listener},function(ev){}),this.repository.on({eventName:"beforeRemove",type:"contact",listener:listener},function(ev){}),ok(this.repository._getListeners({eventName:"beforeRemove",type:"contact"}).length===2,"ok")}),test("beforeRemove/afterRemove is fired",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},person={__type:"person",id:1,name:"Ay ya ya",contacts:[contact]},card={__type:"card",id:3,n:"Super",c:contact},args={},countOfNotifies=0;this.repository.on({eventName:"beforeRemove",type:"contact"},function(ev){args.contactBR=ev,countOfNotifies++}),this.repository.on({eventName:"afterRemove",type:"contact"},function(ev){args.contactAR=ev,countOfNotifies++}),this.repository.on({eventName:"afterRemove",type:"person"},function(ev){args.personAfterRemove=ev}),this.repository.on({eventName:"afterSave",type:"person"},function(ev){args.personAfterSave=ev}),this.repository.registerData(person),this.repository.registerData(card),this.service.expects().remove(TypeOf.isA(Object)).andStub(function(command){command.callbacks.success()}),this.repository.execute({type:"contact",name:"remove",config:{id:5}}),this.mockControl.verify(),ok(args.contactBR,"beforeDelete is fired"),ok(args.contactAR,"afterDelete is fired"),equals(countOfNotifies,2,"count of notification events"),ok(args.contactBR.data.obj,"args is correct"),ok(args.personAfterSave,"after save for papa fired"),ok(args.personAfterSave.data.changes.contacts,"after save for childs"),ok(!args.personAfterRemove,"after remove for papa is not fired"),ok(args.contactBR.data.cmd,"args is correct"),ok(args.contactAR.data.cmd,"args is correct")}),test("!delete operation",function(){var contact={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},person={__type:"person",id:1,name:"Ay ya ya",contacts:[contact]},card={__type:"card",id:3,n:"Super",c:contact};this.repository.registerData(person),this.repository.registerData(card),this.service.expects().remove(TypeOf.isA(Object)).andStub(function(command){command.callbacks.success()}),this.repository.execute({type:"contact",name:"remove",config:{id:5}}),this.mockControl.verify();var persistedObject=this.repository.db.getPersistedNode(5,"contact");equals(persistedObject,null,"object is deleted from storage")}),test("one-to-one or lost is empty means that ref is absent and this is not caused data request",function(){var options={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(command){options=command}),this.repository.execute({type:"person",config:{id:1,fields:[{somebody:["id","phone"]},{contacts:["email","address"]}]}}),options.callbacks.success({id:1,contacts:[],somebody:null}),this.repository.execute({type:"person",config:{id:1,fields:[{somebody:["desc"]},{contacts:["email"]}]}}),this.mockControl.verify(),included(options,{config:{id:1,fields:["id",{somebody:["id","phone"]},{contacts:["id","email","address"],list:!0}]}},"formed correctly")})};return{run:innerRun}})