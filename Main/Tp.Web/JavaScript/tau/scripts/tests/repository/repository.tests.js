define(["Underscore","tau/store/repository","tau/store/services/service.rest","tau/store/header"],function(_,a,b,c){var d=function(){module("[repository]",{setup:function(){var d=this;d.mockControl=new MockControl,d.service=d.mockControl.createMock(b);var e={service:d.service,types:{card:{name:"card",fields:["n"],refs:{c:{name:"contact",relationProperty:"card"},owner:{name:"person",relationProperty:"cards"}}},entity:{name:"entity",fields:["dsc"],isParentType:!0,discriminator:"childType",detectType:function(a){return a.childType}},superPapa:{name:"superPapa",refs:{entities:{list:!0,name:"entity"}}},person:{parent:"entity",name:"person",fields:["name"],refs:{contacts:{list:!0,name:"contact",fields:["email"],relationProperty:"owner"},cards:{list:!0,name:"card",fields:["id"],relationProperty:"owner"}}},contact:{name:"contact",fields:["email",c.ref("owner")],refs:{owner:{name:"person",relationProperty:"contacts"},card:{name:"card",relationProperty:"c"}}}}};d.repository=new a(e)},teardown:function(){delete this.mockControl,delete this.repository,delete this.service}}),test("ask service for information when object is not found",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b}),this.repository.execute({type:"person",config:{id:5}}),ok(a.config.id===5,"options are initialized"),this.mockControl.verify()}),test("dont ask service for information when object is retrieved once",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b,b.callbacks.success({id:5,name:"Vasya Pupkin"})}),this.repository.execute({type:"person",config:{id:5,fields:["name"]}}),this.repository.execute({type:"person",config:{id:5,fields:["name"]}}),this.mockControl.verify()}),test("ask service again for information when do refresh and events about changes published",function(){var a=0,b=0;this.repository.on({eventName:"afterSave",type:"person"},function(a){b++}),this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a++,b.callbacks.success({id:5,name:"Vasya Pupkin",surname:"Petrovich"})}),this.service.expects().refresh(TypeOf.isA(Object)).andStub(function(b){a++,b.callbacks.success({id:5,name:"Vasya Supkin"})}),this.repository.execute({type:"person",config:{id:5,fields:["name","surname"]}}),this.repository.execute({name:"refresh",type:"person",config:{id:5,$force:!0,fields:["name"]}}),equals(2,a,"service is called twice"),equals(1,b,"callback exists"),ok(this.repository.db.getPersistedNode(5,"person").data.hasOwnProperty("surname"),"surname is not cleaned up"),this.mockControl.verify()}),test("default fields are included into command",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b}),this.repository.execute({type:"person",config:{id:5}}),this.mockControl.verify(),included(a,{config:{id:5,fields:["id","name"]}})}),test("simple duplicated fields are merged",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b}),this.repository.execute({type:"person",config:{id:5,fields:["id","name","name","name","id"]}}),this.mockControl.verify(),included(a,{config:{id:5,fields:["id","name"]}})}),test("complex duplicated fields are merged",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b}),this.repository.execute({type:"person",config:{id:5,fields:["id","name","name",{contacts:["id","email"]},"name","id",{contacts:["id","name"]}]}}),this.mockControl.verify(),included(a,{config:{id:5,fields:["id","name",{contacts:["id","email","name"],list:!0}]}})}),test("additional request when ask additional field",function(){var a={__type:"person",id:5,name:"Vasya Pupkin"};this.repository.registerData(a);var b={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(a){b=a,a.callbacks.success({id:5,description:"Cool guy"})});var c={data:{}};this.repository.execute({type:"person",config:{id:5,fields:["description"]},callbacks:{success:function(a){c=a}}}),this.mockControl.verify(),included(b,{config:{id:5,fields:["id","description"]}}),deepEqual(c.data,{id:5,description:"Cool guy",__type:"person"})}),test("find operation",function(){var a={__type:"person",id:5,name:"Vasya Pupkin"};this.repository.registerData(a);var b={};this.service.expects().find(TypeOf.isA(Object)).andStub(function(a){b=a;var c=[{id:5,description:"Cool guy"}];c.getNextPage=function(){return""},a.callbacks.success(c)});var c={data:{}};this.repository.execute({name:"find",type:"person",config:{$limit:2,$skip:5,$query:{name:{$contains:"Vasya"}},fields:["description"]},callbacks:{success:function(a){c=a}}}),this.mockControl.verify(),included(b,{config:{$limit:2,$skip:5,$query:{name:{$contains:"Vasya"}},fields:["id","description"]}}),deepEqual(c.data,[{id:5,description:"Cool guy",__type:"person"}]),equals(c.data.isNextPageAvailable(),!0);var d=c.data.getNextPageCommand();ok(d!=null),equals(d.config.$skip,7),equals(d.config.$limit,2),ok(_.isUndefined(d.failed)),ok(_.isUndefined(d.executed))}),test("not appending discriminator if type registered",function(){var a={__type:"person",id:5,name:"Vasya Pupkin"};this.repository.registerData(a);var b={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(a){b=a,a.callbacks.success({id:5,description:"Cool guy"})});var c={data:{}};this.repository.execute({type:"entity",config:{id:5,fields:["description"]},callbacks:{success:function(a){c=a}}}),this.mockControl.verify(),included(b,{config:{id:5,fields:["id","description"]}}),deepEqual(c.data,{id:5,description:"Cool guy",__type:"person"})}),test("appending discriminator",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b,b.callbacks.success({id:5,description:"Cool guy",childType:"person"})});var b={data:{}};this.repository.execute({type:"entity",config:{id:5,fields:["description"]},callbacks:{success:function(a){b=a}}}),this.mockControl.verify(),included(a,{config:{id:5,fields:["id","description","childType"]}}),included(b.data,{id:5,description:"Cool guy",__type:"person"})}),test("appending discriminator to inner entities",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b,b.callbacks.success({id:5,entities:[{id:1,childType:"person"}]})});var b={data:{}};this.repository.execute({type:"superPapa",config:{id:5,fields:[{entities:["id"]}]},callbacks:{success:function(a){b=a}}}),this.mockControl.verify(),included(a,{config:{id:5,fields:["id",{entities:["id","childType"],list:!0}]}})}),test("not double appending discriminator",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b,b.callbacks.success({id:5,description:"Cool guy",childType:"person"})});var b={data:{}};this.repository.execute({type:"entity",config:{id:5,fields:["description","childType"]},callbacks:{success:function(a){b=a}}}),this.mockControl.verify(),included(a,{config:{id:5,fields:["id","description","childType"]}}),included(b.data,{id:5,description:"Cool guy",__type:"person"})}),test("commands should be merged in one if asking same resource",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b,b.callbacks.success({id:5,name:"Vasya Pupkin",description:"Cool guy"})});var b={cmd1:{},cmd2:{}};this.repository.execute([{type:"person",config:{id:5,fields:["description"]},callbacks:{success:function(a){b.cmd1=a}}},{type:"person",config:{id:5,fields:["name"]},callbacks:{success:function(a){b.cmd2=a}}}]),included(a,{config:{id:5,fields:["id","description","name"]}}),included(b.cmd1.data,{id:5,name:"Vasya Pupkin",description:"Cool guy"}),included(b.cmd2.data,{id:5,name:"Vasya Pupkin",description:"Cool guy"}),this.mockControl.verify()}),test("multiply commands of the same type should be supported",function(){var a={},b={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b;var c={id:1,description:"Cool guy"};b.callbacks.success(c)}),this.service.expects().get(TypeOf.isA(Object)).andStub(function(a){b=a;var c={id:2,name:"Vasya Pupkin"};a.callbacks.success(c)});var c={cmd1:{},cmd2:{}},d=[{type:"person",config:{id:1,fields:["description"]},callbacks:{success:function(a){c.cmd1=a}}},{type:"person",config:{id:2,fields:["name"]},callbacks:{success:function(a){c.cmd2=a}}}];this.repository.execute(d),included(a,{config:{id:1,fields:["id","description"]}}),included(b,{config:{id:2,fields:["id","name"]}}),included(c.cmd1.data,{id:1,description:"Cool guy"}),included(c.cmd2.data,{id:2,name:"Vasya Pupkin"}),this.mockControl.verify()}),test("one to one relation works correctly",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b,b.callbacks.success({id:1,email:"pup@gmail.com",owner:{id:5,name:"Vasya Pupkin"}})}),this.repository.execute({type:"contact",config:{id:1,fields:[{owner:[]}]}}),included(a,{config:{id:1,fields:["id",{owner:["id","name"]}]}},"formed correctly"),this.mockControl.verify()}),test("merging of one to one relation in commands works correctly",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b,b.callbacks.success({id:1,email:"pup@gmail.com",owner:{id:5,name:"Vasya Pupkin",description:"Cool guy"}})}),this.repository.execute([{type:"contact",config:{id:1,fields:["id",{owner:["id","description"]}]}},{type:"contact",config:{id:1}}]),included(a,{config:{id:1,fields:["id",{owner:["id","description","name"]},"email"]}},"formed correctly"),this.mockControl.verify()}),test("merging of list relations in commands works correctly",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b,b.callbacks.success([])}),this.repository.execute([{type:"person",config:{id:1,fields:["name"]}},{type:"person",config:{id:1,fields:[{cards:["id","description"]},{contacts:["id","type"]}]}}]),included(a,{config:{id:1,fields:["id","name",{cards:["id","description"],list:!0},{contacts:["id","type"],list:!0}]}},"formed correctly"),this.mockControl.verify()}),test("one to one relation is cached correctly",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b,b.callbacks.success({id:1,email:"pup@gmail.com",owner:{id:5,name:"Vasya Pupkin"}})}),this.repository.execute({type:"contact",config:{id:1,fields:[{owner:[]}]}}),this.repository.execute({type:"person",config:{id:5,fields:["id","name"]}}),this.mockControl.verify()}),test("anonymous one-to-one fields",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b,b.callbacks.success({id:1,creator:{id:5,login:"papa"}})}),this.repository.execute({type:"contact",config:{id:1,fields:["id",{creator:["id","login"]}]}}),included(a,{config:{id:1,fields:["id",{creator:["id","login"]}]}},"formed correctly"),this.mockControl.verify()}),test("don't double requests to one-to-one fields",function(){this.service.expects().get(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:1,creator:{id:5,login:"papa"}})}),this.repository.execute({type:"contact",config:{id:1,fields:["id",{creator:["id","login"]}]}}),this.repository.execute({type:"contact",config:{id:1,fields:["id",{creator:["id"]}]}}),this.mockControl.verify()}),test("retrieve all contacts",function(){this.service.expects().get(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success([{id:1,creator:{id:5,login:"papa"}},{id:2,creator:{id:5,login:"papa"}}])});var a=null;this.repository.execute({type:"contact",config:{fields:["id",{creator:["id","login"]}]},callbacks:{success:function(b){a=b}}}),this.repository.execute({type:"contact",config:{fields:["id",{creator:["id","login"]}]},callbacks:{success:function(b){a=b}}}),this.mockControl.verify(),ok(a,"data is retrieved"),ok(a.data.length===2,"data is retrieved")}),test("retrieve all contacts and reinit store",function(){this.service.expects().get(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success([{id:1,creator:{id:5,login:"papa"}},{id:2,creator:{id:5,login:"papa"}}])}),this.service.expects().get(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success([{id:1,creator:{id:5,login:"papa"}},{id:2,creator:{id:5,login:"papa"}}])});var a=null;this.repository.execute({type:"contact",config:{fields:["id",{creator:["id","login"]}]},callbacks:{success:function(b){a=b}}}),this.repository.evictData(),this.repository.execute({type:"contact",config:{fields:["id",{creator:["id","login"]}]},callbacks:{success:function(b){a=b}}}),this.mockControl.verify()}),test("retrieve all contacts: cause request if flag mark all is absent",function(){this.repository.registerData([{id:1,__type:"contact",creator:{id:5,login:"papa"}},{id:2,__type:"contact",creator:{id:5,login:"papa"}}]),this.service.expects().get(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success([{id:1,creator:{id:5,login:"papa"}},{id:2,creator:{id:5,login:"papa"}}])});var a=null;this.repository.execute({type:"contact",config:{fields:["id",{creator:["id","login"]}]},callbacks:{success:function(b){a=b}}}),this.mockControl.verify(),ok(a,"data is retrieved"),ok(a.data.length===2,"data is retrieved")}),test("retrieve all contacts doesn't twice request data",function(){this.service.expects().get(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success([{id:1,creator:{id:5,login:"papa"}},{id:2,creator:{id:5,login:"papa"}}])});var a=null,b=function(){return{type:"contact",config:{fields:["id",{creator:["id","login"]}]},callbacks:{success:function(b){a=b}}}};this.repository.execute(b()),this.repository.execute(b()),this.mockControl.verify(),ok(a,"data is retrieved"),equals(a.data.length,2,"count of contacts")}),test("retrieve all contacts and extending one of contacts causes data reget",function(){this.service.expects().get(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success([{id:1,email:"pautina",creator:{id:5,login:"papa"}},{id:2,creator:{id:5,login:"papa"}}])}),this.service.expects().get(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success([{id:1,email:"pautina",creator:{id:5,login:"papa"}},{id:2,email:"pauk",creator:{id:5,login:"papa"}}])});var a=null,b=function(){return{type:"contact",config:{fields:["id",{creator:["id","login"]}]},callbacks:{success:function(b){a=b}}}};this.repository.execute(b());var c=b();c.config.fields.push("email"),this.repository.execute(c),this.mockControl.verify(),ok(a,"data is retrieved"),equals(a.data.length,2,"count of contacts")}),test("auto-appending list attribute using tau.list",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b}),this.repository.execute({type:"person",config:{id:1,fields:[c.list("contacts")]}}),this.mockControl.verify(),included(a,{config:{id:1,fields:["id",{contacts:["id","email"],list:!0}]}},"formed correctly")}),test("auto-appending list attribute using {} notation",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b}),this.repository.execute({type:"person",config:{id:1,fields:[{contacts:["email","address"]}]}}),this.mockControl.verify(),included(a,{config:{id:1,fields:["id",{contacts:["id","email","address"],list:!0}]}},"formed correctly")}),test("don't double requests to list properties",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b}),this.repository.execute({type:"person",config:{id:1,fields:[{contacts:["email","address"]}]}}),a.callbacks.success({id:1,contacts:[{id:2,email:"a",address:"b"},{id:3,email:"c",address:"d"}]}),this.repository.execute({type:"person",config:{id:1,fields:[{contacts:["email"]}]}}),this.mockControl.verify(),included(a,{config:{id:1,fields:["id",{contacts:["id","email","address"],list:!0}]}},"formed correctly")}),test("id is auto-appended to all fields configurations for tau.ref",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b}),this.repository.execute({type:"contact",config:{id:1,fields:["email",c.ref("owner",["login"])]}}),this.mockControl.verify(),included(a,{config:{id:1,fields:["id","email",{owner:["id","login"]}]}},"formed correctly")}),test("id is auto-appended to all fields configurations for complex field",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b}),this.repository.execute({type:"contact",config:{id:1,fields:["email",{creator:["login",{"super-creator":["super-login"]}]}]}}),this.mockControl.verify(),included(a,{config:{id:1,fields:["id","email",{creator:["id","login",{"super-creator":["id","super-login"]}]}]}},"formed correctly")}),test("add operation",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},b={__type:"person",id:1,name:"Ay ya ya",contacts:[a]};this.repository.registerData(b),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:3})}),this.repository.execute({type:"contact",name:"save",config:{$set:{first:"Tutta",last:"Larsan",owner:{id:1}}}}),this.mockControl.verify();var c=this.repository.db.getPersistedNode(3,"contact").data,b=this.repository.db.getPersistedNode(1,"person").data;ok(c!=null,"object persisted after add"),equals(c.first,"Tutta","object properties extended correctly"),equals(b.contacts.length,2,"one-to-many ref extended with added entity"),equals(b.contacts[1].id,3,"one-to-many ref extended with added entity")}),test("update operation",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(a),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){}),this.repository.execute({type:"person",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.mockControl.verify();var b=this.repository.execute({type:"contact",id:5,callbacks:{success:function(a){equals(a.last,"Supkin","name for entity in repository initialized")}}})}),test("beforeSave is fired when signed on type",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(a);var b={},c=0,d={eventName:"beforeSave",type:"contact"};this.repository.on(d,function(a){a.data.cmd.config.fields.push("name"),a.data.cmd.config.fields.push("name"),a.data.cmd.config.fields.push("name"),a.data.cmd.config.fields.push("name"),b.contact=a,c++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:5})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.mockControl.verify(),ok(b.contact,"beforeSave is fired"),equals(c,1,"count of notification events"),ok(b.contact.data.obj,"args is correct"),deepEqual(b.contact.data.obj,{id:5,type:"contact"},"args is correct"),deepEqual(b.contact.data.changes,{last:"Supkin"},"args is correct"),ok(b.contact.data.id,"args is correct"),ok(b.contact.data.type,"args is correct"),ok(b.contact.data.cmd,"args is correct"),equals(b.contact.data.cmd.config.fields.length,2,"fields count is correct"),ok(b.contact.data.changes.last==="Supkin","args is correct")}),test("beforeSave is fired for new object",function(){var a={id:5,__type:"contact",first:"Vasya",last:"Pupkin"};this.repository.registerData(a);var b={},c=0,d={eventName:"beforeSave",type:"contact"};this.repository.on(d,function(a){b.contact=a,c++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{$set:{last:"Supkin"}}}),this.mockControl.verify(),ok(b.contact,"beforeSave is fired"),equals(c,1,"count of notification events"),ok(b.contact.data.obj,"args is correct"),ok(b.contact.data.type,"args is correct"),deepEqual(b.contact.data.changes,{last:"Supkin"},"args is correct"),ok(b.contact.data.cmd,"args is correct")}),test("afterSave filter for new object",function(){var a={},b=0,c={eventName:"beforeSave",type:"contact",filter:{last:"Supkin"}};this.repository.on(c,function(c){a.contact=c,b++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{$set:{last:"Supkin"}}}),this.mockControl.verify(),ok(a.contact,"beforeSave is fired"),equals(b,1,"count of notification events"),ok(a.contact.data.obj,"args is correct"),ok(a.contact.data.type,"args is correct"),deepEqual(a.contact.data.changes,{last:"Supkin"},"args is correct"),ok(a.contact.data.cmd,"args is correct")}),test("beforeSave is not fired",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(a);var b=0,c={eventName:"beforeSave",type:"person"};this.repository.on(c,function(a){b++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:5})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.mockControl.verify(),equals(b,0,"count of notification events")}),test("failure is fired when signed",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(a);var b={},c=0,d={eventName:"failure"};this.repository.on(d,function(a){b.contact=a,c++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.failure({id:5})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.mockControl.verify(),ok(b.contact,"failure is fired"),equals(c,1,"count of notification events")}),test("beforeSave filter by id",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(a),this.repository.registerData({__type:"contact",id:6});var b={},c=0,d={eventName:"beforeSave",type:"contact",filter:{id:5}};this.repository.on(d,function(a){b.contact=a,c++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{last:"Dopkin"}}}),this.mockControl.verify(),ok(b.contact,"event is fired"),equals(c,1,"count of notification events")}),test("beforeSave filter by changes",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(a),this.repository.registerData({__type:"contact",id:6,last:"Pupkin"});var b={},c=0,d={eventName:"beforeSave",type:"contact",filter:{last:"Pupkin"},hasChanges:["first"]};this.repository.on(d,function(a){b.contact=a,c++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{first:"VasIsDas"}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{email:"Dopkin@d.com"}}}),this.mockControl.verify(),ok(b.contact,"event is fired"),equals(c,1,"count of notification events")}),test("afterSave filter by changes",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(a),this.repository.registerData({__type:"contact",id:6,last:"Pupkin"});var b={},c=0,d={eventName:"beforeSave",type:"contact",filter:{last:"Pupkin"},hasChanges:["owner"]};this.repository.on(d,function(a){b.contact=a,c++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{owner:{id:45}}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{email:"Dopkin@d.com"}}}),this.mockControl.verify(),ok(b.contact,"event is fired"),equals(c,1,"count of notification events")}),test("'hasChanges' filter should support array syntax for logical conditions",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(a);var b={__type:"contact",id:6,first:"Petr",last:"Prokofiev"};this.repository.registerData(b);var c={},d=0,e={eventName:"beforeSave",type:"contact",hasChanges:["last","owner|email"]};this.repository.on(e,function(a){c.contact=a,d++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:6})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Pupkinman",owner:{id:45}}}}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Spiderman"}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{last:"Petrov",owner:{id:45},email:"xyz@zyx.com"}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{email:"petrov2012@zyx.com"}}}),this.mockControl.verify(),ok(c.contact,"event is fired"),equals(d,2,"count of notification events")}),test("beforeRemove filter by property",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(a),this.repository.registerData({__type:"contact",id:6});var b={},c=0,d={eventName:"beforeRemove",type:"contact",filter:{last:"Pupkin"}};this.repository.on(d,function(a){b.contact=a,c++}),this.service.expects().remove(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({})}),this.service.expects().remove(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({})}),this.repository.execute({type:"contact",name:"remove",config:{id:5}}),this.repository.execute({type:"contact",name:"remove",config:{id:6}}),this.mockControl.verify(),ok(b.contact,"event is fired"),equals(c,1,"count of notification events")}),test("afterRemove filter by property",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin",owner:{id:1}};this.repository.registerData(a),this.repository.registerData({__type:"contact",id:6});var b={},c=0,d={eventName:"afterRemove",type:"contact",filter:{owner:{id:1}}};this.repository.on(d,function(a){b.contact=a,c++}),this.service.expects().remove(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({})}),this.service.expects().remove(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({})}),this.repository.execute({type:"contact",name:"remove",config:{id:5}}),this.repository.execute({type:"contact",name:"remove",config:{id:6}}),this.mockControl.verify(),ok(b.contact,"event is fired"),equals(c,1,"count of notification events")}),test("beforeSave filter by property",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(a),this.repository.registerData({__type:"contact",id:6});var b={},c=0,d={eventName:"beforeSave",type:"contact",filter:{last:"Pupkin"}};this.repository.on(d,function(a){b.contact=a,c++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{last:"Dopkin"}}}),this.mockControl.verify(),ok(b.contact,"event is fired"),equals(c,1,"count of notification events")}),test("afterSave filter by ref one-to-one",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin",owner:{id:1}};this.repository.registerData(a),this.repository.registerData({__type:"contact",id:6});var b={},c=0,d={eventName:"afterSave",type:"contact",filter:{owner:{id:1}}};this.repository.on(d,function(a){b.contact=a,c++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{last:"Dopkin"}}}),this.mockControl.verify(),ok(b.contact,"event is fired"),equals(c,1,"count of notification events")}),test("beforeSave filter by ref one-to-one",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin",owner:{id:1}};this.repository.registerData(a),this.repository.registerData({__type:"contact",id:6});var b={},c=0,d={eventName:"beforeSave",type:"contact",filter:{owner:{id:1}}};this.repository.on(d,function(a){b.contact=a,c++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:5})}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:6})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.repository.execute({type:"contact",name:"save",config:{id:6,$set:{last:"Dopkin"}}}),this.mockControl.verify(),ok(b.contact,"event is fired"),equals(c,1,"count of notification events")}),test("afterSave is fired when signed on type",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"};this.repository.registerData(a);var b={},c=0,d={eventName:"afterSave",type:"contact"};this.repository.on(d,function(a){b.contact=a,c++}),this.service.expects().save(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success({id:5})}),this.repository.execute({type:"contact",name:"save",config:{id:5,$set:{last:"Supkin"}}}),this.mockControl.verify(),ok(b.contact,"afterSave is fired"),equals(c,1,"count of notification events"),ok(b.contact.data.cmd,"args is correct"),deepEqual(b.contact.data.changes,{last:"Supkin"},"args is correct")}),test("remove listeners",function(){var a={},b={eventName:"beforeRemove",type:"contact",listener:a};this.repository.on(b,function(a){});var c={eventName:"beforeSave",type:"contact",listener:a};this.repository.on(c,function(a){});var d={eventName:"afterSave",type:"contact",listener:{}};this.repository.on(d,function(a){}),this.repository.unbind(a),ok(this.repository._getListeners(b).length===0,"no such listeners found"),ok(this.repository._getListeners(c).length===0,"no such listeners found"),ok(this.repository._getListeners(d).length===1,"don't remove listener")}),test("double sign on the same listener is ok",function(){var a={};this.repository.on({eventName:"beforeRemove",type:"contact",listener:a},function(a){}),this.repository.on({eventName:"beforeRemove",type:"contact",listener:a},function(a){}),ok(this.repository._getListeners({eventName:"beforeRemove",type:"contact"}).length===2,"ok")}),test("beforeRemove/afterRemove is fired",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},b={__type:"person",id:1,name:"Ay ya ya",contacts:[a]},c={__type:"card",id:3,n:"Super",c:a},d={},e=0;this.repository.on({eventName:"beforeRemove",type:"contact"},function(a){d.contactBR=a,e++}),this.repository.on({eventName:"afterRemove",type:"contact"},function(a){d.contactAR=a,e++}),this.repository.on({eventName:"afterRemove",type:"person"},function(a){d.personAfterRemove=a}),this.repository.on({eventName:"afterSave",type:"person"},function(a){d.personAfterSave=a}),this.repository.registerData(b),this.repository.registerData(c),this.service.expects().remove(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success()}),this.repository.execute({type:"contact",name:"remove",config:{id:5}}),this.mockControl.verify(),ok(d.contactBR,"beforeDelete is fired"),ok(d.contactAR,"afterDelete is fired"),equals(e,2,"count of notification events"),ok(d.contactBR.data.obj,"args is correct"),ok(d.personAfterSave,"after save for papa fired"),ok(d.personAfterSave.data.changes.contacts,"after save for childs"),ok(!d.personAfterRemove,"after remove for papa is not fired"),ok(d.contactBR.data.cmd,"args is correct"),ok(d.contactAR.data.cmd,"args is correct")}),test("!delete operation",function(){var a={__type:"contact",id:5,first:"Vasya",last:"Pupkin"},b={__type:"person",id:1,name:"Ay ya ya",contacts:[a]},c={__type:"card",id:3,n:"Super",c:a};this.repository.registerData(b),this.repository.registerData(c),this.service.expects().remove(TypeOf.isA(Object)).andStub(function(a){a.callbacks.success()}),this.repository.execute({type:"contact",name:"remove",config:{id:5}}),this.mockControl.verify();var d=this.repository.db.getPersistedNode(5,"contact");equals(d,null,"object is deleted from storage")}),test("one-to-one or lost is empty means that ref is absent and this is not caused data request",function(){var a={};this.service.expects().get(TypeOf.isA(Object)).andStub(function(b){a=b}),this.repository.execute({type:"person",config:{id:1,fields:[{somebody:["id","phone"]},{contacts:["email","address"]}]}}),a.callbacks.success({id:1,contacts:[],somebody:null}),this.repository.execute({type:"person",config:{id:1,fields:[{somebody:["desc"]},{contacts:["email"]}]}}),this.mockControl.verify(),included(a,{config:{id:1,fields:["id",{somebody:["id","phone"]},{contacts:["id","email","address"],list:!0}]}},"formed correctly")})};return{run:d}})