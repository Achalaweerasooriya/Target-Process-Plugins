define(["Underscore","tau/core/event.queued"],function(_,Event){var innerRun=function(){module("[event.queued] tests"),test("catch simple",function(){var bus=new Event,events=[],storeEvent=function(evt){var name=evt.name;if(_.isUndefined(name)){var parts=[];_.each(evt,function(subEvt){subEvt.hasOwnProperty("name")&&parts.push(subEvt.name)}),name=parts.join("+")}events.push({handler:this,eventName:name})},eventProperties={bus:bus,fire:function(){this.bus.fire.apply(this.bus,arguments)}},eventListener=_.extend({"bus init":storeEvent,"bus before_obj1Evt1":storeEvent,"bus obj1Evt1":storeEvent,"bus after_obj1Evt1":storeEvent,"bus obj2Evt2":storeEvent,"bus obj2Evt1":storeEvent,"bus obj3Evt1":storeEvent,"bus obj2Evt1+obj2Evt2":storeEvent},eventProperties),obj1=_.extend({"bus init":function(){this.fire("obj1Evt1")}},eventProperties),obj2=_.extend({"bus init":function(){this.fire("obj2Evt1")},"bus obj2Evt1":function(){this.fire("obj2Evt2")},"bus obj2Evt1+obj2Evt2":function(){}},eventProperties),obj3=_.extend({"bus init":function(){this.fire("obj3Evt1")}},eventProperties);Event.subscribeOn(obj1),Event.subscribeOn(obj2),Event.subscribeOn(obj3),Event.subscribeOn(eventListener),bus.fire("init"),bus.fire("obj2Evt1");var expectedEvents=[{handle:eventListener,eventName:"init"},{handle:eventListener,eventName:"before_obj1Evt1"},{handle:eventListener,eventName:"obj1Evt1"},{handle:eventListener,eventName:"after_obj1Evt1"},{handle:eventListener,eventName:"obj2Evt1"},{handle:eventListener,eventName:"obj3Evt1"},{handle:eventListener,eventName:"obj2Evt1+obj2Evt2"},{handle:eventListener,eventName:"obj2Evt2"},{handle:eventListener,eventName:"obj2Evt1"},{handle:eventListener,eventName:"obj2Evt1+obj2Evt2"},{handle:eventListener,eventName:"obj2Evt2"}];same(_.pluck(events,"eventName"),_.pluck(expectedEvents,"eventName"),"handled events order is valid")}),test("asynchronous",function(){var bus=new Event,events=[],storeEvent=function(evt){var name=evt.name;if(_.isUndefined(name)){var parts=[];_.each(evt,function(subEvt){subEvt.hasOwnProperty("name")&&parts.push(subEvt.name)}),name=parts.join("+")}events.push({handler:this,eventName:name})},eventProperties={bus:bus,fire:function(){this.bus.fire.apply(this.bus,arguments)}},event,eventListener=_.extend({"bus before_asynchronous":storeEvent,"bus after_asynchronous":storeEvent,"bus asynchronous":storeEvent,"bus synchronous":storeEvent,"bus after_synchronous":storeEvent},eventProperties),obj1=_.extend({"bus before_asynchronous":function(evt){event=evt,event.suspendMain()},"bus synchronous":function(){}},eventProperties);Event.subscribeOn(obj1),Event.subscribeOn(eventListener),bus.fire("asynchronous"),bus.fire("synchronous"),event.resumeMain();var expectedEvents=[{handle:eventListener,eventName:"before_asynchronous"},{handle:eventListener,eventName:"synchronous"},{handle:eventListener,eventName:"after_synchronous"},{handle:eventListener,eventName:"asynchronous"},{handle:eventListener,eventName:"after_asynchronous"}];same(_.pluck(events,"eventName"),_.pluck(expectedEvents,"eventName"),"handled events order is valid")}),test("components bus should handle only it's events",function(){var bus1=new Event,bus2=new Event,handlers=[],obj1={bus:bus1,"bus evt1":function(){handlers.push("obj1 evt1"),bus2.fire("evt2")},"bus evt2":function(){handlers.push("obj1 evt2")},"bus refresh":function(){handlers.push("obj1 refresh")}},obj2={bus:bus2,"bus refresh":function(){handlers.push("obj2 refresh")},"bus evt2":function(){handlers.push("obj2 evt2"),bus2.fire("refresh")}};Event.subscribeOn(obj1),Event.subscribeOn(obj2),bus1.fire("evt1"),same(handlers,["obj1 evt1","obj2 evt2","obj2 refresh"],"handled events order is valid")}),test("should resume event from other event",function(){var bus=new Event,events=[],storeEvent=function(evt){var name=evt.name;if(_.isUndefined(name)){var parts=[];_.each(evt,function(subEvt){subEvt.hasOwnProperty("name")&&parts.push(subEvt.name)}),name=parts.join("+")}events.push({handler:this,eventName:name})},eventProperties={bus:bus,fire:function(){this.bus.fire.apply(this.bus,arguments)}},suspendedEvents=[],eventListener=_.extend({"bus before_asynchronous":storeEvent,"bus after_asynchronous":storeEvent,"bus asynchronous":storeEvent,"bus synchronous":storeEvent,"bus after_synchronous":storeEvent},eventProperties),obj1=_.extend({"bus before_asynchronous":function(evt){suspendedEvents.push(evt),evt.suspendMain()},"bus synchronous":function(){suspendedEvents[0].resumeMain(),suspendedEvents[1].resumeMain()}},eventProperties);Event.subscribeOn(obj1),Event.subscribeOn(eventListener),bus.fire("asynchronous"),bus.fire("asynchronous"),bus.fire("synchronous");var expectedEvents=[{handle:eventListener,eventName:"before_asynchronous"},{handle:eventListener,eventName:"before_asynchronous"},{handle:eventListener,eventName:"synchronous"},{handle:eventListener,eventName:"after_synchronous"},{handle:eventListener,eventName:"asynchronous"},{handle:eventListener,eventName:"after_asynchronous"},{handle:eventListener,eventName:"asynchronous"},{handle:eventListener,eventName:"after_asynchronous"}];same(_.pluck(events,"eventName"),_.pluck(expectedEvents,"eventName"),"handled events order is valid")}),test("components bus should handle only it's events",function(){var bus1=new Event,bus2=new Event,handlers=[],obj1={bus:bus1,"bus evt1":function(){handlers.push("obj1 evt1"),bus2.fire("evt2")},"bus evt2":function(){handlers.push("obj1 evt2")},"bus refresh":function(){handlers.push("obj1 refresh")}},obj2={bus:bus2,"bus refresh":function(){handlers.push("obj2 refresh")},"bus evt2":function(){handlers.push("obj2 evt2"),bus2.fire("refresh")}};Event.subscribeOn(obj1),Event.subscribeOn(obj2),bus1.fire("evt1"),same(handlers,["obj1 evt1","obj2 evt2","obj2 refresh"],"handled events order is valid")})};return{run:innerRun}})