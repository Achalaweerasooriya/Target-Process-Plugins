define(["Underscore","tau/core/external"],function(_,External){var innerRun=function(){module("[external]",{setup:function(){var self=this;self.originalHash='board/5&route={"collapsed":true,"hide":true}&key2={"innerKey":1}',self.external=new External({location:{hash:"#"+self.originalHash}})},teardown:function(){delete this.external,delete this.originalHash}}),test("should allow to get hash",function(){var hash=this.external.getHash();equals(hash,this.originalHash,"valid")}),test("should allow to set hash",function(){var hash=this.originalHash+'&key3={"x":1}';this.external.setHash(hash),equals(hash,this.external.getHash(),"valid")}),test("should allow to get named hash params",function(){var hashObj=this.external.hashParams(),expectedObj={route:{collapsed:!0,hide:!0},key2:{innerKey:1}};same(hashObj,expectedObj,"valid")}),test("should allow to get particular named hash parameter",function(){var hashObj=this.external.getHashParam("route"),expectedObj={collapsed:!0,hide:!0};same(hashObj,expectedObj,"valid")}),test("should allow to set particular named hash parameter",function(){var hash=null,expectedHash=null;this.external.setHashParam("key3",{x:77}),hash=this.external.getHash(),expectedHash=this.originalHash+'&key3={"x":77}',same(hash,expectedHash,"add new state"),this.external.setHashParam("key2",{innerKey:2,z:"test"}),hash=this.external.getHash(),expectedHash='board/5&route={"collapsed":true,"hide":true}&key2={"innerKey":2,"z":"test"}&key3={"x":77}',same(hash,expectedHash,"change existing state"),this.external.setHashParam("key2",null),hash=this.external.getHash(),expectedHash='board/5&route={"collapsed":true,"hide":true}&key3={"x":77}',same(hash,expectedHash,"remove existing state"),this.external.setHashParam("key3",null),hash=this.external.getHash(),expectedHash='board/5&route={"collapsed":true,"hide":true}',same(hash,expectedHash,"remove state from the last of the hash string")}),test("should allow to subscribe to state changes",function(){var result=null;this.external.onHashChange(function(ext){result=ext.getHash()}),this.external.triggerHashChange(),equals(result,this.originalHash,"valid")})};return{run:innerRun}})