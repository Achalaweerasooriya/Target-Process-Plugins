function checkBug($el,bugData){var $idElement=$el.find(".tau-linkentity_type_icon");equal($idElement.text(),bugData.id.toString(),"Id is valid");var $anchor=$idElement;equal($anchor.attr("href"),"#bug/"+bugData.id,"url is valid"),equal($el.find(".name").text(),bugData.name,"Name is valid"),equal($el.find(".state").text(),bugData.entityState.name,"Name is valid")}define(["Underscore","jQuery","tau/components/component.duplicateBugList","tests/common/testData.Generator","tests/common/componentConfigCreator","tests/common/testCase"],function(_,$,component,TestDataGenerator,ComponentConfigCreator,TestCase){var innerRun=function(){var testDataGenerator=new TestDataGenerator;testDataGenerator.initDefaultData();var data=testDataGenerator.getData(),bugs=testDataGenerator.getBugs(),bugData=bugs[0],loggedUser=testDataGenerator.getUsers()[0],impediments=testDataGenerator.getImpediments(),configCreator=new ComponentConfigCreator;configCreator.setEntityIDAndType(bugData.id,bugData.__type),configCreator.setSelectedProjects([data.selectByType("project")[0]]),configCreator.setProcesses(data.selectByType("process")),configCreator.setLoggedUser(loggedUser);var config=configCreator.getConfig(),testCase=new TestCase("[component.duplicateBugList]");testCase.initModule({componentConfig:config,data:data,loggedUser:loggedUser},component,function(){this.serviceMock.registerFindCommand({config:{fields:["id","name",{entityState:["id","name"]}],$query:{tags:{$contains:"duplicateOf#25"}}},returnedData:[bugs[0],bugs[1],bugs[2]]})}),testCase.test("should render valid markup",function(){var $el=this.element,$duplicateBug=$el.find("table.base-info-list tbody > tr");equal($duplicateBug.size(),3,"Count of duplicate bug"),checkBug($duplicateBug.eq(0),_.extend(_.clone(bugs[0]),{entityState:{name:"Planned"}})),checkBug($duplicateBug.eq(1),_.extend(_.clone(bugs[1]),{entityState:{name:"Planned"}})),checkBug($duplicateBug.eq(2),_.extend(_.clone(bugs[2]),{entityState:{name:"Done"}}))})};return{run:innerRun}})