define(["tau/core/tau","tau/components/component.popup","tests/common/testData","tests/components/common/common.setup","tests/components/component.specs"],function(tau,tagsComponent,testData,commonSetup,componentSpecs){var innerRun=function(){var repositoryMockData=testData.tags,context={context:{type:repositoryMockData.__type,id:repositoryMockData.id}},expectedDataFromModel={tags:["tag1","tag2","tag3"]},expectedCommandsToStore=[Similar.to({name:"get",type:"bug",config:Similar.to({id:repositoryMockData.id,fields:["id","tags"]})})],viewTests=[{name:"should render valid markup",test:function(){var $el=this.$el,collection=$el.find("ul").children();equal(collection.length,expectedDataFromModel.tags.length,"Elements count is valid");for(var i=0,len=collection.length;i<len;i++)equal($.trim(collection.eq(i).text()),expectedDataFromModel.tags[i],"Tag test is valid")}},{name:"should render valid markup (for empty tags)",preSetup:function(fixture){var initialData=repositoryMockData;initialData.tags="",this.data=initialData,fixture.setInitialData({testData:initialData})},test:function(){var $el=this.$el,collection=$el.find("ul").children();equal(collection.length,0,"Elements count is valid")}}],setup=commonSetup.create("[component.popup]",repositoryMockData,tagsComponent);componentSpecs.create(setup,context).viewShouldFollowBasicComponentLifeCycle().modelShouldReturnData(expectedDataFromModel,[expectedCommandsToStore]).viewShouldPassTests(viewTests).done()};return{run:innerRun}})