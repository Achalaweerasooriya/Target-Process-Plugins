function checkImpediment(a,b){var c=a.find(".ui-type-icon.ui-type-icon-impediment");equal(c.text(),b.id.toString(),"Id is valid");var d=c.parent("a");equal(d.attr("href"),"#impediment/"+b.id,"url is valid"),equal(a.find(".name").text(),b.name,"Name is valid"),equal(a.find(".state").text(),b.entityState.name,"Name is valid")}define(["Underscore","jQuery","tau/components/component.impedimentList","tests/common/testData.Generator","tests/common/componentConfigCreator","tests/common/testCase"],function(a,b,c,d,e,f){var g=function(){var b=new d;b.initDefaultData();var g=b.getData(),h=b.getBugs()[0],i=b.getUsers()[0],j=b.getImpediments(),k=new e;k.setEntityIDAndType(h.id,h.__type),k.setSelectedProjects([g.selectByType("project")[0]]),k.setProcesses(g.selectByType("process")),k.setLoggedUser(i);var l=k.getConfig(),m=new f("[component.impedimentList]");m.initModule({componentConfig:l,data:g,loggedUser:i},c),m.test("should render valid markup",function(){var b=this.element,c=b.find("table.base-info-list tbody > tr");equal(c.size(),3,"Count of impediments"),checkImpediment(c.eq(0),a.extend(a.clone(j[0]),{entityState:{name:"Planned"}})),checkImpediment(c.eq(1),a.extend(a.clone(j[1]),{entityState:{name:"Open"}})),checkImpediment(c.eq(2),a.extend(a.clone(j[2]),{entityState:{name:"Planned"}}))})};return{run:g}})