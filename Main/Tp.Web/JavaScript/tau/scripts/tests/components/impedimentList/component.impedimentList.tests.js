function checkImpediment(a,b){var c=a.find(".ui-link-entity");equal(c.text(),b.id.toString(),"Id is valid");var d=c;equal(d.attr("href"),"#impediment/"+b.id,"url is valid"),equal(a.find(".name").text(),b.name,"Name is valid"),equal(a.find(".state").text(),b.entityState.name,"Name is valid")}define(["Underscore","jQuery","tau/components/component.impedimentList","tests/common/testData.Generator","tests/common/componentConfigCreator","tests/common/testCase"],function(_,$,a,b,c,d){var e=function(){var e=new b;e.initDefaultData();var f=e.getData(),g=e.getBugs()[0],h=e.getUsers()[0],i=e.getImpediments(),j=new c;j.setEntityIDAndType(g.id,g.__type),j.setSelectedProjects([f.selectByType("project")[0]]),j.setProcesses(f.selectByType("process")),j.setLoggedUser(h);var k=j.getConfig(),l=new d("[component.impedimentList]");l.initModule({componentConfig:k,data:f,loggedUser:h},a),l.test("should render valid markup",function(){var a=this.element,b=a.find("table.base-info-list tbody > tr");equal(b.size(),3,"Count of impediments"),checkImpediment(b.eq(0),_.extend(_.clone(i[0]),{entityState:{name:"Planned"}})),checkImpediment(b.eq(1),_.extend(_.clone(i[1]),{entityState:{name:"Open"}})),checkImpediment(b.eq(2),_.extend(_.clone(i[2]),{entityState:{name:"Planned"}}))})};return{run:e}})