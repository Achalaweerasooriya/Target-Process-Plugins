define(["jQuery","tau/components/component.property.priority","tests/components/component.specs","tests/common/testData.Generator","tests/common/service.mock","tau/configurator","tests/components/common/common.setup"],function($,ComponentIteration,componentSpecs,TestDataGenerator,ServiceMock,configurator,commonSetup){var innerRun=function(){var testDataGenerator=new TestDataGenerator;testDataGenerator.initDefaultData();var data=testDataGenerator.getData(),projects=testDataGenerator.getProjects(),bugData=testDataGenerator.getBugs()[0],priorities=testDataGenerator.getPriorities(),context={manualContext:!0,context:{entity:{entityType:{name:bugData.__type},id:bugData.id},applicationContext:{selectedProjects:[projects[0]],culture:{name:"en-US",timePattern:"g:i A",shortDateFormat:"M/d/yyyy",longDateFormat:"dddd, MMMM dd, yyyy",decimalSeparator:".",__type:"culture"},processes:testDataGenerator.getProcesses()}}},priority=bugData.priority,newPriority=priorities[2],setup=commonSetup.create("[component.priority]",data,ComponentIteration,context),viewTests=[{name:"should render valid markup",test:function(){var $el=this.$el;equal($el.find(".property-text").text(),priority.name,"Priority name"),equal($el.find(".external-view").size(),0,"Url is not added")}},{name:"should change priority",preSetup:function(){var service=this.service=new ServiceMock;configurator.setService(service),configurator.getProxy().markRecordSetAsCompleteLoaded("priority")},test:function(){var $el=this.$el,triger=$el.find(".property-text");triger.click();var bubbleList=$(".tau-bubble");equal(bubbleList.size(),1,"Count of bubbles");var newPriorityElement=bubbleList.eq(0).find('.drop-down-option:contains("'+newPriority.name+'")');this.service.registerSaveCommand({config:{$set:{priority:{id:newPriority.id}},fields:["id"],id:bugData.id},returnedData:{id:bugData.id,Priority:{Id:newPriority.id,Name:newPriority.name}}}),newPriorityElement.click(),equal(this.$el.find(".property-text").text(),newPriority.name,"Priority was changed")}}];componentSpecs.create(setup,context).viewShouldFollowBasicComponentLifeCycle().viewShouldPassTests(viewTests).done();var emptyRelease=commonSetup.create("[component.priority] empty",data,ComponentIteration,context),emptyBugData=testDataGenerator.getBugs()[1],emptyContext={context:{type:emptyBugData.__type,id:emptyBugData.id}};componentSpecs.create(emptyRelease,emptyContext).viewShouldFollowBasicComponentLifeCycle().viewShouldPassTests([{name:"should render valid markup for empty release",test:function(){var $el=this.$el;equal($el.find(".property-text").text(),"","Release name")}}]).done()};return{run:innerRun}})