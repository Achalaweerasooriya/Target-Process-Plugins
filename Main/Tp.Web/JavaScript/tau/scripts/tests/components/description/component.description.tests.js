define(["Underscore","jQuery","tau/core/class","tau/components/component.description","tests/common/testData","tests/components/common/common.setup","tests/components/component.specs"],function(_,$,Class,descriptionComponent,testData,commonSetup,componentSpecs){function genTest(fieldName,repositoryMockData,component){function generatePreSetup(cmdArray){return function(fixture){fixture.mockRepository(this);var arrayCount=cmdArray.length;for(var i=0;i<arrayCount;i++){var item=cmdArray[i],command=item.command,itemSetup=item.setup||function(){},stub=item.stub||function(){};stub._test=this,itemSetup.call(this,command,item)}}}function generateInitialRequestMock(expCmdArr){return{command:expCmdArr,setup:function(cmd){this.repositoryMock.expects().unbind(TypeOf.isA(Class));var subscriptions=[Like.is({eventName:"beforeSave",type:context.context.type,listener:TypeOf.isA(Class)}),Like.is({eventName:"afterSave",type:context.context.type,listener:TypeOf.isA(Class)})];for(var s=0;s<subscriptions.length;s++)this.repositoryMock.expects().on(subscriptions[s],TypeOf.isA(Function)).andStub(_.bind(this.repository.on,this.repository));this.repositoryMock.expects().execute(cmd).andStub(_.bind(this.repository.execute,this.repository))}}}function generateSaveRequestMock(expCmdArr,stubCallback){return{command:expCmdArr,setup:function(cmd,selfExpectedOptions){this.repositoryMock.expects().execute(cmd).andStub(_.bind(this.repository.execute,this.repository)),this.serviceMock.expects().save(TypeOf.isA(Object)).andStub(selfExpectedOptions.stub)},stub:function(cmd){var _stub=stubCallback||arguments.callee._test.executeStub;_stub.call(arguments.callee._test,cmd)}}}function generateSaveRequestMockForDescription(description){var $set={};return $set[fieldName]=description,generateSaveRequestMock([Similar.to({name:"save",type:"bug",config:Similar.to({id:repositoryMockData.id,$set:Like.is($set)})})],function(cmd){var success={id:cmd.config.id};success[fieldName]=description,cmd.callbacks.success(success)})}function showEditor($target){var $el=this.$el;$target=$target||$el.find(".ui-description__inner"),$target.dblclick()}repositoryMockData=_.clone(repositoryMockData);var d=repositoryMockData[fieldName];repositoryMockData[fieldName]=d+'<img src="~/uploads/porn.jpg">';var descriptionConverted=d+'<img src="/TP/uploads/porn.jpg">',context={disableAutoSave:!0,context:{type:"bug",id:repositoryMockData.id}},expectedDataFromModel={html:descriptionConverted},expectedCommandsToStore=[Similar.to({name:"get",type:"bug",config:Similar.to({id:repositoryMockData.id,fields:["id",fieldName]})})],viewTests=[{name:"should render valid markup",test:function(){var $el=this.$el;equals($.trim($el.find(".ui-description__inner").html()).toLowerCase(),expectedDataFromModel.html.toLowerCase(),"Description text is valid")}},{name:"should render valid markup with img tags",test:function(){var $el=this.$el;equals($el.find(".ui-description__inner img:first").attr("src"),this.rootAppPath+"/uploads/porn.jpg","Description image src is valid")}},{name:"should have rich editor",test:function(){var $el=this.$el;showEditor.call(this);var $target=$el.find(".ui-description__inner"),$titleEditor=$el.find("textarea");equals($titleEditor.length,1,"Give possibility to edit"),equals(_.trim($titleEditor.val()).toLowerCase(),expectedDataFromModel.html.toLowerCase(),"Set text in editor")}},{name:"should save edited data",preSetup:generatePreSetup([generateInitialRequestMock(expectedCommandsToStore),generateSaveRequestMockForDescription('Atis atis animatis atis atis amatis<img src="~/uploads/porn.jpg">edited'),generateInitialRequestMock(expectedCommandsToStore)]),test:function(){var $el=this.$el;showEditor.call(this);var $titleEditor=$el.find("textarea");$titleEditor.val(_.trim($titleEditor.val())+"edited"),$el.find(".ui-richeditor__controls__save").click();var $target=$el.find(".ui-description__inner");equals(_.trim($target.html()).toLowerCase(),expectedDataFromModel.html.toLowerCase()+"edited","Edited text is saved")}},{name:"should correct save empty",preSetup:generatePreSetup([generateInitialRequestMock(expectedCommandsToStore),generateSaveRequestMockForDescription(""),generateInitialRequestMock(expectedCommandsToStore)]),test:function(){var $el=this.$el;showEditor.call(this);var $titleEditor=$el.find("textarea");$titleEditor.val(""),$el.find(".ui-richeditor__controls__save").click(),equals(this.$el.find(".ui-description__inner").text(),"Double-click to add description...","Show placeholder text"),ok(this.$el.find(".ui-description__inner").hasClass("ui-description__inner_empty_true"),"Has class of empty field"),showEditor.call(this),ok(this.$el.find(".ui-description__inner").hasClass("ui-description__inner_empty_true")==0,"Has no class of empty field"),$titleEditor=this.$el.find("textarea"),equals($titleEditor.val(),"","Empty value")}},{name:"should not init on link click",preSetup:generatePreSetup([generateInitialRequestMock(expectedCommandsToStore),generateSaveRequestMockForDescription('<span>bzz</span><a href="http://google.com">google</a>'),generateInitialRequestMock(expectedCommandsToStore)]),test:function(){var $el=this.$el;showEditor.call(this);var $titleEditor=$el.find("textarea");$titleEditor.val('<span>bzz</span><a href="http://google.com">google</a>'),$el.find(".ui-richeditor__controls__save").click();var x=!1;this.$el.find(".ui-description__inner a").click(function(e){e.preventDefault(),x=!0}),showEditor.call(this,this.$el.find(".ui-description__inner a")),this.$el.find(".ui-description__inner a").click(),equals(x,!0,"Can click on link"),equals($titleEditor.parent().css("display"),"none","Editor is hidden")}},{name:"should apply auto-replace pattern (id:XXX -> #XXX Entity name)",preSetup:generatePreSetup([generateInitialRequestMock(expectedCommandsToStore),generateSaveRequestMockForDescription("The same bug as id:123 bug some-id:text"),generateInitialRequestMock(expectedCommandsToStore),{command:[Similar.to({name:"get",type:"general",config:Similar.to({id:"123",fields:["id","name",Similar.to({entityType:["id","name"]})]})})],setup:function(cmd){var fnStub=function(repoCmdArr){var c=repoCmdArr[0];c.callbacks.success({data:{id:c.config.id,name:"General "+c.config.id,entityType:{id:1,name:"task"}}})};this.repositoryMock.expects().execute(cmd).andStub(fnStub)}}]),test:function(){var $el=this.$el;showEditor.call(this);var $descriptionEditor=$el.find("textarea");$descriptionEditor.val("The same bug as id:123 bug some-id:text"),$el.find(".ui-richeditor__controls__save").click();var $target=this.$el.find(".ui-description__inner");equals(_.trim($target.html()).replace("<A","<a").replace("/A>","/a>"),'The same bug as <a href="#task/123">#123&nbsp;General 123</a> bug some-id:text',"Original text"),showEditor.call(this);var editedText=this.$el.find("textarea").val();equals(editedText,"The same bug as id:123 bug some-id:text","Text without links is open for edit"),this.$el.find(".ui-richeditor__controls__cancel").click(),$target=this.$el.find(".ui-description__inner"),equals(_.trim($target.html()).replace("<A","<a").replace("/A>","/a>"),'The same bug as <a href="#task/123">#123&nbsp;General 123</a> bug some-id:text',"Original text")}}],setup=commonSetup.create("[component."+fieldName+"]",repositoryMockData,component);componentSpecs.create(setup,context).viewShouldFollowDataComponentLifeCycle().viewShouldPassTests(viewTests).done()}var innerRun=function(){var repositoryMockData=testData.description,fieldName="description";genTest(fieldName,repositoryMockData,descriptionComponent)};return{run:innerRun,generateRichTextFieldTest:genTest}})