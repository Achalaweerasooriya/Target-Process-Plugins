define(["Underscore"],function(_){var tests=[],viewSetup=function(){var self=this;this.component.on("afterRender",function(evtArgs){self.$el=evtArgs.data.element}),this.component.on("dataBind",function(evtArgs){self.data=evtArgs.data})};return{addViewTestToArray:function(arr){return tests.concat(arr)},addModelTestsToArray:function(arr,expectedData,expectedCmdArray,storeSubscriptions){var modelTests=[{name:"model should return valid data on initialize",preSetup:function(fixture){fixture.mockRepository(this);var subscriptions=storeSubscriptions||[];for(var subscriptionIndex=0;subscriptionIndex<subscriptions.length;subscriptionIndex++)this.repositoryMock.expects().on(subscriptions[subscriptionIndex],TypeOf.isA(Function)).andStub(_.bind(this.repository.on,this.repository));var arrayCount=expectedCmdArray.length;for(var i=0;i<arrayCount;i++)if(expectedCmdArray[i]._operation=="on"){var expects=this.repositoryMock.expects(),command=expectedCmdArray[i].command;_.isArray(command)?expects=expects.on.apply(expects,command):expects=expects.on(command,TypeOf.isA(Function)),expects.andStub(_.bind(this.repository.on,this.repository))}else this.repositoryMock.expects().execute(expectedCmdArray[i]).andStub(_.bind(this.repository.execute,this.repository))},setup:function(){var self=this;self.data={},this.component.on("dataBind",function(evtArgs){self.data=evtArgs.data})},test:function(){var actualData=this.data;same(actualData,expectedData,"Data returned from model is valid")}}];return modelTests.concat(arr)},addPermissionTestToArray:function(arr,expectedPermissions){var modelTests=[{name:"should fire permissionsReady",setup:function(){var self=this;self.permissions={},this.component.on("permissionsReady",function(evtArgs){self.permissions=evtArgs.data})},test:function(){var actualData=this.permissions;same(actualData,expectedPermissions,"Permissions is valid")}}];return modelTests.concat(arr)},addUITestToArray:function(arr,tests,setup){function copyProp(source,dest,name){source[name]&&(dest[name]=source[name])}if(!tests)return;for(var i=0,testsCount=tests.length;i<testsCount;i++){var test={name:tests[i].name,setup:tests[i].setup||setup||viewSetup,test:tests[i].test};copyProp(tests[i],test,"context"),copyProp(tests[i],test,"preSetup"),copyProp(tests[i],test,"init"),arr.push(test)}}}})