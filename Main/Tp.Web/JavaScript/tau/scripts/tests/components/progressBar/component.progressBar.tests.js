define(["jQuery","tau/components/component.progressBar","tests/components/common/common.setup","tests/components/component.specs","tests/common/testData.Generator","tau/components/component.property.entityState","tests/common/service.mock","tau/configurator"],function($,component,commonSetup,componentSpecs,TestDataGenerator,entityStateComponent,ServiceMock,configurator){var innerRun=function(){var testDataGenerator=new TestDataGenerator;testDataGenerator.initDefaultData();var initialData=testDataGenerator.getData(),bugData=testDataGenerator.getBugs()[0],context={context:{type:"bug",id:bugData.id}},checkStateText=function($el,expectedText){equals($el.find(".state-select > .attr-item > .attr-name").text(),expectedText,"State text is valid")},setup=commonSetup.create("[component.progressBar]",initialData,component,context),viewTests=[{name:"should render correct markup for non-zero effort",preSetup:function(){var service=this.service=new ServiceMock;configurator.setService(service)},test:function(){var $el=this.$el,exp=this.data;checkStateText($el,bugData.entityState.name),ok($el.find(".ui-progressbar__data").css("display")!=="none","spent/remain labels are visible"),equals($el.find("span.ui-label-remain > .value").eq(0).text(),exp.timeRemain+"h","Time Remain should be rendered"),equals($el.find("span.ui-label-spent .value").eq(0).text(),exp.timeSpent+"h","Time Spent text label text is valid"),equals($el.find(".ui-progress-progress").eq(0).tmplItem().data.percentCompleted,exp.percentCompleted,"Percent completed in data"),equals($el.find(".ui-progress-progress").eq(0)[0].style.width,Math.round(exp.percentCompleted)+"%","Progress line should be rendered (rounded)"),equals($el.find("span.ui-label").eq(0).text(),Math.round(exp.percentCompleted)+"%","Percent text label is valid (rounded)")}},{name:"should refresh on dependent data change [timeSpent|timeRemain|effortToDo|effortCompleted]",preSetup:function(){var service=this.service=new ServiceMock;configurator.setService(service)},test:function(){var $el=this.$el,exp=this.data;checkStateText($el,bugData.entityState.name),ok($el.find(".ui-progressbar__data").css("display")!=="none","spent/remain labels are visible"),equals($el.find("span.ui-label-remain > .value").eq(0).text(),exp.timeRemain+"h","Time Remain should be rendered"),equals($el.find("span.ui-label-spent .value").eq(0).text(),exp.timeSpent+"h","Time Spent text label text is valid"),equals($el.find(".ui-progress-progress").eq(0).tmplItem().data.percentCompleted,exp.percentCompleted,"Percent completed in data"),equals($el.find(".ui-progress-progress").eq(0)[0].style.width,Math.round(exp.percentCompleted)+"%","Progress line should be rendered (rounded)"),equals($el.find("span.ui-label").eq(0).text(),Math.round(exp.percentCompleted)+"%","Percent text label is valid (rounded)");var updatedTimeSpent=exp.timeRemain+exp.timeSpent;this.service.registerRefreshCommand({config:{fields:["id","timeSpent","timeRemain","effortToDo","effortCompleted"],id:bugData.id},returnedData:{id:bugData.id,timeSpent:updatedTimeSpent,timeRemain:0,effortToDo:0,effortCompleted:exp.effortCompleted+exp.effortToDo}}),configurator.getStore().refresh("bug",{id:bugData.id,fields:["id","timeSpent","timeRemain","effortToDo","effortCompleted"]}).done(),$el=this.$el,equals($el.find("span.ui-label-remain > .value").eq(0).text(),"0h","Time Remain should be rendered"),equals($el.find("span.ui-label-spent .value").eq(0).text(),updatedTimeSpent+"h","Time Spent text label text is valid"),equals($el.find(".ui-progress-progress").eq(0).tmplItem().data.percentCompleted,100,"Percent completed in data"),equals($el.find(".ui-progress-progress").eq(0)[0].style.width,"100%","Progress line should be rendered (rounded)"),equals($el.find("span.ui-label").eq(0).text(),"100%","Percent text label is valid (rounded)")}}];componentSpecs.create(setup,context).viewShouldFollowDataComponentLifeCycle().viewShouldPassTests(viewTests).done();var testAppContext={processes:[{id:1,name:"Kanban",terms:[],practices:[]}]},noTimeTrackingSetup=commonSetup.create("[component.progressBar][no time tracking]",initialData,component,context,testAppContext),noTimeTrackingViewTests=[{name:"should not show spent/remain labels if time tracking is OFF",preSetup:function(){var service=this.service=new ServiceMock;configurator.setService(service)},test:function(){var $el=this.$el,exp=this.data;checkStateText($el,bugData.entityState.name),ok($el.find(".ui-progressbar__data").css("display")==="none","spent/remain labels are hidden"),equals($el.find(".ui-progress-progress").eq(0).tmplItem().data.percentCompleted,exp.percentCompleted,"Percent completed in data"),equals($el.find(".ui-progress-progress").eq(0)[0].style.width,Math.round(exp.percentCompleted)+"%","Progress line should be rendered (rounded)"),equals($el.find("span.ui-label").eq(0).text(),Math.round(exp.percentCompleted)+"%","Percent text label is valid (rounded)")}}];componentSpecs.create(noTimeTrackingSetup,context).viewShouldPassTests(noTimeTrackingViewTests).done();var zeroEffortBugData=testDataGenerator.getBugs()[1],zeroEffortEntityContext={context:{type:"bug",id:zeroEffortBugData.id}},zeroEffortSetup=commonSetup.create("[component.progressBar][zero effort]",initialData,component,zeroEffortEntityContext),zeroEffortViewTests=[{name:"should render markup for zero effort",preSetup:function(){var service=this.service=new ServiceMock;configurator.setService(service)},test:function(){var $el=this.$el;checkStateText($el,bugData.entityState.name),equals($el.find("span.ui-label-remain > .value").eq(0).text(),zeroEffortBugData.timeRemain+"h","Time Remain should be rendered"),equals($el.find(".ui-progress-progress").length,0,"Progress line should not be rendered")}}];componentSpecs.create(zeroEffortSetup,zeroEffortEntityContext).viewShouldFollowDataComponentLifeCycle().viewShouldPassTests(zeroEffortViewTests).done()};return{run:innerRun}})