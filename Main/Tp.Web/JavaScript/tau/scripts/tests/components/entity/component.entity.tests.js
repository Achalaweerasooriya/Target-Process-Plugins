define(["jQuery","tests/common/testkit","tau/configurator","tau/components/component.entity"],function($,ComponentTestKit,configurator,Component){var run=function(){var TestCase=new ComponentTestKit("[component.entity]",Component),appContexts={app1:{id:12,acid:666}},userStories={us1:{id:12,name:"US1"}},data=TestCase.loadFixtures({contexts:appContexts,userStories:userStories});return TestCase.setData(data),TestCase.setEntity(data.userStory.us1),TestCase.addTest({name:"should render valid markup",test:function(){var $el=this.$el;ok($el.is(".tau-container"),"container element is rendered")}}),TestCase.addTest({name:"context formed correctly",preSetup:fnPreSetup,test:function(){var configEvents=this.EventsDictonary.onContextCreated;equals(configEvents.length,1,"single event about config container creation is fired");var config=configEvents[0].data;same(config.context.entity.entityType,{name:story.__type},"entity attached correctly"),same(config.context.entity.id,150,"entity attached correctly"),equals(config.context.applicationContext.id,appContext.id,"app context attached correctly"),equals(config.context.applicationContext.__type,"context","app context attached correctly")}}),TestCase.run()};return{run:run}}),define(["tau/configurator","tests/common/service.mock","tau/components/component.page.entity","tests/components/common/common.setup","tests/components/component.specs","tests/common/applicationContext","tests/common/testData.Generator","tau/components/component.impedimentListPanel","tau/components/component.impedimentList","tau/components/component.label.impedimentsCount","tau/components/component.diagnostics"],function(configurator,ServiceMock,component,commonSetup,componentSpecs,AppContext,TestDataGenerator){var innerRun=function(){var testDataGenerator=new TestDataGenerator;testDataGenerator.initDefaultData();var data=testDataGenerator.getData(),story=data.selectByType("userStory")[3];configurator.setGlobalSettingsService({getGlobalSettings:function(callbackInfo){callbackInfo.success.call(callbackInfo.scope,{IsEmailNotificationsEnabled:!1})}});var config={manualContext:!0,context:{entityType:{name:story.__type},id:story.id}},appContext=new AppContext(config.context);data.push(appContext),appContext.processes[0].customFields=[];var setup=commonSetup.create("[component.page.entity] user story config",data,component),fnPreSetup=function(){var service=this.service=new ServiceMock;configurator.setService(service)},viewTests=[{name:"container element should be rendered to provided element",preSetup:fnPreSetup,test:function(){ok(this.$el.is(".tau-container"),"container element is rendered")}}],configContainerTest={name:"config container formed correctly",preSetup:fnPreSetup,test:function(){var configEvents=this.EventsDictonary.onConfigContainerCreated;equals(configEvents.length,1,"single event about config container creation is fired");var config=configEvents[0].data;same(config.context.entity.entityType,{name:story.__type},"entity attached correctly"),same(config.context.entity.id,150,"entity attached correctly"),equals(config.context.applicationContext.id,appContext.id,"app context attached correctly"),equals(config.context.applicationContext.__type,"context","app context attached correctly")}};componentSpecs.create(setup,config).viewShouldFollowBasicComponentLifeCycle(fnPreSetup).viewShouldPassTests(viewTests).on("onConfigContainerCreated",configContainerTest).done()};return{run:innerRun}})