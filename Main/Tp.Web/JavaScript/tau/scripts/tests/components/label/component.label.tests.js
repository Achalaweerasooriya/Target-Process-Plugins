define(["tau/core/class","tau/core/tau","tau/components/component.label","tests/components/common/common.setup","tests/components/component.specs"],function(Class,tau,labelComponent,commonSetup,componentSpecs){var innerRun=function(){var context={context:{type:"story",id:15},settings:{text:"label text"}},setup=commonSetup.create("[component.label] without badge",{},labelComponent),expectedDataFromModel={text:context.settings.text},preSetup=function(fixture){fixture.mockRepository(this),this.repositoryMock.expects().unbind(TypeOf.isA(Class))},viewTests=[{name:"should render label without badge",preSetup:preSetup,test:function(){var $el=this.$el;equal($el.children(".ui-label").text(),expectedDataFromModel.text,"Text of label is valid"),ok(!$el.children(".ui-badge").length,"Badge was not added")}}];componentSpecs.create(setup,context).viewShouldPassTests(viewTests).done();var contextWithBadge={context:{type:"story",id:15},settings:{text:"label text",badgeFieldName:"textForBadge",getBadgeText:function(callbackInfo){callbackInfo.callback.call(callbackInfo.scope,{textForBadge:"valueForTextOfBadge"})}}},setupWithBadge=commonSetup.create("[component.label] with badge",{},labelComponent),viewTests=[{name:"should render label with badge",preSetup:preSetup,test:function(){var $el=this.$el;equal($el.children(".ui-label").text(),expectedDataFromModel.text,"Text of label is valid"),equal($el.children(".ui-quantity").text(),"valueForTextOfBadge","Badge text is valid")}}];componentSpecs.create(setupWithBadge,contextWithBadge).viewShouldPassTests(viewTests).done();var contextWithTextArray={context:{type:"story",id:15},settings:{text:["Foo","Bar","Baz"]}},expectedDataFromModelArray={text:contextWithTextArray.settings.text},setupWithTextArray=commonSetup.create("[component.label] with text array",{},labelComponent);viewTests=[{name:"should render label with correct text and css class",preSetup:preSetup,test:function(){var $el=this.$el;equals($el.children(".ui-label").text(),"Foo, Bar & Baz","Text of label is valid"),equals($el.children(".ui-label").attr("class"),"ui-label","No unspecified css classes")}}],componentSpecs.create(setupWithTextArray,contextWithTextArray).viewShouldPassTests(viewTests).done(),contextWithTextArray={context:{type:"story",id:15},settings:{text:["Foo"],cssClass:"test-css-class"}},expectedDataFromModelArray={text:contextWithTextArray.settings.text,cssClass:contextWithTextArray.settings.cssClass},setupWithTextArray=commonSetup.create("[component.label] with text array",{},labelComponent),viewTests=[{name:"should render label with correct text and css class",preSetup:preSetup,test:function(){var $el=this.$el;equals($el.children(".ui-label").text(),"Foo","Text of label is valid"),ok($el.children(".ui-label").hasClass("test-css-class"),"Css class is applied")}}],componentSpecs.create(setupWithTextArray,contextWithTextArray).viewShouldPassTests(viewTests).done()};return{run:innerRun}})