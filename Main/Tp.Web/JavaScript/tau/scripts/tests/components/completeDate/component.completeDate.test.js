function startEditDate(){var $el=this.element;$el.click();var $input=$el.find("input.hasDatepicker");return $input}define(["jQuery","tau/configurator","tests/common/testCase","tests/common/componentConfigCreator","tau/components/component.property.completeDate","tests/common/testData.Generator"],function($,configurator,TestCase,ComponentConfigCreator,ComponentCreateDate,TestDataGenerator){var innerRun=function(){var testDataGenerator=new TestDataGenerator;testDataGenerator.initDefaultData();var data=testDataGenerator.getData(),bugData=testDataGenerator.getBugs()[0],configCreator=new ComponentConfigCreator;configCreator.setEntityIDAndType(bugData.id,bugData.__type),configCreator.setSelectedProjects([data.selectByType("project")[0]]),configCreator.setProcesses(data.selectByType("process"));var config=configCreator.getConfig();config.editable=!0;var testCase=new TestCase("[component.completeDate]");testCase.initModule({componentConfig:config,data:data},ComponentCreateDate),testCase.test("should render valid markup",function(){var $el=this.element;equal($el.find(".property-text").text(),"13-Oct-2011","Complete Date name"),$el.click(),equal($el.find(".external-view").size(),0,"Url is not added")}),testCase.test("should refresh when completeDate is changed",function(){var $el=this.element,date=new Date;this.serviceMock.registerSaveCommand({config:{id:bugData.id,$set:{endDate:date.toString()},fields:["id"]},returnedData:{id:bugData.id,endDate:"/Date(1319124023000+0300)/"}}),configurator.getStore().save(bugData.__type,{id:bugData.id,$set:{endDate:date.toString()}}).done();var $el=this.element;equal($el.find(".property-text").text(),"20-Oct-2011","Complete Date name"),equal($el.find(".external-view").size(),0,"Url is not added")}),testCase.test("should not save if date is not changed",function(){var $el=this.element,$input=startEditDate.call(this);equal($input.size(),1,"Input is created"),$input.val(" "+$input.val()),$("body").click(),$input=startEditDate.call(this);var value=$input.val();$input.val(value+" 20:00"),$("body").click(),$input=startEditDate.call(this),$input.val(value),$("body").click(),equal(this.element.find(".property").text(),value,"Values is valid"),equal(this.element.find(".property").hasClass("ui-validationerror"),!1,"Values is valid"),equal($el.find("input.hasDatepicker").size(),1,"Input is removed")}),testCase.test("should change",function(){var $el=this.element,date=new Date;this.serviceMock.registerSaveCommand({config:{id:bugData.id,$set:{endDate:"25-Dec-2011 00:00"},fields:["id","endDate"]},returnedData:{id:bugData.id,endDate:"/Date(1319124023000+0300)/"}});var $el=this.element;$el.click();var $input=$el.find("input.hasDatepicker");equal($input.size(),1,"Input is created"),$input.val("25-Dec-2011"),$("body").click(),$el=this.element,equal($el.find(".property-text").text(),"20-Oct-2011","Complete Date name"),equal($el.find(".external-view").size(),0,"Url is not added")})};return{run:innerRun}})