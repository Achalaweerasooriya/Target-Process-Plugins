define(["jQuery","Underscore","tau/components/component.property.userStory","tests/components/component.specs","tests/common/testData.Generator","tests/common/service.mock","tau/configurator","tests/components/common/common.setup"],function($,_,ComponentUserStory,componentSpecs,TestDataGenerator,ServiceMock,configurator,commonSetup){var innerRun=function(){var testDataGenerator=new TestDataGenerator;testDataGenerator.initDefaultData();var data=testDataGenerator.getData(),projects=testDataGenerator.getProjects(),bugData=testDataGenerator.getBugs()[0],userStoryList=testDataGenerator.getUserStories(),project=projects[1],context={manualContext:!0,context:{entity:{entityType:{name:bugData.__type},id:bugData.id},applicationContext:{selectedProjects:[project],culture:{name:"en-US",timePattern:"g:i A",shortDateFormat:"M/d/yyyy",longDateFormat:"dddd, MMMM dd, yyyy",decimalSeparator:".",__type:"culture"},processes:testDataGenerator.getProcesses()}}},userStory=bugData.userStory,newUserStory=userStoryList[2],setup=commonSetup.create("[component.userStory]",data,ComponentUserStory,context),viewTests=[{name:"should render valid markup",test:function(){var $el=this.$el;equal($el.find(".property-text span").text(),userStory.name,"story name"),equal($el.find("a").attr("href"),["#userstory",userStory.id].join("/"),"story name")}}];componentSpecs.create(setup,context).viewShouldFollowBasicComponentLifeCycle().viewShouldPassTests(viewTests).done();var emptyBugData=testDataGenerator.getBugs()[1],emptyContext={manualContext:!0,context:{entity:{entityType:{name:emptyBugData.__type},id:emptyBugData.id},applicationContext:{selectedProjects:[project],culture:{name:"en-US",timePattern:"g:i A",shortDateFormat:"M/d/yyyy",longDateFormat:"dddd, MMMM dd, yyyy",decimalSeparator:".",__type:"culture"},processes:testDataGenerator.getProcesses()}}},emptyRelease=commonSetup.create("[component.userStory] empty",data,ComponentUserStory,emptyContext);componentSpecs.create(emptyRelease,emptyContext).viewShouldFollowBasicComponentLifeCycle().viewShouldPassTests([{name:"should render valid markup for empty UserStory",preSetup:function(){configurator.getProxy().markRecordSetAsCompleteLoaded("userStory")},test:function(){var $el=this.$el;equal($el.find(".property-text").text(),"","UserStory name")}}]).done(),testDataGenerator.clear(),testDataGenerator.initDefaultData(),testDataGenerator.removeUserStoriesFromProject();var data=_.select(testDataGenerator.getData(),function(v){return v.__type!=="userStory"}),noReleasesSetup=commonSetup.create("[component.userStory] not user stories ",data,ComponentUserStory,emptyContext)};return{run:innerRun}})