define(["Underscore","tests/common/service.mock","tau/components/component.list","tests/common/datapoint/test.common.datapoint","tests/common/applicationContext","tests/components/common/common.setup","tests/components/component.specs","tests/common/checker","tau/models/dataProviders/model.provider.items.tasks_bugs","tau/models/dataProviders/model.provider.groups.tasks_bugs","tau/configurator","tau/models/dataprocessor/model.processor.context","tau/ui/templates/list_/grid.entity/ui.template.list.grid.entity"],function(_,ServiceMock,listComponent,dataPoint,AppCtx,commonSetup,componentSpecs,checker,BugsTasksItemsDataProvider,BugsTasksGroupsDataProvider,configurator,fnCtxProcessor){var innerRun=function(){var appContext=new AppCtx,projects=dataPoint.projects(),entityStates=dataPoint.entityStates(),bugs=dataPoint.bugs(),tasks=dataPoint.tasks(),entity={id:15,__type:"userStory",tasks:_(tasks).filter(function(t){return t.id==31||t.id==33}),bugs:_(bugs).filter(function(t){return t.id==41||t.id==665})},dataToRegister=[entity].concat(entityStates).concat(projects),context={context:{type:"story",id:15},configurator:configurator},fnPreSetup=function(){var service=this.service=new ServiceMock;configurator.setService(service),configurator.getProxy().markRecordSetAsCompleteLoaded("project"),configurator.getProxy().markRecordSetAsCompleteLoaded("entityState"),configurator.getProxy().markRecordSetAsCompleteLoaded("priority"),configurator.getProxy().markRecordSetAsCompleteLoaded("severity"),configurator.getStateManager().set({id:"list",set:{state:{}}})},viewTests=[{preSetup:fnPreSetup,name:"should render valid markup view",test:function(){var data=this.data,$el=this.$el,$groups=$el.find("[role=group]");equals($groups.length,5,"Groups amount");for(var g=0;g<$groups.length;g++){var $groupTitle=$groups.eq(g);equals($groupTitle.find("[role=title]").text(),data.groups[g].title,"Group title"),equals($groupTitle.find("[role=counter]").text(),data.groups[g].items.length,"Group counter")}var $itemsGroups=$el.find("[role=list-inner]");for(var i=0;i<$itemsGroups.length;i++){var $group=$itemsGroups.eq(i),$trs=$group.find("> tr");for(var j=0;j<$trs.length;j++){var $tds=$trs.eq(j).find("td"),item=data.groups[i].items[j];equals($tds.length,7,"Amount of row cells"),equals($tds.eq(1).text(),item.id,"ID Data column");var $nameTd=$tds.eq(2).find("span").eq(0);equals($nameTd.text(),item.name,"Name Data column");if(item.tags.length){var $tagsTd=$tds.eq(2).find("span").eq(1);equals($tagsTd.text(),item.tags[0],"Tag Data column")}item.__type==="bug"?equals($tds.eq(3).text(),item.severity.name.toString(),"Severity Data column"):item.__type==="task"&&equals($tds.eq(3).text(),"","Priority Data column");var expEstimatedEffortText=item.effort.estimated+"&nbsp;"+item.effort.unit.shortName,actualEffortText=$tds.eq(4).find("span:first").html();equals(actualEffortText,expEstimatedEffortText,"Estimated effort"),item.effort.percentFromMaximum>0?(ok($tds.eq(5).find(".ui-progressbar__progress").attr("style").match(new RegExp("width:\\s*"+item.effort.percentFromMaximum+"%")),"Column progress width"),ok($tds.eq(5).find(".ui-progressbar__progress__indicator").attr("style").match(new RegExp("width:\\s*"+item.effort.percentComplete+"%")),"Column progress width")):equals($tds.eq(5).find(".ui-progressbar__progress").size(),0,"Progress bar should not be shown"),equals($tds.eq(6).find(".ui-assignment__group").length,item.assignments.groups.length,"Assignments items");var $assignmentGroups=$tds.eq(6).find(".ui-assignment__group");_.forEach(item.assignments.groups,function(group,k){var $group=$assignmentGroups.eq(k);equals($group.find(".ui-assignment__group__title").text(),group.role.name,"Group title");var $assignmentUsers=$group.find(".ui-assignment__user");equals($assignmentUsers.length,group.users.length,"Group users length"),_.forEach(group.users,function(user,m){var $user=$assignmentUsers.eq(m),user=group.users[m];equals($user.find("img").attr("src"),"/TP/Avatar.ashx?UserId="+user.id+"&size=24","User avatar"),equals($user.find("img").prop("title"),user.name,"User name")})})}}}},{name:"should save state",preSetup:fnPreSetup,test:function(){var data=this.data,$el=this.$el,state={},stateManager=configurator.getStateManager();$el.find(".tau-list__group__collapse:first").click(),stateManager.get({id:"list",fields:["state"],callback:function(data){state=data.state||{}}}),same(state,{"Open,Backlog":!0}),stateManager.unbind(this),ok($el.find(".tau-list__group__collapse:first").eq(1).hasClass("tau-list__group__collapse_collapsed_true")===!1,"state is initial")}},{name:"should allow to prioritize",preSetup:fnPreSetup,test:function(){var $el=this.$el,$group=$el.find("[role=group]:first"),$row=$group.find("[role=item]:first"),$nextRow=$row.next();this.service.registerSaveCommand({config:{id:31,$set:{beforeId:undefined,afterId:undefined},fields:["id"]},returnedData:{id:31}}),this.service.registerGetCommand({config:{id:31,fields:["id","numericPriority"]},returnedData:{id:31,numericPriority:34}}),$group.triggerHandler("sortstart",{item:$row});var $availableGroups=$el.find(".tau-list__group_available_true[role=group]");equals($availableGroups.length,2,"Available groups");var $unavailableGroups=$el.find(".tau-list__group_available_false[role=group]");equals($unavailableGroups.length,3,"Unvailable groups"),$row.insertAfter($nextRow),$group.triggerHandler("sortupdate",{item:$row}),$group.triggerHandler("sortstop"),$el=this.$el,$availableGroups=$el.find(".tau-list__group_available_true[role=group]"),equals($availableGroups.length,5,"Available groups are default"),$unavailableGroups=$el.find(".tau-list__group_available_false[role=group]"),equals($unavailableGroups.length,0,"Unavailable groups are switched off")}},{name:"should use available next states for groups",preSetup:fnPreSetup,test:function(){var $el=this.$el,$bugGroup=$el.find("[role=group]:eq(1)"),$bugRow=$bugGroup.find("[role=item]:first");$bugGroup.triggerHandler("sortstart",{item:$bugRow});var $availableGroups=$el.find(".tau-list__group_available_true[role=group]");equals($availableGroups.length,3,"Available groups use next states")}},{name:"should allow to change group",preSetup:fnPreSetup,test:function(){var $el=this.$el,$group=$el.find("[role=group]:first"),$nextGroup=$el.find("[role=group]").eq(4);$nextGroup.find(".tau-list__group__collapse").click(),equals($group.find("[role=counter]").text(),1,"Count started"),equals($nextGroup.find("[role=counter]").text(),1,"Count started");var $row=$group.find("[role=item]:first"),$nextRow=$nextGroup.find("[role=item]:first");this.service.registerSaveCommand({config:{id:31,$set:{beforeId:undefined,afterId:33},fields:["id"]},returnedData:{id:31}}),this.service.registerGetCommand({config:{id:31,fields:["id","numericPriority"]},returnedData:{id:31,numericPriority:34}}),this.service.registerSaveCommand({config:{id:31,$set:{entityState:{id:4}},fields:["id",{entityState:["id","name","isFinal"]}]},returnedData:{id:31,entityState:{id:4,name:"Done",isFinal:!0}}}),this.service.registerGetCommand({config:{id:31,fields:["id",{entityState:["id","name","isFinal"]}]},returnedData:{id:31,entityState:{id:4,name:"Done",isFinal:!0}}}),equals($row.hasClass("tau-list__table__row_isfinalstate_true"),!1,"Highlight not changed"),$group.triggerHandler("sortstart",{item:$row}),$row.insertAfter($nextRow),$group.triggerHandler("sortupdate",{item:$row}),$group.triggerHandler("sortstop"),$el=this.$el,$group=$el.find("[role=group]:first"),$nextGroup=$el.find("[role=group]").eq(4);var $row=$group.find("[role=item]:first"),$nextRow=$nextGroup.find("[role=item]:first");equals($group.find("[role=counter]").text(),0,"Count changed"),equals($nextGroup.find("[role=counter]").text(),2,"Count changed"),equals($nextGroup.find(".tau-list__table__row_isfinalstate_true").length,2,"Highlight changed"),equals($nextGroup.find("[role=item]").eq(0).find("td").eq(1).text(),33,"Order correct"),equals($nextGroup.find("[role=item]").eq(1).find("td").eq(1).text(),31,"Order correct")}},{name:"should allow to change group but no priority in closed group",preSetup:fnPreSetup,test:function(){var $el=this.$el,$group=$el.find("[role=group]:first"),$nextGroup=$el.find("[role=group]").eq(4);equals($group.find("[role=counter]").text(),1,"Count started"),equals($nextGroup.find("[role=counter]").text(),1,"Count started");var $row=$group.find("[role=item]:first"),$nextRow=$nextGroup.find("[role=item]:first");this.service.registerSaveCommand({config:{id:31,$set:{entityState:{id:4}},fields:["id",{entityState:["id","name","isFinal"]}]},returnedData:{id:31,entityState:{id:4,name:"Done",isFinal:!0}}}),equals($row.hasClass("tau-list__table__row_isfinalstate_true"),!1,"Highlight not changed"),$group.triggerHandler("sortstart",{item:$row}),$row.insertAfter($nextRow),$group.triggerHandler("sortupdate",{item:$row}),$group.triggerHandler("sortstop"),$el=this.$el,$group=$el.find("[role=group]:first"),$nextGroup=$el.find("[role=group]").eq(4),equals($group.find("[role=counter]").text(),0,"Count changed"),equals($nextGroup.find("[role=counter]").text(),2,"Count changed"),equals($nextGroup.find("[role=item]").eq(0).find("td").eq(1).text(),31,"Order correct depends on non-changed priority"),equals($nextGroup.find("[role=item]").eq(1).find("td").eq(1).text(),33,"Order correct depends on non-changed priority"),equals($el.find(".i-target").length,0,"No highlight")}},{name:"should allow to change group and ask to add comment",preSetup:fnPreSetup,test:function(){var $el=this.$el,$group=$el.find("[role=group]").eq(1),$nextGroup=$el.find("[role=group]").eq(3),$row=$group.find("[role=item]:first"),$nextRow=$nextGroup.find("[role=item]:first");$group.triggerHandler("sortstart",{item:$row}),$row.insertAfter($nextRow),$group.triggerHandler("sortupdate",{item:$row});var $popup=$row.tauBubble("widget");equals($popup.length,1,"Show popup"),ok(this.$el===$el,"don refresh"),$popup.find(":button:eq(1)").click(),ok(this.$el!==$el,"refresh"),$el=this.$el,$group=$el.find("[role=group]").eq(1),$nextGroup=$el.find("[role=group]").eq(3),$row=$group.find("[role=item]:first"),$nextRow=$nextGroup.find("[role=item]:first"),this.service.registerSaveCommand({config:{$set:{description:"fuck you",general:{id:41}},$include:["id","description","createDate","parentId",{owner:["id","firstName","lastName"]}],fields:["id"]},returnedData:{id:1}}),this.service.registerSaveCommand({config:{id:41,$set:{beforeId:undefined,afterId:665},fields:["id"]},returnedData:{id:41}}),this.service.registerGetCommand({config:{id:41,fields:["id","numericPriority"]},returnedData:{id:41,numericPriority:667}}),this.service.registerSaveCommand({config:{id:41,$set:{entityState:{id:44}},fields:["id",{entityState:["id","name","isFinal"]}]},returnedData:{id:41,entityState:{id:44,name:"In Testing",isFinal:!1}}}),$group.triggerHandler("sortstart",{item:$row}),$row.insertAfter($nextRow),$group.triggerHandler("sortupdate",{item:$row}),$popup=$row.tauBubble("widget"),equals($popup.length,1,"Show popup"),equals($popup.find("textarea").length,1,"Popup correct"),$popup.find("textarea").val("fuck you"),$popup.find("button:eq(0)").click(),ok($row.parents("[role=group]:first")[0]===$nextGroup[0],"Regroup"),this.service.verify()}}],componentConfig={context:{applicationContext:appContext},itemsDataProvider:BugsTasksItemsDataProvider,groupsDataProvider:BugsTasksGroupsDataProvider,groupBy:"entityState.name",orderBy:["entityState.id"],views:[{type:"grid.entity",group:{dataIndex:"name"}}]};fnCtxProcessor(componentConfig.context);var setup=commonSetup.create("[component.list][tasks_bugs]",dataToRegister,listComponent,componentConfig);componentSpecs.create(setup,context).viewShouldFollowDataComponentLifeCycle(fnPreSetup).viewShouldPassTests(viewTests).done()};return{run:innerRun}})