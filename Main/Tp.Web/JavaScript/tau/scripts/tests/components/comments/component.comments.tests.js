define(["Underscore","jQuery","tests/common/service.mock","tau/core/class","tau/configurator","tau/components/component.comments","tests/common/testData","tests/components/common/common.setup","tests/components/component.specs","tau/components/component.commentList","tau/components/component.comment","tau/components/component.comment.new.editor"],function(_,$,ServiceMock,Class,configurator,commentsComponent,testData,commonSetup,componentSpecs){var innerRun=function(){function generateTestData(){var refDataArr=testData.getDataForComments(),result=[];for(var i=0;i<refDataArr.length;i++)result.push($.extend(!0,{},refDataArr[i]));return result}function getDeleteButton($comment){var $delBtn=$comment.find("> .ui-comment-body > .ui-comment-heading > .ui-comment-menu > .delete");return $delBtn}function getEditButton($comment){var $editBtn=$comment.find("> .ui-comment-body > .ui-comment-heading > .ui-comment-menu > .edit");return $editBtn}function getReplyElement($comment){var $replyBtn=$comment.find("> .ui-comment-body > .ui-comment-heading > .ui-comment-menu > .reply");return $replyBtn}function shouldShowEditorForReply($targetComment){getReplyElement($targetComment).click();var $replyEditor=$targetComment.find("> .ui-comment-body > .ui-comment-reply > .ui-richeditor");return equals($replyEditor.size(),1,"Editor for reply is presented"),$replyEditor}function checkComment($el,commentData){commentData.isRequester?ok($el.find(">.ui-comment-body").hasClass("tau-comments-requester"),"Marked as comment from requestor"):ok(!$el.find(">.ui-comment-body").hasClass("tau-comments-requester"),"Not marked as comment from requestor"),equals($el.find(">.ui-comment-body >.ui-comment-heading > .ui-comment-name").text(),commentData.name,"Name is valid"),equals($el.find(">.ui-comment-body >.ui-comment-heading > .ui-comment-ago").text(),"("+commentData.age+")","Age is valid");var commentHtmlText=$el.find(">.ui-comment-body >.ui-comment-text").html().toLowerCase(),expectedHtmlText=$("<p>"+commentData.description+"</p>").html().toLowerCase();equals(commentHtmlText,expectedHtmlText,"Description is valid"),commentData.isOwnerComment&&ok($el.find(">.ui-comment-body").is(".ui-commets-comment-owner"),"Owner comment is valid")}function shouldShowEditorForAddingNewComment($el){var addCommentLink=$el.find(".ui-comments-add-link");equals(addCommentLink.size(),1,"Add comment link is added"),ok(addCommentLink.css("display")!=="none","Link is visible"),addCommentLink.click(),ok(addCommentLink.css("display")==="none","Link is hidden");var $editor=addCommentLink.next().find(".ui-richeditor");return $editor}function checkAddCommentLink($el){var addCommentLink=$el.find(".ui-comments-add-link");equals(addCommentLink.size(),1,"Add comment link is added"),ok(addCommentLink.css("display")!=="none","Link is visible"),addCommentLink.click(),ok(addCommentLink.css("display")==="none","Link is hidden");var $editor=addCommentLink.next().find(".ui-richeditor");equals($editor.size(),1,"Rich editor is introduced"),$editor.find(".ui-richeditor__controls__cancel").click(),ok(addCommentLink.css("display")!=="none","Link is visible again"),$editor=addCommentLink.next().find(".ui-richeditor"),equals($editor.size(),0,"Rich editor is removed")}function getCommentEditor($comment){return $comment.find(">.ui-comment-body >.ui-richeditor")}function getEditorSaveButton($editor){return $editor.find(".ui-richeditor__controls__save")}function getEditorCancelButton($editor){return $editor.find(".ui-richeditor__controls__cancel")}function clickDeleteAndCheckCancelThenConfirm($targetComment){var $deleteBtn=$targetComment.find("> .ui-comment-body > .ui-comment-heading > .ui-comment-menu > .delete");$deleteBtn.click();var $confirmation=$targetComment.find(".ui-comment-body .confirmation");equals($confirmation.size(),1,"Confirmation is displayed"),$confirmation.find(".cancel").click(),$confirmation=$targetComment.find(".ui-comment-body .confirmation"),equals($confirmation.size(),0,"Confirmation is removed"),$deleteBtn.click(),$confirmation=$targetComment.find(".ui-comment-body .confirmation"),equals($confirmation.size(),1,"Confirmation is displayed"),$confirmation.find(".ok").click()}function generatePreSetup(cmdArray){return function(fixture){var service=this.service=new ServiceMock;configurator.setService(service);var arrayCount=cmdArray.length;for(var i=0;i<arrayCount;i++){var item=cmdArray[i],command=item.command,itemSetup=item.setup||function(){},stub=item.stub||function(){};stub._test=this,itemSetup.call(this,command,item)}}}function generateGetRequestMock(expCmdArr){return{command:expCmdArr,setup:function(cmd){cmd._test=this,this.service.registerGetCommand(cmd)}}}function generateSaveRequestMock(expCmdArr){return{command:expCmdArr,setup:function(cmd){cmd._test=this,this.service.registerSaveCommand(cmd)}}}function generateRemoveRequestMock(expCmdArr){return{command:expCmdArr,setup:function(cmd){cmd._test=this,this.service.registerRemoveCommand(cmd)}}}function generateSavePreSetup(itemData,newDescription){newDescription=newDescription||"<p>Updated text</p>",itemData=itemData||_.clone(origData[0].comments[3]);var newId=itemData.id;return generatePreSetup([generateSaveRequestMock({config:{id:newId,$set:{description:newDescription,general:{id:152}},fields:afterSaveCommentFields},returnedData:_.extend(itemData,{description:newDescription}),preCheck:"isMarkedAsUpdating"})])}var data=generateTestData(),origData=generateTestData(),CURRENT_DATE=configurator.getCurrentDate(),expectedDataFromModel={items:[{id:450,parentId:null,avatar:"/TP/Avatar.ashx?UserId=13&size=32",name:"",description:"First Comment",age:"1 month ago",comments:[{id:451,parentId:450,avatar:"/TP/Avatar.ashx?UserId=256&size=32",name:"Andrew G.",description:"First reply to First Comment <img src='/TP/#Attachment.aspx?AttachmentID=12'/>",age:"2 hours ago",comments:[],deleted:!1,isRequester:!1},{id:452,parentId:450,avatar:"/TP/Avatar.ashx?UserId=254&size=32",name:"John B.",description:"Second reply to First Comment",age:"25 min ago",comments:[],deleted:!1,isRequester:!1}],deleted:!1,isRequester:!0},{id:453,parentId:null,avatar:"/TP/Avatar.ashx?UserId=255&size=32",name:"Tod B.",description:"Second comment",age:"23 days ago",comments:[{id:454,parentId:453,avatar:"/TP/Avatar.ashx?UserId=257&size=32",name:"Sandra R.",description:"Reply to second comment",age:"25 sec ago",comments:[],deleted:!1,isRequester:!1}],deleted:!1,isRequester:!1}]},afterSaveCommentFields=["id","description","createDate","parentId",{owner:["id","firstName","lastName","kind","avatarUri"]}],viewTests=[{name:"should render valid markup",test:function(){var $el=this.$el,rootComments=$el.find(".ui-all-comments > .ui-comment");equals(rootComments.length,2,"Count of root comments is valid");var comments=this.data.items;checkComment(rootComments.eq(0),comments[0]);var replaysOfFirstComment=rootComments.eq(0).find(".ui-comments > .ui-comment");equals(replaysOfFirstComment.length,2,"Count of replay on first comment is valid"),checkComment(replaysOfFirstComment.eq(0),comments[0].comments[0]),checkComment(replaysOfFirstComment.eq(1),comments[0].comments[1]);var replaysOfSecondComment=rootComments.eq(1).find(".ui-comments > .ui-comment");equals(replaysOfSecondComment.length,1,"Count of replay on second comment is valid"),checkComment(replaysOfSecondComment.eq(0),comments[1].comments[0]),checkAddCommentLink($el)}},{name:"should apply editable and deletable permissions",test:function(){var $el=this.$el,$comments=$el.find(".ui-all-comments .ui-comment");equals($comments.length,5,"Count of comments");for(var i=0,len=$comments.length-1;i<len;i++){var $commentBody=$comments.eq(i).find("> .ui-comment-body"),$menu=$commentBody.find(".ui-comment-heading > .ui-comment-menu ");ok($commentBody.hasClass("editable"),"Marked as editable"),ok($commentBody.hasClass("deletable"),"Marked as deletable"),equals($menu.find(".reply").length,1,"Reply button is added"),equals($menu.find(".edit").length,1,"Edit button is added"),equals($menu.find(".delete").length,1,"Delete button is added");var $replyEditorPlaceHolder=$commentBody.find(".ui-comment-reply > .ui-editor-placeholder");equals($replyEditorPlaceHolder.size(),1,"Place holder for reply is presented"),equals($replyEditorPlaceHolder.css("display"),"none","Reply placeholder display")}checkAddCommentLink($el)}},{name:"should save comment (success)",preSetup:generateSavePreSetup(),test:function(){var $el=this.$el,$targetComment=$el.find(".ui-comment").eq(4),$editBtn=$targetComment.find(".ui-comment-menu .edit");this.isMarkedAsUpdating=function(cmd){ok($targetComment.hasClass("updating"),"Marked as updating")},$editBtn.click();var $editor=getCommentEditor($targetComment);equals($editor.size(),1,"Editor is presented");var updatedText="<p>Updated text</p>";$editor.find("textarea").val(updatedText),getEditorSaveButton($editor).click(),$targetComment=this.$el.find(".ui-comment").eq(4);var $commentText=$targetComment.find("> .ui-comment-body > .ui-comment-text");equals($commentText.html().toLowerCase(),updatedText.toLowerCase(),"Comment text is updated"),ok(!$targetComment.children(".ui-comment-body").hasClass("updating"),"Not marked as updating"),equals(getCommentEditor($targetComment).length,0,"Count of editors"),ok(!$.contains($commentText[0],$editor[0]),"Editor is removed"),$editBtn=$targetComment.find(".ui-comment-menu .edit"),$editBtn.click(),$editor=getCommentEditor($targetComment),equals($editor.find("textarea").val().toLowerCase(),updatedText.toLowerCase(),"Template data is up to date")}},{name:"should reply to comment",preSetup:generatePreSetup([generateSaveRequestMock({config:{$set:{description:"<p>Updated text</p>",parentId:454,general:{id:152}},fields:afterSaveCommentFields},returnedData:{id:64,description:"<p>Updated text</p>",createDate:CURRENT_DATE,parentId:454,owner:{id:23,firstName:"Administrator",lastName:"Administrator",kind:"user",avatarUri:"/TP/Avatar.ashx?UserId=23&size="}},preCheck:"isMarkedAsUpdating"})]),test:function(){var $el=this.$el;configurator.setCurrentDate(CURRENT_DATE);var $targetComment=$el.find(".ui-comment").eq(4),$replyCommentEditor=shouldShowEditorForReply($targetComment);this.isMarkedAsUpdating=function(cmd){var $newCommentStub=$targetComment.find("> .ui-comments").children().last();ok($newCommentStub.hasClass("updating"),"Marked as updating");var $commentHeading=$newCommentStub.find("> .ui-comment-heading");equals($commentHeading.find("> .ui-comment-menu > .edit").size(),0,"Edit button"),equals($commentHeading.find("> .ui-comment-menu > .delete").size(),0,"Delete button")};var updatedText="<p>Updated text</p>";$replyCommentEditor.find("textarea").val(updatedText);var $replyBtn=getEditorSaveButton($replyCommentEditor);equals($replyBtn.text(),"Add Reply","Text of reply button"),$replyBtn.click();var $comment=this.$el.find(".ui-comment").eq(5),$commentBody=$comment.find("> .ui-comment-body"),$commentHeading=$commentBody.find("> .ui-comment-heading"),$commentAgo=$commentHeading.find("> .ui-comment-ago");equals($commentAgo.text(),"(Just added)","Creation date label"),equals($commentHeading.find("> .ui-comment-menu > .edit").size(),1,"Edit button"),equals($commentHeading.find("> .ui-comment-menu > .delete").size(),1,"Delete button");var $commentText=$commentBody.find("> .ui-comment-text");equals($commentText.html().toLowerCase(),updatedText.toLowerCase(),"Comment text is updated"),equals(getCommentEditor($comment).size(),0,"Count of editors"),ok(!$.contains($comment[0],$replyCommentEditor[0]),"Editor is removed")}},{name:"should cancel draft reply to comment",test:function(){var $el=this.$el,$targetComment=$el.find(".ui-comment").eq(4),$replyCommentEditor=shouldShowEditorForReply($targetComment),$cancelBtn=getEditorCancelButton($replyCommentEditor);$cancelBtn.click(),ok($replyCommentEditor.css("display")==="none","Editor is hidden")}},{name:"should has one editor instance opened for edit/reply/add comments",test:function(){var $el=this.$el,$targetComment=$el.find(".ui-comment").eq(4);ok(!0,"--------- Click reply ---------"),getReplyElement($targetComment).click();var $replyEditor=$targetComment.find("> .ui-comment-body > .ui-comment-reply > .ui-richeditor");equals($replyEditor.size(),1,"Editor for reply is presented"),ok($replyEditor.css("display")!=="none","Reply Editor is visible"),ok(!0,"--------- Click edit ---------"),getEditButton($targetComment).click(),ok($replyEditor.css("display")==="none","Reply Editor is hidden");var $editEditor=$targetComment.find("> .ui-comment-body > .ui-richeditor");equals($editEditor.size(),1,"Edit Editor is presented"),ok($editEditor.css("display")!=="none","Edit Editor is visible"),ok(!0,"--------- Click add comment link ---------"),checkAddCommentLink($el),ok($editEditor.css("display")==="none","Edit Editor is hidden")}},{name:"should support delete operation (comments tree leaf)",preSetup:generatePreSetup([generateRemoveRequestMock({config:{id:454,fields:["id"]},preCheck:"isMarkedAsDeleting"})]),test:function(){var $el=this.$el,$targetComment=$el.find(".ui-comment").eq(4);this.isMarkedAsDeleting=function(cmd){ok($targetComment.hasClass("deleting"),"Marked as deleting")},equals($el.find(".ui-comment").size(),5,"Amount of comments before delete"),clickDeleteAndCheckCancelThenConfirm($targetComment),equals(this.$el.find(".ui-comment").size(),4,"Amount of comments after delete")}},{name:"should support delete operation (parent comment)",preSetup:generateSavePreSetup(origData[0].comments[0],"DELETED"),test:function(){var $el=this.$el,$targetComment=$el.find(".ui-comment").eq(0);this.isMarkedAsUpdating=function(cmd){ok($targetComment.hasClass("updating"),"Marked as updating")},clickDeleteAndCheckCancelThenConfirm($targetComment),$targetComment=this.$el.find(".ui-comment").eq(0),equals(_.trim($targetComment.find(".ui-comment-body").html()),"DELETED","Text is changed")}},{name:"should add new comment",preSetup:generatePreSetup([generateSaveRequestMock({config:{$set:{description:"Just added comment",general:{id:data[0].id}},fields:afterSaveCommentFields},returnedData:_(_.clone(origData[0].comments[1])).extend({id:10,description:"Just added comment",createDate:CURRENT_DATE}),preCheck:"isMarkedAsUpdating"})]),test:function(){var $el=this.$el;configurator.setCurrentDate(CURRENT_DATE);var newData=_.clone(origData[0].comments[1]);_(newData).extend({id:10,description:"Just added comment",createDate:configurator.getCurrentDate()}),this.isMarkedAsUpdating=function(cmd){ok($el.find(".ui-all-comments").children().last().hasClass("updating"),"Marked as updating")};var $newCommentEditor=shouldShowEditorForAddingNewComment($el),origCommentsAmount=$el.find(".ui-comment").size();equals(origCommentsAmount,5,"Original amount of comments");var $commentField=$newCommentEditor.find("textarea");$commentField.val("Just added comment");var $addReplyBtn=getEditorSaveButton($newCommentEditor);$addReplyBtn.click();var newCommentsAmount=this.$el.find(".ui-comment").size();equals(newCommentsAmount,6,"New amount of comments");var $justAddedCommentElement=this.$el.find(".ui-comment").last();checkComment($justAddedCommentElement,{name:"Tod B.",description:newData.description,age:"Just added"}),checkAddCommentLink(this.$el)}},{name:"should mark comment as DELETED after new child comment adding",preSetup:generatePreSetup([generateSaveRequestMock({config:{$set:{description:"Just added comment",parentId:454,general:{id:data[0].id}},fields:afterSaveCommentFields},returnedData:_(_.clone(origData[0].comments[3])).extend({id:100,description:"Just added comment",createDate:configurator.getCurrentDate(),parentId:454})}),generateSaveRequestMock({config:{$set:{description:"DELETED",general:{id:152}},fields:afterSaveCommentFields,id:454},returnedData:_(_.clone(origData[0].comments[3])).extend({description:"DELETED"})})]),test:function(){var $el=this.$el,amount=$el.find(".ui-comment").size();equals(amount,5,"Amount before");var $targetComment=$el.find(".comment-id-454");equals(_.trim($targetComment.find(".ui-comment-text").eq(0).text()),"Reply to second comment","Original comment text");var $replyCommentEditor=shouldShowEditorForReply($targetComment);$replyCommentEditor.find("textarea").val("Just added comment"),getEditorSaveButton($replyCommentEditor).click(),equals(this.$el.find(".ui-comment").size(),6,"Amount after reply"),$targetComment=this.$el.find(".comment-id-454"),equals(_.trim($targetComment.find(".ui-comment-text").eq(0).text()),"Reply to second comment","Original comment text"),clickDeleteAndCheckCancelThenConfirm($targetComment);var newAmount=this.$el.find(".ui-comment").size();equals(newAmount,6,"Amount after delete"),$targetComment=this.$el.find(".comment-id-454"),equals(_.trim($targetComment.find(".ui-comment-body").html()),"DELETED","Text is changed")}},{name:"should delete empty comments branch when the last comment is being deleted",preSetup:generatePreSetup([generateSaveRequestMock({config:{$set:{parentId:454,description:"Just added comment",general:{id:data[0].id}},fields:afterSaveCommentFields},returnedData:_(_.clone(origData[0].comments[3])).extend({id:100,description:"Just added comment",createDate:configurator.getCurrentDate(),parentId:454})}),generateSaveRequestMock({config:{$set:{description:"DELETED",general:{id:152}},fields:afterSaveCommentFields,id:454},returnedData:_(_.clone(origData[0].comments[3])).extend({description:"DELETED"})}),generateRemoveRequestMock({config:{id:100,fields:["id"]}}),generateRemoveRequestMock({config:{id:454,fields:["id"]}})]),test:function(){var amount=this.$el.find(".ui-comment").size();equals(amount,5,"Amount before");var $targetComment=this.$el.find(".comment-id-454");equals(_.trim($targetComment.find(".ui-comment-text").eq(0).text()),"Reply to second comment","Original comment text");var $replyCommentEditor=shouldShowEditorForReply($targetComment);$replyCommentEditor.find("textarea").val("Just added comment"),getEditorSaveButton($replyCommentEditor).click(),equals(this.$el.find(".ui-comment").size(),6,"Amount after reply"),$targetComment=this.$el.find(".comment-id-454"),equals(_.trim($targetComment.find(".ui-comment-text").eq(0).text()),"Reply to second comment","Original comment text"),clickDeleteAndCheckCancelThenConfirm($targetComment);var newAmount=this.$el.find(".ui-comment").size();equals(newAmount,6,"Amount after delete"),$targetComment=this.$el.find(".comment-id-454"),equals(_.trim($targetComment.find(".ui-comment-body").html()),"DELETED","Text is changed");var $latestCommentInEmptyBranch=this.$el.find(".comment-id-100");clickDeleteAndCheckCancelThenConfirm($latestCommentInEmptyBranch),amount=this.$el.find(".ui-comment").size(),equals(amount,4,"Amount after removing comments branch")}},{name:"should apply ID:XXX replacement rule",preSetup:generatePreSetup([generateSaveRequestMock({config:{$set:{description:"ID:111 as well as the text id:123 should be replaced with link. And also <b>this</b>Id:777 and this Id:    777 and id:&nbsp; 111",general:{id:data[0].id}},fields:afterSaveCommentFields},returnedData:_(_.clone(origData[0].comments[1])).extend({id:10,description:"ID:111 as well as the text id:123 should be replaced with link. And also <b>this</b>Id:777 and this Id:    777 and id:&nbsp; 111",createDate:configurator.getCurrentDate()}),preCheck:"isMarkedAsUpdating"}),generateGetRequestMock({config:{id:"111",fields:["id","name",{entityType:["id","name"]}],silent:!0},returnedData:{id:111,name:"Entity 111",entityType:{id:1,name:"task"}}}),generateGetRequestMock({config:{id:"123",fields:["id","name",{entityType:["id","name"]}],silent:!0},returnedData:{id:123,name:"Entity 123",entityType:{id:1,name:"task"}}}),generateGetRequestMock({config:{id:"777",fields:["id","name",{entityType:["id","name"]}],silent:!0},returnedData:{id:777,name:"Entity 777",entityType:{id:1,name:"task"}}})]),test:function(){var self=this,$el=this.$el;this.isMarkedAsUpdating=function(cmd){ok($el.find(".ui-all-comments").children().last().hasClass("updating"),"Marked as updating")};var $newCommentEditor=shouldShowEditorForAddingNewComment($el),origCommentsAmount=$el.find(".ui-comment").size();equals(origCommentsAmount,5,"Original amount of comments");var $commentField=$newCommentEditor.find("textarea");$commentField.val("ID:111 as well as the text id:123 should be replaced with link. And also <b>this</b>Id:777 and this Id:    777 and id:&nbsp; 111");var $addReplyBtn=getEditorSaveButton($newCommentEditor);$addReplyBtn.click();var $lastComment=this.$el.find(".comment-id-10"),$links=$lastComment.find(".ui-comment-text a");equals($links.eq(0).html(),"#111&nbsp;Entity 111","Entity 111"),equals($links.eq(1).html(),"#123&nbsp;Entity 123","Entity 123"),equals($links.eq(2).html(),"#777&nbsp;Entity 777","Entity 777"),equals($links.eq(3).html(),"#777&nbsp;Entity 777","Entity 777"),equals($links.eq(4).html(),"#111&nbsp;Entity 111","Entity 111"),getEditButton($lastComment).click();var text=$lastComment.find("textarea").val();equals(text,"ID:111 as well as the text id:123 should be replaced with link. And also <b>this</b>Id:777 and this Id:    777 and id:&nbsp; 111","Original text (without links) is restored for edit"),$lastComment.find(".ui-richeditor__controls__cancel").click(),$links=$lastComment.find(".ui-comment-text a"),equals($links.length,5,"Entity links as are")}}],setup=commonSetup.create("[component.comments]",generateTestData,commentsComponent);componentSpecs.create(setup,{context:{type:"bug",id:data[0].id}}).viewShouldFollowDataComponentLifeCycle().viewShouldPassTests(viewTests).done()};return{run:innerRun}})