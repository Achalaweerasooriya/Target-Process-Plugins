define(["Underscore","tau/components/component.entityStateList","tests/components/common/common.setup","tests/components/component.specs","tests/common/modelConfig","tests/common/testData"],function(_,component,commonSetup,componentSpecs,modelConfig,testData){var innerRun=function(){function generatePreSetup(cmdArray){return function(fixture){fixture.mockRepository(this);var arrayCount=cmdArray.length;for(var i=0;i<arrayCount;i++){var item=cmdArray[i],command=item.command,stub=item.stub||_.bind(this.repository.execute,this.repository);stub._test=this,this.repositoryMock.expects().execute(command).andStub(stub)}}}var bugData=testData.getTestDataForState(),states=testData.getStatesForProcess(),repositoryMockData=[bugData,states],context={manualContext:!0,context:modelConfig.bug(bugData.id)};context.context.entity=bugData;var entity=_.extend(_.clone(bugData)),entityState=states.entityStates[4];entity.entityState.nextStates=entityState.nextStates;var expectedDataFromModel={states:[{id:6,name:"Fixed",isCommentRequired:!1},{id:7,name:"Invalid",isCommentRequired:!1},{id:8,name:"Closed",isCommentRequired:!0}],completed:!0,nullableValue:!1},expectedCommandsToStore=[[Similar.to({name:"get",type:"bug",config:Similar.to({id:bugData.id,fields:["id",Similar.to({entityState:["id"]})]})})],[Similar.to({name:"get",type:"entityState",config:Similar.to({id:entityState.id,fields:["id","name","isCommentRequired",Similar.to({nextStates:["id","name","isCommentRequired","numericPriority"]})]})})]],viewTests=[{name:"should render valid markup",preSetup:generatePreSetup([{command:expectedCommandsToStore[0]},{command:expectedCommandsToStore[1]}]),test:function(){var $el=this.$el;ok($el.find(".drop-down-list").length===1,"state-list container added"),ok($el.find(".drop-down-option").length===3,"state options count is correct"),ok($el.find(".drop-down-option:contains('Closed')").length===1,"state option name formed correctly")}},{name:"should save state on click",preSetup:generatePreSetup([{command:expectedCommandsToStore[0]},{command:expectedCommandsToStore[1]},{command:[Similar.to({name:"save",type:"bug",config:Similar.to({id:bugData.id,$set:Similar.to({entityState:Similar.to({id:7})})})})],stub:function(){}}]),test:function(evtArgs){var $el=this.$el;$el.find(".drop-down-option").eq(1).click()}},{name:"should save state with comment",preSetup:generatePreSetup([{command:expectedCommandsToStore[0]},{command:expectedCommandsToStore[1]},{command:[Similar.to({name:"save",type:"bug",config:Similar.to({id:bugData.id,$set:Similar.to({entityState:Similar.to({id:8}),comments:Similar.to([Similar.to({description:"Test comment"})])})})})],stub:function(){}}]),test:function(){var $el=this.$el;equals($el.find(".ui-entity-state-comment").size(),0,"No comments"),$el.find(".drop-down-option").eq(2).click(),equals($el.find(".ui-entity-state-comment").size(),1,"Comment input is open"),$el.find(".drop-down-option").eq(2).click(),equals($el.find(".ui-entity-state-comment").size(),1,"Comment input is open and only one");var $commentInputField=$el.find(".ui-entity-state-comment .ui-state-comment-field");equals($commentInputField.size(),1,"Comment field is presented"),$commentInputField.val("Test comment");var $saveButton=$el.find(".ui-entity-state-comment .button-group .save");equals($saveButton.size(),1,"Save button is presented"),$saveButton.click()}}],setup=commonSetup.create("[component.state]",repositoryMockData,component,{listType:"entityState"});componentSpecs.create(setup,context).viewShouldFollowDataComponentLifeCycle().modelShouldReturnData(expectedDataFromModel,expectedCommandsToStore).viewShouldPassTests(viewTests).done()};return{run:innerRun}})