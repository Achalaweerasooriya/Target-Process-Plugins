define(["Underscore","tau/components/component.entityStateList","tests/components/common/common.setup","tests/components/component.specs","tests/common/modelConfig","tests/common/testData"],function(_,a,b,c,d,e){var f=function(){function n(a){return function(b){b.mockRepository(this);var c=a.length;for(var d=0;d<c;d++){var e=a[d],f=e.command,g=e.stub||this.repository.execute.tauCreateDelegate(this.repository);g._test=this,this.repositoryMock.expects().execute(f).andStub(g)}}}var f=e.getTestDataForState(),g=e.getStatesForProcess(),h=[f,g],i={manualContext:!0,context:d.bug(f.id)};i.context.assignable=f;var j=_.extend(_.clone(f)),k=g.entityStates[4];j.entityState.nextStates=k.nextStates;var l={states:[{id:6,name:"Fixed",isCommentRequired:!1},{id:7,name:"Invalid",isCommentRequired:!1},{id:8,name:"Closed",isCommentRequired:!0}],completed:!0,nullableValue:!1},m=[[Similar.to({name:"get",type:"bug",config:Similar.to({id:f.id,fields:["id",Similar.to({entityState:["id"]})]})})],[Similar.to({name:"get",type:"entityState",config:Similar.to({id:k.id,fields:["id","name","isCommentRequired",Similar.to({nextStates:["id","name","isCommentRequired","numericPriority"]})]})})]],o=[{name:"should render valid markup",preSetup:n([{command:m[0]},{command:m[1]}]),test:function(){var a=this.$el;ok(a.find(".drop-down-list").length===1,"state-list container added"),ok(a.find(".drop-down-option").length===3,"state options count is correct"),ok(a.find(".drop-down-option:contains('Closed')").length===1,"state option name formed correctly")}},{name:"should save state on click",preSetup:n([{command:m[0]},{command:m[1]},{command:[Similar.to({name:"save",type:"bug",config:Similar.to({id:f.id,$set:Similar.to({entityState:Similar.to({id:7})})})})],stub:function(){}}]),test:function(a){var b=this.$el;b.find(".drop-down-option").eq(1).click()}},{name:"should save state with comment",preSetup:n([{command:m[0]},{command:m[1]},{command:[Similar.to({name:"save",type:"bug",config:Similar.to({id:f.id,$set:Similar.to({entityState:Similar.to({id:8}),comments:Similar.to([Similar.to({description:"Test comment"})])})})})],stub:function(){}}]),test:function(){var a=this.$el;equals(a.find(".ui-entity-state-comment").size(),0,"No comments"),a.find(".drop-down-option").eq(2).click(),equals(a.find(".ui-entity-state-comment").size(),1,"Comment input is open"),a.find(".drop-down-option").eq(2).click(),equals(a.find(".ui-entity-state-comment").size(),1,"Comment input is open and only one");var b=a.find(".ui-entity-state-comment .ui-state-comment-field");equals(b.size(),1,"Comment field is presented"),b.val("Test comment");var c=a.find(".ui-entity-state-comment .button-group .save");equals(c.size(),1,"Save button is presented"),c.click()}}],p=b.create("[component.state]",h,a,{listType:"entityState"});c.create(p,i).viewShouldFollowDataComponentLifeCycle().modelShouldReturnData(l,m).viewShouldPassTests(o).done()};return{run:f}})