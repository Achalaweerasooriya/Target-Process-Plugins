define(["Underscore","jQuery","tau/configurator","tau/components/component.assignmentsList","tests/common/testCase","tests/common/componentConfigCreator","tests/common/testData.Generator"],function(_,$,configurator,AssignmentsListComponent,TestCase,ConfigCreator,testDataGenerator){var innerRun=function(){var generator=new testDataGenerator;generator.clear(),generator.initDefaultData();var storyList=generator.getUserStories(),data=generator.getData(),roles=generator.getRoles(),entity=storyList[3],entityId=entity.id,configCreator=new ConfigCreator;configCreator.setEntityIDAndType(entityId,entity.__type),configCreator.setSelectedProjects([data.selectByType("project")[0]]),configCreator.setProcesses(data.selectByType("process"));var config=configCreator.getConfig(),testCase=new TestCase("[component.assignmentsList]");config.editable=!0,testCase.initModule({componentConfig:config,data:data},AssignmentsListComponent),testCase.test("should not refresh on save assignment from other entity",function(){var $el=this.element,refreshWasAdded=!1;this.component.on("refresh",function(){refreshWasAdded=!0},this);var store=configurator.getStore(),roleId=roles[1].id,assignmentId=storyList[0].assignments[0].id;this.serviceMock.registerSaveCommand({config:{id:assignmentId,$set:{role:{id:roleId}},fields:["id"]},returnedData:{id:assignmentId}}),store.save("assignment",{id:assignmentId,$set:{role:{id:roleId}}}).done(),this.component.removeAllListeners(this),equal(refreshWasAdded,!1,"Refresh is not fired")}),testCase.test("should not refresh on remove assignment from other entity",function(){var refreshWasAdded=!1;this.component.on("refresh",function(){refreshWasAdded=!0},this);var store=configurator.getStore(),assignmentId=storyList[0].assignments[0].id;this.serviceMock.registerRemoveCommand({config:{id:assignmentId,fields:["id"]},returnedData:{id:assignmentId}}),store.remove("assignment",{id:assignmentId}).done(),this.component.removeAllListeners(this),equal(refreshWasAdded,!1,"Refresh is not fired")}),testCase.test("should not refresh on save roleEffort from other entity",function(){var $el=this.element,refreshWasAdded=!1;this.component.on("refresh",function(){refreshWasAdded=!0},this);var store=configurator.getStore(),roleId=roles[1].id,roleEffortId=storyList[0].roleEfforts[0].id;this.serviceMock.registerSaveCommand({config:{id:roleEffortId,$set:{effortToDo:7},fields:["id"]},returnedData:{id:roleEffortId}}),store.save("roleEffort",{id:roleEffortId,$set:{effortToDo:7}}).done(),this.component.removeAllListeners(this),equal(refreshWasAdded,!1,"Refresh is not fired")}),testCase.test("should not refresh when description of entity changed",function(){var refreshWasAdded=!1;this.component.on("refresh",function(){refreshWasAdded=!0},this);var store=configurator.getStore(),$set={description:"New Description"};this.serviceMock.registerSaveCommand({config:{id:entityId,$set:$set,fields:["id"]},returnedData:_.extend({id:entityId},$set)}),store.save(entity.__type,{id:entityId,$set:$set}).done(),this.component.removeAllListeners(this),equal(refreshWasAdded,!1,"Refresh is not fired")})};return{run:innerRun}})