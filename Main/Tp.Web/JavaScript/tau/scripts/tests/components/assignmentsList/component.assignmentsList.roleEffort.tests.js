define(["tests/common/testCase","tests/common/componentConfigCreator","tau/components/component.assignmentsList","tests/common/testData.Generator","tau/core/tau"],function(TestCase,ComponentConfigCreator,assignmentsListComponent,TestDataGenerator,tau){var innerRun=function(){var dataGenerator=new TestDataGenerator;dataGenerator.initDefaultData();var storyList=dataGenerator.getUserStories(),data=dataGenerator.getData(),qaRole=data.find(function(entity){return entity.__type==="role"&&entity.name==="QA Engineer"});qaRole.hasEffort=!1;var entity=storyList[3],entityId=entity.id,configCreator=new ComponentConfigCreator;configCreator.setEntityIDAndType(entityId,entity.__type),configCreator.setSelectedProjects([data.selectByType("project")[0]]),configCreator.setProcesses(data.selectByType("process"));var config=configCreator.getConfig(),testCase=new TestCase("[component.assignmentsList]");testCase.initModule({componentConfig:config,data:data},assignmentsListComponent,function(){}),testCase.test("should not allow to edit role if role effort has not effort",function(){var qaRoleHeader=this.element.find('.group[roleid="'+qaRole.id+'"] .role-header');equal(qaRoleHeader.find(".role-effort .effort").size(),0,"QA have not effort"),equal(qaRoleHeader.find(".role-effort .remain").size(),0,"QA have not remain")})};return{run:innerRun}})