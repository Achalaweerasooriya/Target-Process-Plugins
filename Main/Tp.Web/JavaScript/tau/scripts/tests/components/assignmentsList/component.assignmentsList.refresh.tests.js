define(["Underscore","jQuery","tau/configurator","tau/components/component.assignmentsList","tests/common/testCase","tests/common/componentConfigCreator","tests/common/testData.Generator"],function(a,b,c,d,e,f,g){var h=function(){var a=new g;a.clear(),a.initDefaultData();var b=a.getUserStories(),h=a.getData(),i=a.getRoles(),j=a.getEntityStates(),k=b[3],l=k.id,m=new f;m.setEntityIDAndType(l,k.__type),m.setSelectedProjects([h.selectByType("project")[0]]),m.setProcesses(h.selectByType("process"));var n=m.getConfig(),o=new e("[component.assignmentsList]");n.editable=!0,o.initModule({componentConfig:n,data:h},d),o.test("should refresh when state of entity changed",function(){var a=this.element,d=!1;this.component.on("refresh",function(){d=!0},this);var e=c.getStore(),f=i[1].id,g=b[0].assignments[0].id,h=j[1];this.serviceMock.registerSaveCommand({config:{id:l,$set:{entityState:{id:h.id}},fields:["id","endDate",{roleEfforts:["id","effort","effortToDo"],list:!0}]},returnedData:{id:l,entityState:{id:h.id}}}),e.save(k.__type,{id:l,$set:{entityState:{id:h.id}}}).done(),this.component.removeAllListeners(this),equal(d,!0,"Refresh is fired")}),o.test("should refresh when dependent data is changed [effort|effortToDo|effortCompleted|tasks-count|tasks-effort-sum|tasks-effortToDo-sum]",function(){var a=this.element,b=this,d=0,e=0;this.component.on("refresh",function(){++d},this);var f=function(a,f){var g={id:l};g[a]=f,b.serviceMock.registerRefreshCommand({config:{id:l,fields:["id",a]},returnedData:g}),c.getStore().refresh(k.__type,{id:l,fields:[a]}).done(),equals(d,++e,"Refresh is fired once only")};f("effort",100),f("effortToDo",100),f("effortCompleted",100),f("tasks-count",100),f("tasks-effort-sum",100),f("tasks-effortToDo-sum",100),this.component.removeAllListeners(this),this.serviceMock.verify(!0)})};return{run:h}})