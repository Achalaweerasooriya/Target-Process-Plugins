define(["Underscore","jQuery","tau/configurator","tau/components/component.assignmentsList","tests/common/testCase","tests/common/componentConfigCreator","tests/common/testData.Generator"],function(_,$,configurator,AssignmentsListComponent,TestCase,ConfigCreator,testDataGenerator){var innerRun=function(){var generator=new testDataGenerator;generator.clear(),generator.initDefaultData();var storyList=generator.getUserStories(),data=generator.getData(),roles=generator.getRoles(),states=generator.getEntityStates(),entity=storyList[3],entityId=entity.id,configCreator=new ConfigCreator;configCreator.setEntityIDAndType(entityId,entity.__type),configCreator.setSelectedProjects([data.selectByType("project")[0]]),configCreator.setProcesses(data.selectByType("process"));var config=configCreator.getConfig(),testCase=new TestCase("[component.assignmentsList]");config.editable=!0,testCase.initModule({componentConfig:config,data:data},AssignmentsListComponent,function(){configurator.enableRules()}),testCase.test("should refresh when state of entity changed",function(){var $el=this.element,refreshWasAdded=!1;this.component.on("refresh",function(){refreshWasAdded=!0},this);var store=configurator.getStore(),roleId=roles[1].id,assignmentId=storyList[0].assignments[0].id,newState=states[1];this.serviceMock.registerSaveCommand({config:{id:entityId,$set:{entityState:{id:newState.id}},fields:["id","endDate",{roleEfforts:["id","effort","effortToDo"],list:!0},"tasks-effortToDo-sum",{feature:["id","effortToDo","effortCompleted","userStories-count"]},{iteration:["id","userStories-effortToDo-sum","userStories-effortCompleted-sum"]},{release:["id","bugs-effortToDo-sum","bugs-effortCompleted-sum","userStories-effortToDo-sum","userStories-effortCompleted-sum",{features:["id","effortToDo","effortCompleted","userStories-count"],list:!0}]}]},returnedData:{id:entityId,entityState:{id:newState.id}}}),store.save(entity.__type,{id:entityId,$set:{entityState:{id:newState.id}}}).done(),this.component.removeAllListeners(this),equal(refreshWasAdded,!0,"Refresh is fired")}),testCase.test("should refresh when dependent data is changed [effort|effortToDo|effortCompleted|tasks-count|tasks-effort-sum|tasks-effortToDo-sum]",function(){var $el=this.element,self=this,refreshCallCount=0,refreshCallCountExpected=0;this.component.on("refresh",function(){++refreshCallCount},this);var checkFieldRefresh=function(fieldName,fieldValue){var returnedData={id:entityId};returnedData[fieldName]=fieldValue,self.serviceMock.registerRefreshCommand({config:{id:entityId,fields:["id",fieldName]},returnedData:returnedData}),configurator.getStore().refresh(entity.__type,{id:entityId,fields:[fieldName]}).done(),equals(refreshCallCount,++refreshCallCountExpected,"Refresh is fired once only")};checkFieldRefresh("effort",100),checkFieldRefresh("effortToDo",100),checkFieldRefresh("effortCompleted",100),checkFieldRefresh("tasks-count",100),checkFieldRefresh("tasks-effort-sum",100),checkFieldRefresh("tasks-effortToDo-sum",100),this.component.removeAllListeners(this),this.serviceMock.verify(!0)}),testCase.test("should refresh when user avatar changed",function(){var $el=this.element,self=this,refreshCallCount=0,refreshCallCountExpected=1;this.component.on("refresh",function(){refreshCallCount++},this),configurator.getStore().registerWithEvents([{id:254,__type:"user",avatarUri:"sda/as/"}]),equals(refreshCallCount,refreshCallCountExpected,"Refresh is fired once only"),this.component.removeAllListeners(this),this.serviceMock.verify(!0)}),testCase.test("should refresh when user append tau bubble",function(){var $el=this.element,self=this,$bubbleTarget;this.component.on("refresh",function(){$bubbleTarget=$el.find(".tau-bubble-target")},this),configurator.getStore().registerWithEvents([{id:254,__type:"user",avatarUri:"sda/as/"}]),equals(!$bubbleTarget.length,!1,"Refresh is fired once only"),this.component.removeAllListeners(this),this.serviceMock.verify(!0)})};return{run:innerRun}})