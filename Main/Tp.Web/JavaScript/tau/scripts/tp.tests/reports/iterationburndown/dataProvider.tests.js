require(["tp/reports/burndown/dataProvider"],function(DataProvider){(function(){module("data provider tests",{setup:function(){this.dataProvider=new DataProvider,this.dataProvider.dataRepository=new DataRepositoryMock},teardown:function(){}}),test("should map data",function(){var that=this;this.dataProvider.initialize({},function(){equals(that.dataProvider.data[0].total.remained,19,"first day remained is correct"),equals(that.dataProvider.data[0].total.added,2,"first day added is correct"),equals(that.dataProvider.data[0].total.spent,1,"first day spent is correct"),equals(that.dataProvider.data[0].total.removed,0,"first day removed is correct"),equals(that.dataProvider.data[0].total.remainedForNextDay,20,"first day removed for next day is correct"),equals(that.dataProvider.data[0].effort.length,3,"first day effort is correct"),equals(that.dataProvider.data[1].total.remained,20,"second day remained is correct"),equals(that.dataProvider.data[1].total.added,5,"second day added is correct"),equals(that.dataProvider.data[1].total.spent,5,"second day spent is correct"),equals(that.dataProvider.data[1].total.removed,2,"second day removed is correct"),equals(that.dataProvider.data[1].total.remainedForNextDay,18,"second day removed for next day is correct"),equals(that.dataProvider.data[1].effort.length,3,"second day effort is correct"),equals(that.dataProvider.data[2].total.remained,18,"third day remained is correct"),equals(that.dataProvider.data[2].total.added,5,"third day added is correct"),equals(that.dataProvider.data[2].total.spent,0,"third day spent is correct"),equals(that.dataProvider.data[2].total.removed,13,"third day removed is correct"),equals(that.dataProvider.data[2].total.remainedForNextDay,10,"third day removed for next day is correct"),equals(that.dataProvider.data[2].effort.length,2,"third day effort is correct"),ok(that.dataProvider.data[3].total==null,"last day total is null"),ok(that.dataProvider.data[3].effort==null,"last day effort is null")})}),test("should calculate y upper bound",function(){var that=this;this.dataProvider.initialize({},function(){equals(that.dataProvider._getYUpperBound(),30,"y upper bound calculated correctly")})}),test("should calculate y axis values",function(){var that=this;this.dataProvider.initialize({},function(){var yValues=that.dataProvider._getYAxisValues();for(var i=0;i<yValues.length;i++)equals(yValues[i],i*3,i+" value is correct")})}),test("should get y axis",function(){var that=this;this.dataProvider.initialize({},function(){var axis=that.dataProvider.getYAxis();equals(axis.label(5),5,"label returns correct result"),equals(axis.max,30,"max is correct"),equals(axis.count,10,"count is correct");for(var i=0;i<axis.values.length;i++)equals(axis.values[i],i*3,i+" value is correct")})}),test("should get x axis values count",function(){var that=this;this.dataProvider.initialize({},function(){var count=that.dataProvider._getXAxisValuesCount();equals(count,4,"x axis values count is correct")})}),test("should get x axis",function(){var that=this;this.dataProvider.initialize({},function(){var axis=that.dataProvider.getXAxis();equals(axis.label(1),"28 Mar","label is correct"),equals(axis.count,4,"count is correct"),equals(axis.max,4,"max is correct");for(var i=0;i<axis.values.length;i++)equals(axis.values[i],i,i+" value is correct")})}),test("should get x value",function(){var that=this;this.dataProvider.initialize({},function(){equals(that.dataProvider.getXValue(that.dataProvider.data[1]),1,"x value is correct")})}),test("should get y value",function(){var data={total:{remained:4}},that=this;this.dataProvider.initialize({},function(){equals(that.dataProvider.getYValue(data),4,"y value is correct")})})})()})