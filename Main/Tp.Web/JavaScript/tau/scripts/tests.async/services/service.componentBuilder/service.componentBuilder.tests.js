define(["tau/service.container","tau/services/service.componentBuilder"],function(ServiceContainer,Service){var testcase={name:"service.componentBulder","create by scheme simple":function(test){var sc=new ServiceContainer,service=new Service(sc);service.create({type:"label",text:"fuck off"}).done(function(bus){bus.on("afterRender",function(evt,renderData){var $el=renderData.element;test.equals($el.length,1,"create label component"),test.equals($el.text(),"fuck off","create label component"),test.done()}),bus.initialize()})},"create by scheme path":function(test){var sc=new ServiceContainer,service=new Service(sc);service.create({path:"tau/components/component.label",text:"fuck off"}).done(function(bus){bus.on("afterRender",function(evt,renderData){var $el=renderData.element;test.equals($el.length,1,"create label component"),test.equals($el.text(),"fuck off","create label component"),test.done()}),bus.initialize()})},"create by scheme and conf":function(test){var sc=new ServiceContainer,service=new Service(sc);service.create({type:"label"},{text:"fuck off"}).done(function(bus){bus.on("afterRender",function(evt,renderData){var $el=renderData.element;test.equals($el.length,1,"create label component"),test.equals($el.text(),"fuck off","create label component"),test.done()}),bus.initialize()})},"create by scheme string and conf":function(test){var sc=new ServiceContainer,service=new Service(sc);service.create("tau/components/component.label",{text:"fuck off"}).done(function(bus){bus.on("afterRender",function(evt,renderData){var $el=renderData.element;test.equals($el.length,1,"create label component"),test.equals($el.text(),"fuck off","create label component"),test.done()}),bus.initialize()})}};return testcase})