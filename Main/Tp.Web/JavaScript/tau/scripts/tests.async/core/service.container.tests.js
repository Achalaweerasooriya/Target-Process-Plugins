define(["Underscore","jQuery","tests.async/testkit/testkit","tau/service.container"],function(_,$,TestKit,ServiceContainer){var testKit=new TestKit,testcase={name:"service.container"};return testcase["create child shared store"]=testKit.test(function(test){var sc=new ServiceContainer,store=sc.getStore(),child=sc.createChild();test.equals(child===sc,!1,"new container"),test.equals(child.getStore()===sc.getStore(),!0,"should use the same store"),test.equals(child.getStore().config.proxy===sc.getStore().config.proxy,!0,"same proxy"),test.equals(child.getStore().config.proxy.db!=null,!0,"db"),test.equals(child.getStore().config.proxy.db===sc.getStore().config.proxy.db,!0,"same db");var featureService=sc.getFeaturesService();test.equals(featureService.isEnabled("same.feature"),!1,"return false isEnabled feature, when undefined"),featureService.setEnabled("same.feature"),test.equals(featureService.isEnabled("same.feature"),!0,"enabled feature"),featureService.setDisabled("same.feature"),test.equals(featureService.isEnabled("same.feature"),!1,"enabled feature");var sameChildFeatureService=child.getFeaturesService();test.equals(featureService===sameChildFeatureService,!0,"should inherit parent's featureService"),test.equals(sameChildFeatureService.isEnabled("same.feature"),!1,"inherited feature");var childFeatureService=child.setFeaturesService({"same.feature":!0});test.equals(featureService===childFeatureService,!1,"should reset own featureService"),test.equals(childFeatureService.isEnabled("same.feature"),!0,"new value for feature"),test.done()}),testcase})