define(["Underscore","jQuery","tests.async/testkit/testkit","tau/models/dependencyInjection/dependencyInjection.container"],function(_,$,TestKit,Container){var testcase={name:"dependencyInjection.container tests"};return testcase["should define services, options and compile"]=function(test){var configurator=new Container;configurator.setOption("dummy.option",123),configurator.define("dummy.service",function(container){return"mimimi"}),configurator.compile(),test.equals(configurator.get("dummy.service"),"mimimi","Compile"),test.equals(_.isFunction(configurator.getDummyService),!0,"Compile"),test.equals(configurator.getDummyService(),"mimimi","Compile"),test.equals(_.isFunction(configurator.setDummyService),!0,"Compile"),configurator.setDummyService("bebebe"),test.equals(configurator.getDummyService(),"bebebe","Compile"),configurator.setOption("dummy.option",123),test.equals(configurator.getOption("dummy.option"),123,"Options"),configurator.setOptions({"dummy.option2":111}),test.equals(configurator.getOption("dummy.option2"),111,"Options"),test.done()},testcase["should define services recursive"]=function(test){var configurator=new Container;configurator.setOption("dummy.option",123),configurator.define("dummy.output",function(container){return{process:function(str){return"output "+str}}}),configurator.define("dummy.service",function(container){var opt=this.getOption("dummy.option")+" is so dummy";return this.get("dummy.output").process(opt)}),configurator.compile(),test.equals(configurator.getDummyService(),"output 123 is so dummy","Compile"),test.done()},testcase})