define(["Underscore","jQuery","tests.async/testkit/testkit.store","./data","tau/models/board.plus/model.board.plus.grid","tau/core/bus","tau/utils/utils.fixturesLoader.store","tau/slice/api"],function(_,$,TestKit,data,BoardModel,Bus,Dump,SliceApi){var testKit=new TestKit,pagingData=null;testKit.registerSetup("fixtures",function(test,next){if(test.get("real")===!1)return test.done(),!1;var store=test.get("configurator").getStore();test.set("store",store);if(!pagingData){pagingData=$.Deferred();var loader=new Dump({store:store,real:!0,commandType:"bulk"});loader.load(data(),function(err,result){if(err)pagingData.reject(err);else{var data=result.data,projectID=data.project.p_scrum.id;store.get("context",{projectId:[projectID],fields:["acid"]},{success:function(r){data.context=r.data[0],pagingData.resolve(data)}}).done()}})}test.set("pagingData",pagingData),pagingData.done(function(r){test.set("pagingData",r),next()})});var testcase={name:"paging model for board.plus.grid"},getDefinition=function(){return{x:{types:["Release"]},y:{types:["Feature"]},cells:{types:["UserStory"]}}},getSliceConfig=function(test){var deferred=$.Deferred(),data=test.get("pagingData"),store=test.get("configurator").getStore(),definition=getDefinition();if(test.get("real")===!1)throw"stubs not used";return _.extend(definition,{global:{acid:data.context.acid}}),deferred.resolve({definition:definition,store:store}),deferred},createPageTestCase=function(testConfig){testcase[testConfig.name]=testKit.test(function(test){var bus=new Bus({"queue.bus":!0}),model=new BoardModel({bus:bus}),$info=$.Deferred(),$paging=$.Deferred();bus.on("board.paging.settings",function(evt){var settings=evt.data;if(testConfig.asserts){var r=testConfig.asserts(test,settings);r?$paging=r:$paging.resolve({})}else $paging.resolve({})}),bus.on("model.sliceInfo.retrieved",function(evt){var settings=evt.data;if(testConfig.infoAsserts){var r=testConfig.infoAsserts(test,settings);r?$info=r:$info.resolve({})}else $info.resolve({})}),$.when($paging,$info).done(function(){test.done()}),getSliceConfig(test).done(function(sliceConfig){var sliceDefinition=_.deepClone(sliceConfig.definition),$definitionDeferred=$.Deferred();if(testConfig.definition){var $d=testConfig.definition(sliceDefinition,test);$d?$definitionDeferred=$d:$definitionDeferred.resolve(sliceDefinition)}else $definitionDeferred.resolve(sliceDefinition);$definitionDeferred.done(function(d){model.fire("board.configuration.ready",d),model.fire("configurator.ready",test.get("configurator")),model.fire("acid.ready",d.global.acid),model.fire("model.get.sliceInfo")})})})};return createPageTestCase({name:"one page for x and y",definition:function(definition){_.extend(definition.x,{filter:"?name is 'r[1]'"}),_.extend(definition.y,{filter:"?release.name is 'r[1]'"})},asserts:function(test,pageSettings){test.equals(pageSettings.x.currentPage,0,"current page is correct"),test.equals(pageSettings.x.totalPages,1,"total pages is correct"),test.equals(pageSettings.x.isFirst,!0,"is first page"),test.equals(pageSettings.y.isFirst,!0,"is first page"),test.equals(pageSettings.x.isLast,!0,"is last page"),test.equals(pageSettings.y.isLast,!0,"is last page"),test.equals(pageSettings.y.currentPage,0,"current page is correct"),test.equals(pageSettings.y.totalPages,1,"total pages is correct")}}),createPageTestCase({name:"incorrect definition works stable",definition:function(definition){_.extend(definition.x,{filter:"?ddd df d"}),_.extend(definition.y,{filter:"?dsf sdf dsf"})},asserts:function(test,pageSettings){test.equals(pageSettings.x.currentPage,0,"current page is correct"),test.equals(pageSettings.x.totalPages,1,"total pages is correct"),test.equals(pageSettings.x.isFirst,!0,"is first page"),test.equals(pageSettings.y.isFirst,!0,"is first page"),test.equals(pageSettings.x.isLast,!0,"is last page"),test.equals(pageSettings.y.isLast,!0,"is last page"),test.equals(pageSettings.y.currentPage,0,"current page is correct"),test.equals(pageSettings.y.totalPages,1,"total pages is correct")}}),createPageTestCase({name:"one page for y",definition:function(definition){delete definition.x,_.extend(definition.y,{filter:"?release.name is 'r[1]'"})},asserts:function(test,pageSettings){test.equals(pageSettings.y.isFirst,!0,"is first page"),test.equals(pageSettings.y.isLast,!0,"is last page"),test.equals(pageSettings.y.currentPage,0,"current page is correct"),test.equals(pageSettings.y.totalPages,1,"total pages is correct")}}),createPageTestCase({name:"one page for x",definition:function(definition){_.extend(definition.x,{filter:"?name is 'r[1]'"}),delete definition.y},asserts:function(test,pageSettings){test.equals(pageSettings.x.currentPage,0,"current page is correct"),test.equals(pageSettings.x.totalPages,1,"total pages is correct"),test.equals(pageSettings.x.isFirst,!0,"is first page"),test.equals(pageSettings.x.isLast,!0,"is last page"),test.equals(pageSettings.y.isNull,!0,"y is not defined")}}),createPageTestCase({name:"first page for x,y",infoAsserts:function(test,pageSettings){test.equals(pageSettings.x.currentPage,0,"x: current page is correct"),test.equals(pageSettings.x.isFirst,!0,"x: is first page"),test.equals(pageSettings.x.isLast,!1,"x: is not last page"),test.equals(pageSettings.y.currentPage,0,"y: current page is correct"),test.equals(pageSettings.y.isFirst,!0,"y: is first page"),test.equals(pageSettings.y.isLast,!1,"y: is not last page")},asserts:function(test,pageSettings){test.equals(pageSettings.x.currentPage,0,"x: current page is correct"),test.equals(pageSettings.x.totalPages,3,"x: total pages is correct"),test.equals(pageSettings.x.isFirst,!0,"x: is first page"),test.equals(pageSettings.x.isLast,!1,"x: is not last page"),test.equals(pageSettings.y.currentPage,0,"y: current page is correct"),test.equals(pageSettings.y.totalPages,3,"y: total pages is correct"),test.equals(pageSettings.y.isFirst,!0,"y: is first page"),test.equals(pageSettings.y.isLast,!1,"y: is not last page")}}),createPageTestCase({name:"no existing page for x,y",definition:function(definition){definition.page={x:100,y:100}},infoAsserts:function(test,pageSettings){test.equals(pageSettings.x.currentPage,0,"x: current page is correct"),test.equals(pageSettings.x.isFirst,!0,"x: is first page"),test.equals(pageSettings.x.isLast,!1,"x: is not last page"),test.equals(pageSettings.y.currentPage,0,"y: current page is correct"),test.equals(pageSettings.y.isFirst,!0,"y: is first page"),test.equals(pageSettings.y.isLast,!1,"y: is not last page")},asserts:function(test,pageSettings){test.equals(pageSettings.x.currentPage,0,"x: current page is correct"),test.equals(pageSettings.x.totalPages,3,"x: total pages is correct"),test.equals(pageSettings.x.isFirst,!0,"x: is first page"),test.equals(pageSettings.x.isLast,!1,"x: is not last page"),test.equals(pageSettings.y.currentPage,0,"y: current page is correct"),test.equals(pageSettings.y.totalPages,3,"y: total pages is correct"),test.equals(pageSettings.y.isFirst,!0,"y: is first page"),test.equals(pageSettings.y.isLast,!1,"y: is not last page")}}),createPageTestCase({name:"second page for x",definition:function(definition){definition.page={x:1,y:0}},asserts:function(test,pageSettings){test.equals(pageSettings.x.currentPage,1,"x: current page is correct"),test.equals(pageSettings.x.totalPages,3,"x: total pages is correct"),test.equals(pageSettings.x.total,25,"x: total pages is correct"),test.equals(pageSettings.x.isFirst,!1,"x: is not first page"),test.equals(pageSettings.x.isLast,!1,"x: is not last page")}}),createPageTestCase({name:"last page for x",definition:function(definition){definition.page={x:2,y:0}},asserts:function(test,pageSettings){test.equals(pageSettings.x.currentPage,2,"x: current page is correct"),test.equals(pageSettings.x.totalPages,3,"x: total pages is correct"),test.equals(pageSettings.x.isFirst,!1,"x: is not first page"),test.equals(pageSettings.x.isLast,!0,"x: is last page")}}),createPageTestCase({name:"no existing focus for x,y",definition:function(definition){definition.page={x:100,y:100},definition.focus={x:["-1"],y:["-2"]}},infoAsserts:function(test,pageSettings){test.equals(pageSettings.x.currentPage,0,"x: current page is correct"),test.equals(pageSettings.x.isFirst,!0,"x: is first page"),test.equals(pageSettings.x.isLast,!1,"x: is not last page"),test.equals(pageSettings.y.currentPage,0,"y: current page is correct"),test.equals(pageSettings.y.isFirst,!0,"y: is first page"),test.equals(pageSettings.y.isLast,!1,"y: is not last page")},asserts:function(test,pageSettings){test.equals(pageSettings.x.currentPage,0,"x: current page is correct"),test.equals(pageSettings.x.totalPages,3,"x: total pages is correct"),test.equals(pageSettings.x.isFirst,!0,"x: is first page"),test.equals(pageSettings.x.isLast,!1,"x: is not last page"),test.equals(pageSettings.y.currentPage,0,"y: current page is correct"),test.equals(pageSettings.y.totalPages,3,"y: total pages is correct"),test.equals(pageSettings.y.isFirst,!0,"y: is first page"),test.equals(pageSettings.y.isLast,!1,"y: is not last page")}}),createPageTestCase({name:"focus causes no paging for x",definition:function(definition){var $d=$.Deferred(),slice=new SliceApi({definition:definition,base64:!0});return slice.x().done(function(r){definition.page={x:1,y:1};var items=r.data.items.slice(1,15),x=_.pluck(items,"x");definition.focus={x:x,y:[]},$d.resolve(definition)}),$d},infoAsserts:function(test,pageSettings){test.equals(pageSettings.x.currentPage,0,"x: current page is correct"),test.equals(pageSettings.x.isFirst,!0,"x: is first page"),test.equals(pageSettings.x.isLast,!0,"x: is last page")},asserts:function(test,pageSettings){test.equals(pageSettings.x.currentPage,0,"x: current page is correct"),test.equals(pageSettings.x.totalPages,1,"x: total pages is correct"),test.equals(pageSettings.x.total,14,"x: total axis count is correct"),test.equals(pageSettings.x.isFirst,!0,"x: is first page"),test.equals(pageSettings.x.isLast,!0,"x: is last page"),test.equals(pageSettings.y.currentPage,1,"y: current page is correct"),test.equals(pageSettings.y.totalPages,3,"y: total pages is correct"),test.equals(pageSettings.y.total,49,"y: total pages is correct"),test.equals(pageSettings.y.isFirst,!1,"y: is not first page"),test.equals(pageSettings.y.isLast,!1,"y: is not last page")}}),testcase})