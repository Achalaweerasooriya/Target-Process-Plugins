define(["tau/storage/api","Underscore","jQuery","tests.async/testkit/testkit.store","tau/core/class","tau/storage/url.resolver"],function(Storage,_,$,TestKit,Class,resolver){var testKit=new TestKit;testKit.registerSetup("storage",function(test,next){var storageConfig={};test.get("real")===!1&&(storageConfig.service=function(config){var deferred=$.Deferred();return deferred.resolve(null),deferred});var TestStorage=Storage.extend({urlsToCall:{},init:function(config){var self=this;self._super(_.cloneDeep(config));var service=self.config.service;self.config.service=function(c){var url=c.url;return self.urlsToCall.hasOwnProperty(url)||(self.urlsToCall[url]=[]),self.urlsToCall[url].push(c),service(c)}},signUpOnFail:function($d){return $d.fail(function(r){test.fail("storage error:"+r.data.responseText),test.done()}),$d},select:function(){var $d=this._super.apply(this,arguments);return this.signUpOnFail($d)},_deferredResolved:function(){try{this._super.apply(this,arguments)}catch(e){test.fail("failure:"+e.message),test.done()}},data:function(){var $d=this._super.apply(this,arguments);return this.signUpOnFail($d)}}),storage=new TestStorage(storageConfig);test.set("storage",storage),next()});var testcase={name:"[storage] api"};return testcase["returns null for non-exisiting settings"]=testKit.test(function(test){test.get("storage").data(testKit.unique("ui"),"useAwseomeViews").done(function(r){test.ok(r.data===null,"null by default"),test.done()})}),testcase["posting data"]=testKit.test(function(test){var storage=test.get("storage"),$group=testKit.unique("ui"),$key="    me, I love it";storage.data($group,$key,{publicData:{color:"red"},userData:{love:"forever"}}).done(function(r){storage.data($group,$key).done(function(r){test.ok(r.data),test.equals(r.data.publicData.color,"red"),test.equals(r.data.userData.love,"forever"),test.same(r.value,{color:"red",love:"forever"},"data merged"),test.done()})})}),testcase["select only one field"]=testKit.test(function(test){var storage=test.get("storage"),$group=testKit.unique("ui");storage.data($group,{name:"super",f:"1",a:"black"}).done(function(){storage.data($group,{scope:"public",publicData:{name:"puper",f:"2"},userData:{a:"white"}}).done(function(){storage.select($group,{$where:{scope:"private"},$fields:["userData.name","userData.a as color"]}).done(function(r){test.equals(r.data.length,1);var data=r.data[0]||{};test.equals(data.name,"super"),test.equals(data.color,"black"),test.done()})})})}),testcase["remove storage"]=testKit.test(function(test){var storage=test.get("storage"),$group=testKit.unique("ui");storage.data($group,{name:"super",f:"1",a:"black"}).done(function(r){storage.remove($group,{$key:r.data.key}).done(function(r){test.equals(r.data,null,"Empty data on remove"),test.done()})})}),testcase["nothing in storage after remove"]=testKit.test(function(test){var storage=test.get("storage"),$group=testKit.unique("ui");storage.data($group,{name:"super",f:"1",a:"black"}).done(function(r){var $key=r.data.key;storage.remove($group,{$key:$key}).done(function(r){storage.data($group,$key).done(function(r){test.equals(r.data,null,"Empty data on remove"),test.done()})})})}),testcase["find some"]=testKit.test(function(test){var storage=test.get("storage"),$group=testKit.unique("ui");storage.data($group,{name:"super",f:"1",a:"black"}).done(function(){storage.data($group,{scope:"public",publicData:{name:"puper",f:"2"},userData:{a:"white"}}).done(function(){storage.select($group,{$where:{"userData.a":'"black"'},$fields:["userData.name","userData.a as color"]}).done(function(r){test.equals(r.data.length,1);var data=r.data[0]||{};test.equals(data.name,"super"),test.equals(data.color,"black"),test.done()})})})}),testcase["two selects - one call"]=testKit.test(function(test){var storage=test.get("storage"),$group=testKit.unique("ui");storage.data($group,{name:"super",f:"1",a:"black"}).done(function(r){var $key=r.data.key,selectConfig={$where:{"userData.a":'"black"'},$fields:["userData.name","userData.a as color"]},urlsCount=_.keys(storage.urlsToCall).length;$.when(storage.select($group,selectConfig),storage.select($group,selectConfig)).done(function(){test.equals(urlsCount+1,_.keys(storage.urlsToCall).length,"one call for two parallel selects"),test.done()})})}),testcase["group calls are refreshed on delete"]=testKit.test(function(test){var storage=test.get("storage"),$group=testKit.unique("ui");storage.data($group,{name:"super",f:"1",a:"black"}).done(function(r){var $key=r.data.key,selectConfig={$where:{"userData.a":'"black"'},$fields:["userData.name","userData.a as color"]};storage.select($group,selectConfig).done(function(r){test.equals(1,r.data.length,"one data item selected"),storage.remove($group,{key:$key}).done(function(){storage.select($group,selectConfig).done(function(r){test.equals(0,r.data.length,"no items found"),test.done()})})})})}),testcase["group calls are refreshed on update"]=testKit.test(function(test){var storage=test.get("storage"),$group=testKit.unique("ui");storage.data($group,{name:"super",f:"1",a:"black"}).done(function(r){var $key=r.data.key,selectConfig={$where:{"userData.a":'"black"'},$fields:["userData.name","userData.a as color"]};storage.select($group,selectConfig).done(function(r){test.equals(r.data.length,1),storage.data($group,$key,{a:"white"}).done(function(){storage.select($group,selectConfig).done(function(r){test.equals(0,r.data.length),test.done()})})})})}),testcase["auto convert data values in data"]=testKit.test(function(test){var storage=test.get("storage"),$group=testKit.unique("ui");storage.data($group,{name:"super",f:{a:{b:1}}}).done(function(r){test.equals(r.value.f.a.b,1,"deserizied in good way"),test.done()})}),testcase["no double calls for same data"]=testKit.test(function(test){var storage=test.get("storage"),$group=testKit.unique("ui");storage.data($group,{name:"super"}).done(function(r){var $key=r.data.key;storage.data($group,$key).done(function(){storage.data($group,$key).done(function(v){var urls=storage.urlsToCall,url=resolver.resolve({$group:$group,$key:$key});test.equals((urls[url]||[]).length,0,"too much calls"),test.ok(_.isEmpty(v.data.publicData)),test.done()})})})}),testcase["save causes reforming"]=testKit.test(function(test){var storage=test.get("storage"),$group=testKit.unique("ui");storage.data($group,{name:"super"}).done(function(r){var $key=r.data.key;storage.data($group,$key,{surname:"puper"}).done(function(){storage.data($group,$key).done(function(v){var urls=storage.urlsToCall,url=resolver.resolve({$group:$group,$key:$key});test.equals((urls[url]||[]).length,1,"too much calls"),test.ok(_.isEmpty(v.data.publicData)),test.equals(v.value.name,"super"),test.equals(v.value.surname,"puper"),test.done()})})})}),testcase["get all data for group"]=testKit.test(function(test){var storage=test.get("storage"),$group=testKit.unique("ui"),$1="first",$2="second";storage.data($group,{name:"super",f:1}).done(function(){storage.data($group,{name:"puper",f:2}).done(function(){storage.data($group).done(function(r){test.equals(r.data.length,2),test.done()})})})}),testcase["recurrent access"]=testKit.test(function(test){var storage=test.get("storage"),$group=testKit.unique("ui");$.when(storage.data($group,{name:"super 1"}),storage.data($group,{name:"super 2"})).done(function(r){test.done()})}),testcase["should provide event interface and fire on error"]=testKit.test(function(test){var storage=test.get("configurator").getRestStorage();test.equals(_.isFunction(storage.on),!0,"interface"),storage.on("error",function(evt){var err=evt.data;test.ok(err.message,"has message"),test.done()}),storage.data("211_)+!@#$#$%","3234",{publicData:{color:"234234"},userData:{love:"forever"}}).done()}),testcase})