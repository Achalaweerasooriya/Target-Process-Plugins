define(["Underscore","jQuery","tau/core/event","tau/ui/extensions/board.plus/ui.board.plus.utils","tests.async/testkit/testkit.component.board","tau/components/component.board.plus"],function(_,$,Event,BoardPlusUtils,TestKit,ComponentBoardPlus){var testDataCfg={boardSize:1,cardsPerCell:62},testKit=new TestKit(ComponentBoardPlus,{viewMode:"board",zoomLevel:5,x:{types:["release"],filter:"?It is not None"},y:{types:["feature"],filter:"?It is not None"}},testDataCfg),testcase={name:"component.board.plus.board.operations"},getTestCardId=function(i){return"b64_AAA_"+i+"_test"},fireOperationEvent=function(test,options){var cardData=options.cardData||{data:{id:options.id,type:"UserStory",name:options.name||"TestUS_"+options.id},id:getTestCardId(options.id),type:"UserStory",orderingValue:options.orderingValue};test.get("componentBus").fire("operation."+options.operation,{options:{forceAppend:options.forceAppend},items:[{data:cardData,location:options.location,x:options.x,y:options.y}]})};return testcase["should handle appended cards under [show more] link correctly"]=testKit.test(function(test){var bus=test.get("bus"),EXPECTED_TESTS_COUNT=9;test.expect(EXPECTED_TESTS_COUNT);var testFlow={bus:bus,"bus view.build.skeleton[0]+view.skeleton.built[0]+view.cell.skeleton.built[2]":function(e,$0,$1,evtCellSkeleton){var $cellSkeleton=evtCellSkeleton.element,$cards=$cellSkeleton.find(".i-role-card");test.equals($cards.size(),25,"Cards count");var $showMoreAction=$cellSkeleton.siblings(".i-role-cell-paging-more"),nextOrderingValue=$showMoreAction.data("nextOrderingValue");test.equals($showMoreAction.size(),1,"Show more link is added");var $cardsNotInCell=$cellSkeleton.siblings(".i-role-card");test.equals($cardsNotInCell.size(),0,"No cards under [show more] link");var d=$cellSkeleton.data();fireOperationEvent(test,{id:1,operation:"added",forceAppend:!0,orderingValue:1+nextOrderingValue,x:d.x,y:d.y})},"bus view.cell.skeleton.built[2] + operation.execute.done[0]":function(e,evtCellSkeleton){var $cellSkeleton=evtCellSkeleton.element,$addedCard=$cellSkeleton.siblings(".i-role-cell-paging-more").find(".i-role-card[data-id="+getTestCardId(1)+"]");test.equals($addedCard.size(),1,"Card is added under [show more] link");var $noCardInside=$cellSkeleton.find(".i-role-card[data-id="+getTestCardId(1)+"]");test.equals($noCardInside.size(),0,"There is no card inside the cell");var $cellSlot=$cellSkeleton.parent(),d=$cellSkeleton.data(),$more=$cellSlot.find(".i-role-cell-paging-more"),nextOrderingValue=$more.data("nextOrderingValue");fireOperationEvent(test,{id:2,operation:"added",orderingValue:2+nextOrderingValue,x:d.x,y:d.y})},"bus view.cell.skeleton.built[2] + operation.execute.done[1]":function(e,evtCellSkeleton){var $cellSkeleton=evtCellSkeleton.element,d=$cellSkeleton.data(),$cellSlot=$cellSkeleton.parent(),$addedCard=$cellSlot.find(".i-role-card[data-id="+getTestCardId(2)+"]");test.equals($addedCard.size(),0,"Card should not has visible update");var $more=$cellSlot.find(".i-role-cell-paging-more"),nextOrderingValue=$more.data("nextOrderingValue");fireOperationEvent(test,{id:2,operation:"updated",orderingValue:2+nextOrderingValue,x:d.x,y:d.y})},"bus view.cell.skeleton.built[2] + operation.execute.done[2]":function(e,evtCellSkeleton){var $cellSkeleton=evtCellSkeleton.element,d=$cellSkeleton.data(),$cellSlot=$cellSkeleton.parent(),$addedCard=$cellSlot.find(".i-role-card[data-id="+getTestCardId(2)+"]");test.equals($addedCard.size(),0,"Card is out of visible scope");var $more=$cellSlot.find(".i-role-cell-paging-more"),nextOrderingValue=$more.data("nextOrderingValue"),$lastCard=$cellSkeleton.find(".i-role-card").last(),newOrderingValue=nextOrderingValue-(nextOrderingValue-$lastCard.data("orderingValue"))/2;fireOperationEvent(test,{id:1,operation:"updated",orderingValue:newOrderingValue,x:d.x,y:d.y})},"bus view.cell.skeleton.built[2] + operation.execute.done[3]":function(e,evtCellSkeleton){var $cellSkeleton=evtCellSkeleton.element,$cellSlot=$cellSkeleton.parent(),$addedCard=$cellSlot.find(".i-role-card[data-id="+getTestCardId(1)+"]");test.equals($addedCard.size(),1,"Card is present in cell scope");var expected=$cellSkeleton.find(".i-role-card").last()[0],actual=$addedCard[0];test.equals(expected,actual,"Card is moved to the end of cards list"),test.done()}};Event.subscribeOn(testFlow)}),testcase["should cleanup duplicates on [show more]"]=testKit.test(function(test){var bus=test.get("bus"),EXPECTED_TESTS_COUNT=10;test.expect(EXPECTED_TESTS_COUNT);var testFlow={bus:bus,"bus slice.ready[0] + view.cell.skeleton.built[2]":function(e,evtSlice,evtCellSkeleton){var self=this,slice=evtSlice.slice,$cellSkeleton=evtCellSkeleton.element,cfg={$take:1,$skip:26,x:$cellSkeleton.data("x"),y:$cellSkeleton.data("y")};slice.cell(cfg).done(function(r){test.ok(r.data.items.length>0,"Cell should contain more cards");var dataItem=r.data.items[0].dynamic.items[0];test.ok(dataItem!==null,"Next data item is exists"),test.equals($cellSkeleton.find(".i-role-card[data-id="+dataItem.id+"]").size(),0,"Next data item is not present in current cards set"),self.bus.fire("test.nextCard.dataItem",r.data.items[0].dynamic.items[0])})},"bus test.nextCard.dataItem + view.cell.skeleton.built[2]":function(e,dataItem,evtCellSkeleton){var $cellSkeleton=evtCellSkeleton.element,$cards=$cellSkeleton.find(".i-role-card");test.equals($cards.size(),25,"Cards count");var $showMoreAction=$cellSkeleton.siblings(".i-role-cell-paging-more"),nextOrderingValue=$showMoreAction.data("nextOrderingValue");test.equals($showMoreAction.size(),1,"Show more link is added");var $cardsNotInCell=$cellSkeleton.siblings(".i-role-cell-paging-more").find(".i-role-card");test.equals($cardsNotInCell.size(),0,"No cards under [show more] link");var d=$cellSkeleton.data();fireOperationEvent(test,{cardData:dataItem,operation:"added",forceAppend:!0,x:d.x,y:d.y})},"bus test.nextCard.dataItem + view.cell.skeleton.built[2] + operation.execute.done[0]":function(e,dataItem,evtCellSkeleton){var $cellSkeleton=evtCellSkeleton.element,$showMorePanel=$cellSkeleton.siblings(".i-role-cell-paging-more"),$addedCard=$showMorePanel.find(".i-role-card[data-id="+dataItem.id+"]");test.equals($addedCard.size(),1,"Card is added under [show more] link");var $noCardInside=$cellSkeleton.find(".i-role-card[data-id="+dataItem.id+"]");test.equals($noCardInside.size(),0,"There is no given card inside the cell");var d=$cellSkeleton.data(),$more=$showMorePanel.find(".i-role-cell-paging-more-link");$more.click()},"bus view.cell.skeleton.built[2] > test.nextCard.dataItem > view.cell.skeleton.element.afterUpdate":function(e,evtCellSkeleton,dataItem){var $cellSkeleton=evtCellSkeleton.element,$showMorePanel=$cellSkeleton.siblings(".i-role-cell-paging-more"),$appendedCards=$showMorePanel.find(".i-role-card");test.equals($appendedCards.size(),0,"There are no appended cards (duplicates)");var $givenCard=$cellSkeleton.find(".i-role-card[data-id="+dataItem.id+"]");test.equals($givenCard.size(),1,"Given card is inside the cell now"),test.done()}};Event.subscribeOn(testFlow)}),testcase["should prevent duplicates on comet flood"]=testKit.test(function(test){var bus=test.get("bus"),EXPECTED_TESTS_COUNT=8;test.expect(EXPECTED_TESTS_COUNT);var testFlow={bus:bus,"bus view.build.skeleton[0]+view.skeleton.built[0]+view.cell.skeleton.built[2]":function(e,$0,$1,evtCellSkeleton){var $cellSkeleton=evtCellSkeleton.element,$cards=$cellSkeleton.find(".i-role-card");test.equals($cards.size(),25,"Cards count");var $showMoreAction=$cellSkeleton.siblings(".i-role-cell-paging-more"),nextOrderingValue=$showMoreAction.data("nextOrderingValue");test.equals($showMoreAction.size(),1,"Show more link is added");var $cardsNotInCell=$showMoreAction.find(".i-role-card");test.equals($cardsNotInCell.size(),0,"No cards under [show more] link");var d=$cellSkeleton.data(),operationEventArg={id:1,operation:"added",forceAppend:!0,orderingValue:1+nextOrderingValue,x:d.x,y:d.y};fireOperationEvent(test,operationEventArg),fireOperationEvent(test,operationEventArg)},"bus view.cell.skeleton.built[2] + operation.execute.done[1]":function(e,evtCellSkeleton){var $cellSkeleton=evtCellSkeleton.element,$noCardInside=$cellSkeleton.find(".i-role-card[data-id="+getTestCardId(1)+"]");test.equals($noCardInside.size(),0,"There is no card inside the cell");var $showMorePanel=$cellSkeleton.siblings(".i-role-cell-paging-more"),$addedCard=$showMorePanel.find(".i-role-card[data-id="+getTestCardId(1)+"]");test.equals($addedCard.size(),1,"Should add only one card under [show more] link"),this.bus.fire("test.updateAfterAdd")},"bus test.updateAfterAdd + view.cell.skeleton.built[2]":function(e,$0,evtCellSkeleton){var $cellSkeleton=evtCellSkeleton.element,d=$cellSkeleton.data(),$showMoreAction=$cellSkeleton.siblings(".i-role-cell-paging-more"),nextOrderingValue=$showMoreAction.data("nextOrderingValue"),operationEventArg={id:1,name:"updated card",operation:"updated",forceAppend:!1,orderingValue:1+nextOrderingValue,x:d.x,y:d.y};fireOperationEvent(test,operationEventArg)},"bus test.updateAfterAdd + view.cell.skeleton.built[2] + operation.execute.done[2]":function(e,$0,evtCellSkeleton){var $cellSkeleton=evtCellSkeleton.element,$noCardInside=$cellSkeleton.find(".i-role-card[data-id="+getTestCardId(1)+"]");test.equals($noCardInside.size(),0,"There is no card inside the cell");var $showMorePanel=$cellSkeleton.siblings(".i-role-cell-paging-more"),$addedCard=$showMorePanel.find(".i-role-card[data-id="+getTestCardId(1)+"]");test.equals($addedCard.size(),1,"Card should stay on their place under [show more] link");var actualText=$addedCard.find(".i-role-name").text();test.equals(actualText,"updated card","Card under [show more] should be updated"),test.done()}};Event.subscribeOn(testFlow)}),testcase["should add/update/remove axes"]=testKit.test(function(test){var bus=test.get("bus"),EXPECTED_TESTS_COUNT=16;test.expect(EXPECTED_TESTS_COUNT);var testFlow={bus:bus,"bus model.sliceInfo.retrieved[0] + view.build.skeleton[0] + view.skeleton.built[0] + view.cell.skeleton.built[2]":function(e,sliceData,$0,evtSkeleton,evtCellSkeleton){var $skeleton=evtSkeleton.element,$cell=evtCellSkeleton.element,axisMarkDataItem=_(sliceData.marksY).last(),d=axisMarkDataItem.dynamic.items[0],$axisMarkCell=$skeleton.find("#y"+axisMarkDataItem.y+"-"),actualText=$axisMarkCell.find(".i-role-name").text();test.equals(actualText,d.data.name,"Axis name before change");var dataItem=_.deepClone(d);dataItem.data.name="TEST_NAME",fireOperationEvent(test,{cardData:dataItem,operation:"updated",location:"y",y:axisMarkDataItem.y})},"bus model.sliceInfo.retrieved[0] + view.skeleton.built[0] + operation.execute.done[0]":function(e,sliceData,evtSkeleton){var $skeleton=evtSkeleton.element,axisMarkDataItem=_(sliceData.marksY).last(),d=axisMarkDataItem.dynamic.items[0],$axisMarkCell=$skeleton.find("#y"+axisMarkDataItem.y+"-"),actualText=$axisMarkCell.find(".i-role-name").text();test.equals(actualText,"TEST_NAME","Axis name after update");var dataItem=_.deepClone(d),$cells=$skeleton.find('.i-role-cell[data-y="'+axisMarkDataItem.y+'"]');test.ok($cells.find(".i-role-card").size()>0,"Has cards"),test.ok($cells.siblings(".i-role-cell-paging-more").size()>0,"Has show more links");var $holder=$cells.parent(".i-role-cellholder");$holder.addClass("tau-selected").addClass("tau-selected_y"),test.ok($holder.hasClass("tau-selected"),"Has tau-selected css class before remove"),test.ok($holder.hasClass("tau-selected_y"),"Has tau-selected_y css class before remove"),fireOperationEvent(test,{cardData:dataItem,operation:"deleted",location:"y",y:axisMarkDataItem.y})},"bus model.sliceInfo.retrieved[0] + view.skeleton.built[0] + operation.execute.done[1]":function(e,sliceData,evtSkeleton){var $skeleton=evtSkeleton.element,axisMarkDataItem=_(sliceData.marksY).last(),d=axisMarkDataItem.dynamic.items[0],$cells=$skeleton.find('.i-role-cell[data-y="'+axisMarkDataItem.y+'"]'),$markedAsRemoved=$cells.filter(".tau-cellaxis__removed");test.equals($cells.size(),$markedAsRemoved.size(),"All axis marks are grayed out"),test.equals($cells.find(".i-role-card").size(),0,"All cards are removed"),test.equals($cells.siblings(".i-role-cell-paging-more").size(),0,"All show more links are removed");var $holder=$cells.parent(".i-role-cellholder");test.ok(!$holder.hasClass("tau-selected"),"tau-selected css class is disabled"),test.ok(!$holder.hasClass("tau-selected_y"),"tau-selected_y css class is disabled")},"bus model.sliceInfo.retrieved[0] + operation.execute.done[1] + notification[0]":function(e,sliceData,$0,n){test.ok(n.$node!==null,"Notification node for [delete] is created");var $refreshLink=n.$node.find(".i-role-refresh-action");test.equals($refreshLink.size(),1,"Refresh link is created");var axisMarkDataItem=_(sliceData.marksY).last(),d=axisMarkDataItem.dynamic.items[0],dataItem=_.deepClone(d);fireOperationEvent(test,{cardData:dataItem,operation:"added",location:"y",y:axisMarkDataItem.y})},"bus operation.execute.done[2] + notification[1]":function(e,$0,n){test.ok(n.$node!==null,"Notification node for [add] is created");var $refreshLink=n.$node.find(".i-role-refresh-action");test.equals($refreshLink.size(),1,"Refresh link is created"),$refreshLink.click()},"bus refresh[0]":function(e){test.ok(!0,"Board is forced to refresh"),test.done()}};Event.subscribeOn(testFlow)}),testcase})