define(["Underscore","tests.async/testkit/testkit.component","tau/components/component.label","tau/service.container","tau/components/extensions/customField/extension.customField.multipleEntities.count.label.setter","tau/utils/utils.fixturesLoader.store"],function(_,TestKit,Label,ServiceContainer,ExtensionUnderTest,DumpLoader){var testKit=new TestKit(Label);testKit.registerSetup("fixtures",function(test,next){var Constants=test.get("constants"),entityTypes={us:{id:Constants.EntityTypes.USERSTORY.id,name:"userStory"}},practices={planning:{id:Constants.Practices.PLANNING.id}},processes={scrum:{name:"scream"+parseInt(Math.random()*1e11),practices:["planning"],customFields:[{name:"MultiField",fieldType:"MultipleEntities",entityType:{id:Constants.EntityTypes.USERSTORY.id}},{name:"TextField",fieldType:"Text",entityType:{id:Constants.EntityTypes.USERSTORY.id}}]}},projects={p_scrum:{name:"Project Scrum"+parseInt(Math.random()*1e11),process:"scrum"}},userStories={us1:{name:"US1",entityType:"us",project:"p_scrum",customFields:[{name:"MultiField",value:"192 userstory,400 task"}]},us2:{name:"US2",entityType:"us",project:"p_scrum"},us3:{name:"US3",entityType:"us",project:"p_scrum"},us4:{name:"US4",entityType:"us",project:"p_scrum"}},fixtures={practices:practices,entityTypes:entityTypes,processes:processes,projects:projects,userStories:userStories};test.set("fixtures",fixtures),next()}),testKit.registerSetup("fixtures.load",function(test,next){var loader=new DumpLoader({store:test.get("configurator").getStore(),real:test.get("real"),commandType:"bulk"});loader.load(test.get("fixtures"),function(err,result){if(err)next(err);else{var newCustomFieldValue=result.data.userStory.us2.id+" userstory,"+result.data.userStory.us3.id+" userstory,"+result.data.userStory.us4.id+" userstory";result.data.userStory.us1.customFields[0].value=newCustomFieldValue,test.get("configurator").getStore().save("userStory",{id:result.data.userStory.us1.id,fields:["id","customFields"],$set:{customFields:[{name:"MultiField",value:newCustomFieldValue}]}}).done(function(data){test.set("data",result.data),next()})}})}),testKit.registerSetup("componentBus",function(test,next){var testData=test.get("data"),componentConfig={context:{configurator:test.get("configurator"),getTimeTrackingPolicies:function(){return[]}},extensions:[ExtensionUnderTest],text:"some label text",customField:{name:"MultiField",type:"MultipleEntities"}};test.set("componentBus",test.get("componentClass").create(componentConfig)),next()}),testKit.registerSetup("component.initialize",function(test,next){var testData=test.get("data");test.get("componentBus").initialize({context:{entity:testData.userStory.us1,applicationContext:{processes:[testData.process.scrum],selectedProjects:[testData.project.p_scrum]}}}),next()});var testCase={name:"component.customField.multipleEntities.count"};return testCase["Should send the number of entities in the setBadgeText event"]=testKit.test(function(test){test.get("bus").on("setBadgeText[0]",function(eventArgs,badgeText){test.equals(badgeText.text,"3","text on the badge should be equal "),test.done()})}),testCase['Should refresh itself on "afterSave" event from store']=testKit.test(function(test){var bus=test.get("bus");bus.on("setBadgeText[0]",function(eventArgs,badgeText){test.equals(badgeText.text,"3","initial badge text");var testData=test.get("data"),us=testData.userStory.us1,newValue=_.take(us.customFields[0].value.split(","),2).join(",");test.get("configurator").getStore().save("userStory",{id:us.id,fields:["id","customFields"],$set:{customFields:[{name:"MultiField",value:newValue}]}}).done()}),bus.on("setBadgeText[1]",function(eventArgs,badgeText){test.equals(badgeText.text,"2","changed badge text"),test.done()})}),testCase})