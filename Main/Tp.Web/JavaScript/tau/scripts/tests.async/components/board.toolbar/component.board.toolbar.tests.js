define(["Underscore","jQuery","tau/core/event","tests.async/testkit/testkit.component.board","tau/components/component.board.container","tau/ui/extensions/board.container/ui.extension.board.container.editMode","tests/common/remoteConstants"],function(_,$,Event,TestKit,Component,ExtensionEditor,Constants){var testKit=new TestKit(Component,{name:"MegaBoard",viewMode:"board",zoomLevel:2,min:1,max:20});testKit.registerSetup("fixtures",function(test,next){var entityTypes={us:Constants.EntityTypes.USERSTORY,release:Constants.EntityTypes.RELEASE,feature:Constants.EntityTypes.FEATURE},practices={planning:{id:Constants.Practices.PLANNING.id},requirements:{id:Constants.Practices.REQUIREMENTS.id}},processes={scrum:{name:"scrum"+ +(new Date),practices:["planning","requirements"]}},projects={p_scrum:{name:"Project Scrum"+ +(new Date),process:"scrum"}},releases={},features={};for(var r=0;r<4;r++){var releaseName="release"+r;releases[releaseName]={name:"Release_"+r+"_"+ +(new Date),entityType:"release",project:"p_scrum"};var featureName="feature"+r;features[featureName]={name:"Feature_"+r+"_"+ +(new Date),entityType:"feature",project:"p_scrum",release:releaseName}}var userStories={};_(releases).chain().keys().each(function(releaseId){_(features).chain().keys().each(function(featureId){for(var s=0;s<4;s++){var userStoryName=["us",releaseId,featureId,s].join("_");userStories[userStoryName]={name:userStoryName,entityType:"us",project:"p_scrum",release:releaseId,feature:featureId}}})});var fixtures={entityTypes:entityTypes,practices:practices,processes:processes,projects:projects};test.set("fixtures",fixtures),next()}),testKit.registerSetup("configurator.externalService",function(test,next){var configuratorInstance=test.get("configurator");configuratorInstance.setLoggedUser({id:1,name:"Me",isAdministrator:!0,role:"Developer"}),next()}),testKit.registerSetup("store.get",function(test,next){var configuratorInstance=test.get("configurator"),store=configuratorInstance.getStore();test.get("real")===!1&&sinon.stub(store.config.proxy.service,"get",function(command){command.callbacks.success({id:command.config.id,acid:"234567896789322345l"})}),next()}),testKit.registerSetup("context",function(test,next){var projectID=test.get("data").project.p_scrum.id;test.get("configurator").getStore().get("context",{id:projectID,fields:["acid"]}).done({success:function(result){test.set("context",result[0].data),next()}})}),testKit.registerSetup("componentBus.create",function(test,next){test.set("componentBus",test.get("componentClass").create({extensions:[ExtensionEditor]})),next()}),testKit.registerSetup("componentBus.initialize",function(test,next){var componentBus=test.get("componentBus"),configuratorInstance=test.get("configurator"),context=test.get("context"),componentConfig={context:{configurator:configuratorInstance,acid:context.acid}};componentConfig.children=[{type:"board.toolbar"}],componentBus.initialize(componentConfig);var boardSettings=configuratorInstance.getBoardSettingsFactory().createInstance(test.get("board.definition"));componentBus.fire("boardSettings.ready",{boardSettings:boardSettings}),test.set("boardSettings",boardSettings),next()}),testKit.setSetupsOrder(["options","configurator","configurator.externalService","fixtures","fixtures.load","store","store.get","board.definition","board.slice","restStorage","context","componentBus.create","listeners","componentBus.initialize"]);var testcase={name:"component.board.toolbar"};return testcase["should allow to toggle editor"]=testKit.test(function(test){var bus=test.get("bus"),testFlow={bus:bus,"bus afterRender[0]":function(evt){var $el=evt.data.element,$toggle=$el.find("[role=action-toggle-editor]"),$board=$el;test.equals($toggle.length,1,"Show button"),test.equals($board.hasClass("tau-settings-active"),!1,"Editor hidden"),test.equals($toggle.hasClass("tau-checked"),!1,"Button not selected"),$toggle.click(),test.equals($board.hasClass("tau-settings-active"),!0,"Editor show"),test.equals($toggle.hasClass("tau-checked"),!0,"Button selected"),$toggle.click(),test.equals($board.hasClass("tau-settings-active"),!1,"Editor show"),test.equals($toggle.hasClass("tau-checked"),!1,"Button not selected");var boardSettings=test.get("boardSettings");boardSettings.set({set:{edit:!0}}),test.equals($board.hasClass("tau-settings-active"),!0,"External set"),test.equals($toggle.hasClass("tau-checked"),!0,"Button selected"),test.done()}};Event.subscribeOn(testFlow)}),testcase["should allow to edit name"]=testKit.test(function(test){var bus=test.get("bus"),testFlow={bus:bus,"bus afterRender[0]":function(evt){var $el=evt.data.element,$output=$el.find("[role=name_output]"),$widget=$el.find("[role=name]");test.equals($output.text(),"MegaBoard","Output name"),test.equals($widget.text(),"MegaBoard","Output name"),test.equals($widget.attr("contenteditable"),"false","Cant edit"),$widget.click(),test.equals($widget.attr("contenteditable"),"false","Still cant edit");var $toggle=$el.find("[role=action-toggle-editor]");test.equals($toggle.length,1,"Show button"),$toggle.click(),$widget.click(),test.equals($widget.attr("contenteditable"),"true","Can edit"),test.equals($widget.hasClass("editableText"),!1,"We dont need no special class"),$widget.focus(),test.equals($widget.hasClass("active"),!1,"We dont need no special class for active"),$widget.text("I <3 TP"),$widget.blur(),$toggle.click(),test.equals($output.text(),"I <3 TP","Change"),test.equals($widget.attr("contenteditable"),"false","Cant edit"),test.equals($widget.hasClass("editableText"),!1,"We still dont need no special class"),test.done()}};Event.subscribeOn(testFlow)}),testcase["should allow to remove board"]=testKit.test(function(test){var bus=test.get("bus"),testFlow={bus:bus,"bus afterRender[0]":function(evt){var $el=evt.data.element,alerted=!1,$button=$el.find("[role=action-remove]");test.equals($button.length,1,"Button ");var addr=!1,routing=test.get("configurator").getRouting();sinon.stub(routing,"redirect",function(location){addr=location,test.equals(addr,"#page=board/current","Redirected"),test.done()}),$button.on("show",function(evt,data){test.ok(!0,"Confirm Show"),data.popup.find(".i-role-actionok").trigger("click")}),$button.click()}};Event.subscribeOn(testFlow)}),testcase["should allow to change zoom"]=testKit.test(function(test){var bus=test.get("bus"),testFlow={bus:bus,"bus afterRender[0]":function(evt){var $el=evt.data.element,$zoomer=$el.find("[role=zoomer]");test.equals($zoomer.length,1,"Zoomer");var current=$zoomer.slider("value");test.equals(current,2,"Zoomer position"),test.done()}};Event.subscribeOn(testFlow)}),testcase["should allow to switch view"]=testKit.test(function(test){var bus=test.get("bus"),testFlow={bus:bus,"bus afterRender[0]":function(evt){var $el=evt.data.element,$buttons=$el.find("[role=action-toggle-viewMode]");test.equals($buttons.length,4,"Buttons"),test.equals($buttons.filter("[value=board]").hasClass("tau-checked"),!0,"Board chosen"),test.done()}};Event.subscribeOn(testFlow)}),testcase})