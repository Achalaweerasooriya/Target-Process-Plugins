define(["Underscore","tests.async/testkit/testkit.component","tau/components/component.inviter","tests/common/remoteConstants"],function(_,TestKit,Component,Constants){var testKit=new TestKit(Component);testKit.registerSetup("fixtures",function(test,next){var entityTypes={user:{id:Constants.EntityTypes.USER.id,name:"user"},project:{id:Constants.EntityTypes.PROJECT.id,name:"project"}},practices={planning:{id:Constants.Practices.PLANNING.id}},processes={scrum:{name:"scrum"+parseInt(Math.random()*1e11),practices:["planning"]}},projects={project1:{name:"Project 1"+parseInt(Math.random()*1e11),process:"scrum",entityType:"project"}},userNamePrefix="Ivan"+ +(new Date),users={user1:{firstName:userNamePrefix,lastName:"Pupkin",email:"pupkin1"+ +(new Date)+"@example.com",login:"pupkin1"+ +(new Date),password:123123,entityType:"user"},user2:{firstName:userNamePrefix,lastName:"Pupkin",email:"pupkin2"+ +(new Date)+"@example.com",login:"pupkin2"+ +(new Date),password:123123,entityType:"user"}},roles={admin:{name:"Admin"+ +(new Date)},qa:{name:"QA"+ +(new Date)}},fixtures={entityTypes:entityTypes,practices:practices,processes:processes,projects:projects,users:users,roles:roles};test.set("fixtures",fixtures),next()}),testKit.registerSetup("componentBus",function(test,next){test.set("componentBus",test.get("componentClass").create({})),next()}),testKit.registerSetup("component.initialize",function(test,next){var testData=test.get("data"),componentBus=test.get("componentBus");componentBus.initialize({context:{entity:testData.project.project1,configurator:test.get("configuratorInstance")}}),next()});var testCase={name:"component.inviter"};return testCase["should render valid markup"]=testKit.test(function(test){return testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){var $widget=renderData.element.find(".tau-invite-widget");test.equals($widget.length,1,"widget is rendered");var $input=$widget.find(".i-role-members-widget .i-role-input");test.equals($input.length,1,"widget members input is rendered"),test.equals($widget.find(".i-role-members-widget .i-role-placeholder").length,1,"widget members placeholder is rendered"),test.done()}})}),testCase["should open autocompleter for email"]=testKit.test(function(test){return testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){var data=test.get("data"),$widget=renderData.element.find(".tau-invite-widget"),$input=$widget.find(".i-role-members-widget .i-role-input");$input.on("autocompleteopen",function(){var $items=$(this).autocomplete("widget").find("li");test.equals($items.length,1,"one item should be rendered"),test.done()}),$input.val(data.user.user1.email).trigger("input").trigger("keydown")}})}),testCase["should open autocompleter for name"]=testKit.test(function(test){return testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){var data=test.get("data"),$widget=renderData.element.find(".tau-invite-widget"),$input=$widget.find(".i-role-members-widget .i-role-input");$input.on("autocompleteopen",function(){var $items=$(this).autocomplete("widget").find("li");test.equals($items.length,2,"two items should be rendered"),test.done()}),$input.val(data.user.user1.firstName).trigger("input").trigger("keydown")}})}),testCase["should not add user twice"]=testKit.test(function(test){return testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){var data=test.get("data"),$el=renderData.element,$form=$el.find("form.i-role-form"),$widget=$el.find(".tau-invite-widget"),$input=$widget.find(".i-role-members-widget .i-role-input"),counter=0,observer=function(){var $items=$(this).autocomplete("widget").find("li");counter===0?(test.equals($items.length,2,"two avatars are rendered for the first time"),$items.first().find("a").trigger("click"),$form.on("reset",function(){_.delay(function(){$input.val(data.user.user1.firstName).trigger("input").trigger("keydown")},100)}),$form.trigger("submit")):(test.equals($items.length,1,"one avatar is rendered after invite"),test.done()),counter++};$input.on("autocompleteopen",observer),$input.val(data.user.user1.firstName).trigger("input").trigger("keydown")}})}),testCase})