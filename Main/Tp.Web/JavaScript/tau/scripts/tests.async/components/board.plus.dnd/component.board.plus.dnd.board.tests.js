define(["Underscore","jQuery","tests.async/testkit/testkit.component.board","tau/components/component.board.container","tau/ui/extensions/container/ui.extension.container.childrenEvents","tests/common/remoteConstants"],function(_,$,TestKit,Component,ExtensionChildrenEvents,Constants){function createDomBodyTarget(){return $("<div></div>").css({position:"absolute",top:"-999999px",left:"-999999px"}).appendTo("body")}var testKit=new TestKit(Component,{name:"MegaBoard",viewMode:"board",zoomLevel:0,min:1,max:20,x:{types:["feature"],filter:"?It is not None"},y:{types:["release"],filter:"?It is not None"},cells:{types:["userStory"],filter:""}});testKit.registerSetup("fixtures",function(test,next){var entityTypes={us:Constants.EntityTypes.USERSTORY,release:Constants.EntityTypes.RELEASE,feature:Constants.EntityTypes.FEATURE},practices={planning:{id:Constants.Practices.PLANNING.id},requirements:{id:Constants.Practices.REQUIREMENTS.id}},processes={scrum:{name:"scrum"+ +(new Date),practices:["planning","requirements"]}},projects={p_scrum:{name:"Project Scrum"+ +(new Date),process:"scrum"}},releases={},features={};for(var r=0;r<4;r++){var uid=+(new Date),releaseId="release"+r;releases[releaseId]={name:"Release_"+r+"_"+uid,entityType:"release",project:"p_scrum"};var featureId="feature"+r;features[featureId]={name:"Feature_"+r+"_"+uid,entityType:"feature",project:"p_scrum",release:releaseId}}var userStories={};_.each(releases,function(release,releaseId){_.each(features,function(feature,featureId){for(var storyNumber=0;storyNumber<4;storyNumber++){var userStoryName=["us",releaseId,featureId,storyNumber].join("_");userStories[userStoryName]={name:userStoryName,entityType:"us",project:"p_scrum",release:releaseId,feature:featureId}}})});var fixtures={entityTypes:entityTypes,practices:practices,processes:processes,projects:projects,releases:releases,features:features,userStories:userStories};test.set("fixtures",fixtures),next()}),testKit.registerSetup("componentBus",function(test,next){test.set("componentBus",test.get("componentClass").create({extensions:[ExtensionChildrenEvents]})),next()}),testKit.registerSetup("component.initialize",function(test,next){var configuratorInstance=test.get("configurator"),store=configuratorInstance.getStore();configuratorInstance.getClipboardManager().restStorage.sources.splice(0,1);var testData=test.get("data"),projectID=testData.project.p_scrum.id;test.get("real")===!1&&sinon.stub(store.config.proxy.service,"get",function(command){if(command.type=="context")command.callbacks.success({id:command.config.id,acid:"345"});else if(!command.config.id){var collection=_.toArray(testData[command.type]);setTimeout(function(){command.callbacks.success(collection)},0)}}),store.get("context",{projectId:projectID,fields:["acid"]},{success:function(r){var componentBus=test.get("componentBus"),definition=test.get("board.definition"),acid=r.data[0].acid;configuratorInstance.getHashService().setHref("http://localhost/targetprocess/RestUI/board.aspx?acid="+acid+"#"),configuratorInstance.setBoardSettingsOptions(definition);var componentConfig={context:{configurator:configuratorInstance,entity:{id:test.get("board.definition").id}},children:[{type:"board.plus"}]},boardSettings=configuratorInstance.getBoardSettingsFactory().createInstance(test.get("board.definition"));configuratorInstance.registerService("boardSettings",boardSettings),componentBus.initialize(componentConfig),componentBus.fire("boardSettings.ready",{boardSettings:boardSettings}),next()}}).done()});var triggerSelect=function(test,$card,ctrlKey){ctrlKey=_.isUndefined(ctrlKey)?!0:!!ctrlKey,$card.trigger(jQuery.Event("mousedown",{ctrlKey:ctrlKey})),test.equals($card.is(".i-role-card.tau-selected"),!0,"Cards are selected")},applySelect=function($card,ctrlKey){ctrlKey=_.isUndefined(ctrlKey)?!0:!!ctrlKey,$card.trigger(jQuery.Event("mousedown",{ctrlKey:ctrlKey})),$card.trigger(jQuery.Event("mouseup",{ctrlKey:ctrlKey}))},testCase={name:"component.board.plus.dnd for board"},_dndPrioritize=function($el,$card,$insertAfter){$el.data("tauSortable").dndOptions.start({target:$card},{}),$card.insertAfter($insertAfter),$el.data("tauSortable").currentGroup=$insertAfter.parent(),$el.data("tauSortable").dndOptions.stop({target:$card},{})},_dndMoveToCell=function($el,$card,$cell){$el.data("tauSortable").dndOptions.start({target:$card},{}),$card.appendTo($cell),$el.data("tauSortable").currentGroup=$cell,$el.data("tauSortable").dndOptions.stop({target:$card},{})},checkSelectionOnDroppedCard=function(test,expectedCardsCount){return function(e,s){var $droppedCards=s[1].items;test.equals($droppedCards.size(),expectedCardsCount,"Has cards dropped"),test.equals($droppedCards.is(".i-role-card.tau-selected"),!1,"Cards selection should be reset before request")}};return testCase["should allow prioritize and dnd one"]=testKit.test(function(test){var $card,$prevCard,$nextCard,$targetCell,$sourceCell,$el,$grid;testKit.flow(test,{"bus afterRender[0] + board.plus.view.cell.skeleton.built[15]":function(evt,renderData){var domBodyTarget=createDomBodyTarget();$el=renderData.element,$el.appendTo(domBodyTarget),$grid=$el.find("[role=grid]"),test.equals($grid.length,1,"has grid");var $cells=$grid.find("[role=cell]");test.ok($cells.length>6,"has cells");var $startCell=$cells.eq(0);$card=$startCell.find("[role=card]").eq(1),test.equals($card.length,1,"has card"),$card.trigger("mouseenter"),test.ok($card.data("draggable"),"card draggable"),$targetCell=$card.parents("[role=cellholder]:first"),$prevCard=$card.next(),$nextCard=$card.next().next(),test.equals($prevCard.length,1,"has target card"),test.equals($nextCard.length,1,"has target card"),test.get("configurator").getSliceService().reset(),triggerSelect(test,$card),_dndPrioritize($grid,$card,$prevCard)},"bus board.plus.sort.stopped[0]":checkSelectionOnDroppedCard(test,1),"bus board.plus.view.card.batch.move.after[0]":function(evt){var spy=test.get("configurator").getSliceService(),dndCalls=_(spy.args).chain().flatten().filter(function(x){return x.url&&x.url.indexOf("/moveAndPrioritizeBatch")>0}).value();test.equals(dndCalls.length,1,"Should perform one command only");var command=dndCalls[0].$scope.command;test.equals(command.method,"moveAndPrioritizeBatch","moveAndPrioritizeBatch as one prioritize"),test.same(command.config.$set,{items:[{itemId:$card.data("id"),oldX:$targetCell.data("x"),oldY:$targetCell.data("y"),x:$targetCell.data("x"),y:$targetCell.data("y"),beforeItemId:$prevCard.data("id"),afterItemId:$nextCard.data("id")}]});var $cells=$grid.find("[role=cell]"),$startCell=$cells.eq(0),$endCell=$cells.eq(1);$card=$startCell.find("[role=card]").eq(1),test.equals($card.length,1,"has card"),$card.trigger("mouseenter"),test.ok($card.data("draggable"),"card draggable"),$sourceCell=$startCell,$targetCell=$endCell,$prevCard=$targetCell.find("[role=card]").eq(0),$nextCard=$prevCard.next(),test.equals($prevCard.length,1,"has target card"),test.equals($nextCard.length,1,"has target card"),test.get("configurator").getSliceService().reset(),triggerSelect(test,$card),_dndPrioritize($grid,$card,$prevCard)},"bus board.plus.sort.stopped[1]":checkSelectionOnDroppedCard(test,1),"bus board.plus.view.card.batch.move.after[1]":function(evt){var spy=test.get("configurator").getSliceService(),dndCalls=_(spy.args).chain().flatten().filter(function(x){return x.url&&x.url.indexOf("/moveAndPrioritizeBatch")>0}).value();test.equals(dndCalls.length,1,"Should perform one command only");var command=dndCalls[0].$scope.command;test.equals(command.method,"moveAndPrioritizeBatch","moveAndPrioritizeBatch as moved"),test.same(command.config.$set,{items:[{itemId:$card.data("id"),oldX:$sourceCell.data("x"),oldY:$sourceCell.data("y"),x:$targetCell.data("x"),y:$targetCell.data("y"),beforeItemId:$prevCard.data("id"),afterItemId:$nextCard.data("id")}]});var $cells=$grid.find("[role=cell]"),$startCell=$cells.eq(2),$endCell=$cells.eq(3);$card=$startCell.find("[role=card]").eq(1),test.equals($card.length,1,"has card"),$card.trigger("mouseenter"),test.ok($card.data("draggable"),"card draggable"),$sourceCell=$startCell,$targetCell=$endCell,$targetCell.find("[role=card]").remove(),test.equals($targetCell.find("[role=card]").size(),0,"should be no cards in target cell"),test.get("configurator").getSliceService().reset(),triggerSelect(test,$card),_dndMoveToCell($grid,$card,$targetCell)},"bus board.plus.sort.stopped[2]":checkSelectionOnDroppedCard(test,1),"bus board.plus.view.card.batch.move.after[2]":function(evt){var spy=test.get("configurator").getSliceService(),dndCalls=_(spy.args).chain().flatten().filter(function(x){return x.url&&x.url.indexOf("/moveAndPrioritizeBatch")>0}).value();test.equals(dndCalls.length,1,"Should perform one command only");var command=dndCalls[0].$scope.command;test.equals(command.method,"moveAndPrioritizeBatch","moveAndPrioritizeBatch as only moved"),test.same(command.config.$set,{items:[{itemId:$card.data("id"),oldX:$sourceCell.data("x"),oldY:$sourceCell.data("y"),x:$targetCell.data("x"),y:$targetCell.data("y"),beforeItemId:null,afterItemId:null}]}),test.done()}})}),testCase["should allow prioritize and dnd several"]=testKit.test(function(test){var $card1,$card2,$prevCard,$nextCard,$targetCell,$sourceCell,$el,$grid;testKit.flow(test,{"bus afterRender[0] + board.plus.view.cell.skeleton.built[15]":function(evt,renderData){var domBodyTarget=createDomBodyTarget();$el=renderData.element,$el.appendTo(domBodyTarget),$grid=$el.find("[role=grid]"),test.equals($grid.length,1,"has grid");var $cells=$grid.find("[role=cell]");test.ok($cells.length>6,"has cells");var $startCell=$cells.eq(0),$cards=$startCell.find("[role=card]");test.equals($cards.length,4,"several card"),$card1=$startCell.find("[role=card]").eq(1),$card2=$startCell.find("[role=card]").eq(2),test.equals($card1.length,1,"has card"),test.equals($card2.length,1,"has card"),applySelect($card1),test.equals($card1.hasClass("tau-selected"),!0,"selected"),test.equals($card2.hasClass("tau-selected"),!1,"not selected"),applySelect($card2),test.equals($card2.hasClass("tau-selected"),!0,"selected");var $endCell=$cells.eq(3);$card2.trigger("mouseenter"),test.ok($card2.data("draggable"),"card draggable"),$sourceCell=$startCell,$targetCell=$endCell,$prevCard=$targetCell.find("[role=card]").eq(0),$nextCard=$prevCard.next(),test.equals($prevCard.length,1,"target card"),test.equals($nextCard.length,1,"target card"),test.get("configurator").getSliceService().reset(),test.equals($card1.hasClass("tau-selected"),!0,"Card is selected"),test.equals($card2.hasClass("tau-selected"),!0,"Card is selected"),_dndPrioritize($grid,$card2,$prevCard)},"bus board.plus.sort.stopped[0]":checkSelectionOnDroppedCard(test,2),"bus board.plus.view.card.batch.move.after[0]":function(evt){var spy=test.get("configurator").getSliceService(),dndCalls=_(spy.args).chain().flatten().filter(function(x){return x.url&&x.url.indexOf("/moveAndPrioritizeBatch")>0}).value();test.equals(dndCalls.length,1,"Should perform one big batch command only");var command=dndCalls[0].$scope.command;test.equals(command.method,"moveAndPrioritizeBatch","moveAndPrioritizeBatch"),test.same(command.config.$set,{items:[{itemId:$card2.data("id"),oldX:$sourceCell.data("x"),oldY:$sourceCell.data("y"),x:$targetCell.data("x"),y:$targetCell.data("y"),beforeItemId:$prevCard.data("id"),afterItemId:$nextCard.data("id")},{itemId:$card1.data("id"),oldX:$sourceCell.data("x"),oldY:$sourceCell.data("y"),x:$targetCell.data("x"),y:$targetCell.data("y"),beforeItemId:$card2.data("id"),afterItemId:$nextCard.data("id")}]},"move conf"),test.done()}})}),testCase["should provide correct selection"]=testKit.test(function(test){var $el,$grid;testKit.flow(test,{"bus afterRender[0] + board.plus.view.cell.skeleton.built[15]":function(evt,renderData){var domBodyTarget=createDomBodyTarget();$el=renderData.element,$el.appendTo(domBodyTarget),$grid=$el.find("[role=grid]"),test.equals($grid.length,1,"has grid");var $cards=$grid.find(".i-role-card");test.equals($cards.length>0,!0,"has cards"),test.equals($cards.filter(".tau-selected").length,0,"has no selected"),applySelect($cards.eq(0)),applySelect($cards.eq(1)),applySelect($cards.eq(2)),test.equals($cards.filter(".tau-selected").length,3,"has 3 selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!0,"first selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!0,"2nd  selected"),test.equals($cards.eq(2).hasClass("tau-selected"),!0,"3rd selected"),applySelect($cards.eq(1)),test.equals($cards.filter(".tau-selected").length,2,"has 2 selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!0,"first selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!1,"2nd not selected"),test.equals($cards.eq(2).hasClass("tau-selected"),!0,"3rd selected"),applySelect($cards.eq(3)),test.equals($cards.filter(".tau-selected").length,3,"has 3 selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!0,"first selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!1,"2nd not selected"),test.equals($cards.eq(2).hasClass("tau-selected"),!0,"3rd selected"),test.equals($cards.eq(3).hasClass("tau-selected"),!0,"4rd selected"),applySelect($cards.eq(1),!1),test.equals($cards.filter(".tau-selected").length,1,"has 1 selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!1,"first not selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!0,"2nd not  selected"),test.equals($cards.eq(2).hasClass("tau-selected"),!1,"3rd not  selected"),test.equals($cards.eq(3).hasClass("tau-selected"),!1,"4rd not selected"),applySelect($cards.eq(1)),test.equals($cards.filter(".tau-selected").length,0,"has 0 selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!1,"first not selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!1,"2nd not  selected"),test.equals($cards.eq(2).hasClass("tau-selected"),!1,"3rd not  selected"),test.equals($cards.eq(3).hasClass("tau-selected"),!1,"4rd not selected"),applySelect($cards.eq(1),!1),test.equals($cards.filter(".tau-selected").length,1,"has 0 selected"),applySelect($cards.eq(1),!1),test.equals($cards.filter(".tau-selected").length,0,"has 0 selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!1,"first not selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!1,"2nd not  selected"),test.equals($cards.eq(2).hasClass("tau-selected"),!1,"3rd not  selected"),test.equals($cards.eq(3).hasClass("tau-selected"),!1,"4rd not selected"),applySelect($cards.eq(0)),applySelect($cards.eq(1)),test.equals($cards.filter(".tau-selected").length,2,"has 2 selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!0,"first selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!0,"2nd  selected"),applySelect($cards.eq(0),!1),test.equals($cards.filter(".tau-selected").length,1,"has 1 selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!0,"first selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!1,"2nd  selected"),test.done()}})}),testCase["should expand collapsed empty cell after d&d"]=testKit.test(function(test){var $card,$targetCell,$targetCellHolder;testKit.flow(test,{"bus afterRender[0] + board.plus.view.cell.skeleton.built[15]":function(evt,renderData){var domBodyTarget=createDomBodyTarget(),$el=renderData.element;$el.appendTo(domBodyTarget);var $grid=$el.find("[role=grid]"),$cells=$grid.find("[role=cell]"),$sourceCell=$cells.eq(0);$card=$sourceCell.find("[role=card]").eq(1),$card.trigger("mouseenter"),$targetCell=$cells.eq(3),$targetCell.find("[role=card]").remove(),test.equals($targetCell.find("[role=card]").size(),0,"should be no cards in target cell"),$targetCellHolder=$targetCell.parent(".i-role-cellholder"),$targetCellHolder.addClass("tau-collapsed tau-collapsed_x"),test.get("configurator").getSliceService().reset(),triggerSelect(test,$card),_dndMoveToCell($grid,$card,$targetCell)},"bus board.plus.sort.stopped[0] + board.plus.view.card.batch.move.after":function(evt,sort,batch){test.ok(!$targetCellHolder.hasClass("tau-collapsed"),".tau-collapsed should be removed after drop"),test.ok(!$targetCellHolder.hasClass("tau-collapsed_x"),".tau-collapsed_x should be removed after drop"),test.done()}})}),testCase})