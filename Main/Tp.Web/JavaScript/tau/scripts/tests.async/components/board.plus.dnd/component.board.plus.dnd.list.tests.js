define(["jQuery","tests.async/testkit/testkit.component.board","tau/components/component.board.container","tau/ui/extensions/container/ui.extension.container.childrenEvents","tests/common/remoteConstants"],function($,TestKit,Component,ExtensionChildrenEvents,Constants){var testKit=new TestKit(Component,{name:"MegaBoard",viewMode:"list",zoomLevel:0,min:1,max:20,x:{types:["feature"],filter:"?It is not None"},y:{types:["release"],filter:"?It is not None"},cells:{types:["userStory"],filter:""}});testKit.registerSetup("fixtures",function(test,next){var entityTypes={us:Constants.EntityTypes.USERSTORY,release:Constants.EntityTypes.RELEASE,feature:Constants.EntityTypes.FEATURE},practices={planning:{id:Constants.Practices.PLANNING.id},requirements:{id:Constants.Practices.REQUIREMENTS.id}},processes={scrum:{name:"scrum"+ +(new Date),practices:["planning","requirements"]}},projects={p_scrum:{name:"Project Scrum"+ +(new Date),process:"scrum"}},releases={},features={};for(var r=0;r<4;r++){var releaseName="release"+r;releases[releaseName]={name:"Release_"+r+"_"+ +(new Date),entityType:"release",project:"p_scrum"};var featureName="feature"+r;features[featureName]={name:"Feature_"+r+"_"+ +(new Date),entityType:"feature",project:"p_scrum",release:releaseName}}var userStories={};_(releases).chain().keys().each(function(releaseId){_(features).chain().keys().each(function(featureId){for(var s=0;s<4;s++){var userStoryName=["us",releaseId,featureId,s].join("_");userStories[userStoryName]={name:userStoryName,entityType:"us",project:"p_scrum",release:releaseId,feature:featureId}}})});var fixtures={entityTypes:entityTypes,practices:practices,processes:processes,projects:projects,releases:releases,features:features,userStories:userStories};test.set("fixtures",fixtures),next()}),testKit.registerSetup("componentBus",function(test,next){test.set("componentBus",test.get("componentClass").create({extensions:[ExtensionChildrenEvents]})),next()}),testKit.registerSetup("component.initialize",function(test,next){var configuratorInstance=test.get("configurator"),store=configuratorInstance.getStore();configuratorInstance.setRequireLoader(function(){});var testData=test.get("data"),projectID=testData.project.p_scrum.id;test.get("real")===!1&&sinon.stub(store.config.proxy.service,"get",function(command){if(command.type=="context")command.callbacks.success({id:command.config.id,acid:"345"});else if(!command.config.id){var collection=_.toArray(testData[command.type]);setTimeout(function(){command.callbacks.success(collection)},0)}}),store.get("context",{projectId:projectID,fields:["acid"]},{success:function(r){var componentBus=test.get("componentBus"),definition=test.get("board.definition");configuratorInstance.setBoardSettingsOptions(definition);var componentConfig={context:{configurator:configuratorInstance,acid:r.data[0].acid,entity:{id:test.get("board.definition").id}}};componentConfig.children=[{type:"board.plus.list"}];var boardSettings=configuratorInstance.getBoardSettingsFactory().createInstance(test.get("board.definition"));configuratorInstance.registerService("boardSettings",boardSettings),componentBus.initialize(componentConfig),componentBus.fire("boardSettings.ready",{boardSettings:boardSettings}),next()}}).done()});var testcase={name:"component.board.plus.dnd for list"},_d=function($el,$card,$insertAfter){$el.data("tauSortable").dndOptions.start({target:$card},{}),$card.insertAfter($insertAfter),$el.data("tauSortable").currentGroup=$insertAfter.parent(),$el.data("tauSortable").dndOptions.stop({target:$card},{})},_dCell=function($el,$card,$cell){$el.data("tauSortable").dndOptions.start({target:$card},{}),$card.appendTo($cell),$el.data("tauSortable").currentGroup=$cell,$el.data("tauSortable").dndOptions.stop({target:$card},{})};testcase["should allow prioritize and dnd one"]=testKit.test(function(test){var $card,$prevCard,$nextCard,$targetCell,$sourceCell,$el,$grid;testKit.flow(test,{"bus afterRender[0]+board.plus.list.view.cell.skeleton.built[0]":function(evt){var domBodyTarget=$("<div />").css({position:"absolute",top:"-999999px",left:"-999999px"}).appendTo("body");$el=_.values(evt)[0].data.element,$el.appendTo(domBodyTarget),$grid=$el.find(".i-role-board-body"),test.equals($grid.length,1,"has grid");var $cells=$grid.find("[role=cell]");test.equals($cells.length,1,"has cells");var $startCell=$cells.eq(0);$card=$startCell.find("[role=card]").eq(0),test.equals($card.length,1,"has card"),this.bus.fire("targetCard",{$card:$card}),$card.trigger("mouseenter"),test.ok($card.data("draggable"),"card draggable"),$targetCell=$card.parents("[role=cellholder]:first"),$prevCard=$card.next(),$nextCard=$card.next().next(),test.equals($prevCard.length,1,"prev card is ready"),test.equals($nextCard.length,1,"next card is ready"),test.get("configurator").getSliceService().reset(),_d($grid,$card,$prevCard)},"bus board.plus.list.view.card.batch.move.after[0]":function(evt){var spy=test.get("configurator").getSliceService(),dndCalls=_(spy.args).chain().flatten().filter(function(x){return x.url&&x.url.indexOf("/prioritizeBatch")>0}).value();test.equals(dndCalls.length,1,"Should perform one command only");var command=dndCalls[0].$scope.command;test.equals(command.method,"prioritizeBatch","prioritizeBatch"),test.same(command.config.$set,{items:[{itemId:$card.data("id"),beforeItemId:$prevCard.data("id"),afterItemId:$nextCard.data("id")}]})},"bus afterRender[0]+board.plus.list.view.card.batch.move.completed[0]":function(evt,data){var $selectedCard=$el.find(".i-role-card.tau-selected");test.equals($selectedCard.length,1,"Card is selected after dnd");var oldHTML=$card.html(),newHTML=$selectedCard.html();test.equals(oldHTML,newHTML,"Replaced HTML is valid"),test.equals($selectedCard.is($card),!1,"should replace existent card"),test.done()}})}),testcase["should allow prioritize several"]=testKit.test(function(test){var $card1,$card2,$prevCard,$nextCard,$targetCell,$sourceCell,$el,$grid;testKit.flow(test,{"bus afterRender[0]+board.plus.list.view.cell.skeleton.built[0]":function(evt){var domBodyTarget=$("<div />").css({position:"absolute",top:"-999999px",left:"-999999px"}).appendTo("body");$el=_.values(evt)[0].data.element,$el.appendTo(domBodyTarget),$grid=$el.find(".i-role-board-body"),test.equals($grid.length,1,"has grid");var $cells=$grid.find("[role=cell]");test.equals($cells.length,1,"has cells");var $startCell=$cells.eq(0),$cards=$startCell.find("[role=card]");$card1=$startCell.find("[role=card]").eq(0),$card2=$startCell.find("[role=card]").eq(2),test.equals($card1.length,1,"has card"),test.equals($card2.length,1,"has card"),this.bus.fire("targetCard",{$card:$card1}),$card1.trigger("mousedown");var $endCell=$startCell;$card2.trigger("mouseenter"),test.ok($card2.data("draggable"),"card draggable"),$sourceCell=$startCell,$targetCell=$endCell,$prevCard=$targetCell.find("[role=card]").eq(6),$nextCard=$prevCard.next(),test.equals($prevCard.length,1,"target card"),test.equals($nextCard.length,1,"target card"),test.get("configurator").getSliceService().reset(),_d($grid,$card2,$prevCard)},"bus board.plus.list.view.card.batch.move.after[0]":function(evt){var spy=test.get("configurator").getSliceService(),dndCalls=_(spy.args).chain().flatten().filter(function(x){return x.url&&x.url.indexOf("/prioritizeBatch")>0}).value();test.equals(dndCalls.length,1,"Should perform one command only");var command=dndCalls[0].$scope.command;test.equals(command.method,"prioritizeBatch"),test.same(command.config.$set,{items:[{itemId:$card2.data("id"),beforeItemId:$prevCard.data("id"),afterItemId:$nextCard.data("id")},{itemId:$card1.data("id"),beforeItemId:$card2.data("id"),afterItemId:$nextCard.data("id")}]})},"bus targetCard:last+board.plus.list.view.cell.skeleton.built[0]+board.plus.list.view.card.batch.move.completed.spec.cardsViewer[0]":function(evt){var $cell=evt["board.plus.list.view.cell.skeleton.built[0]"].data.element,$selectedCard=$cell.find(".i-role-card.tau-selected"),$prevCard=evt.targetCard.data.$card;test.equals($selectedCard.size(),1,"Card is selected");var actualHTML=$selectedCard.html(),expectedHTML=$prevCard.html();test.equals(expectedHTML,actualHTML,"replaced HTML content is valid"),test.equals($selectedCard.is($prevCard),!1,"element is replaced with new one"),test.done()}})});var applySelect=function($card,ctrlKey){ctrlKey=_.isUndefined(ctrlKey)?!0:!!ctrlKey,$card.trigger(jQuery.Event("mousedown",{ctrlKey:ctrlKey})),$card.trigger(jQuery.Event("mouseup",{ctrlKey:ctrlKey}))};return testcase["should provide correct selection"]=testKit.test(function(test){var $card1,$card2,$prevCard,$nextCard,$targetCell,$sourceCell,$el,$grid;testKit.flow(test,{"bus afterRender[0]+board.plus.list.view.cell.skeleton.built[0]":function(evt){var domBodyTarget=$("<div />").css({position:"absolute",top:"-999999px",left:"-999999px"}).appendTo("body");$el=_.values(evt)[0].data.element,$el.appendTo(domBodyTarget),$grid=$el.find("[role=grid]"),test.equals($grid.length,1,"has grid");var $cards=$grid.find(".i-role-card");test.equals($cards.length>0,!0,"has cards"),test.equals($cards.filter(".tau-selected").length,1,"one should be selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!0,"first selected"),applySelect($cards.eq(1)),applySelect($cards.eq(2)),test.equals($cards.filter(".tau-selected").length,3,"has 3 selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!0,"first selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!0,"2nd  selected"),test.equals($cards.eq(2).hasClass("tau-selected"),!0,"3rd selected"),applySelect($cards.eq(1)),test.equals($cards.filter(".tau-selected").length,2,"has 2 selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!0,"first selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!1,"2nd not selected"),test.equals($cards.eq(2).hasClass("tau-selected"),!0,"3rd selected"),applySelect($cards.eq(3)),test.equals($cards.filter(".tau-selected").length,3,"has 3 selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!0,"first selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!1,"2nd not selected"),test.equals($cards.eq(2).hasClass("tau-selected"),!0,"3rd selected"),test.equals($cards.eq(3).hasClass("tau-selected"),!0,"4rd selected"),applySelect($cards.eq(1),!1),test.equals($cards.filter(".tau-selected").length,1,"has 1 selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!1,"first not selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!0,"2nd selected"),test.equals($cards.eq(2).hasClass("tau-selected"),!1,"3rd not  selected"),test.equals($cards.eq(3).hasClass("tau-selected"),!1,"4rd not selected"),applySelect($cards.eq(1)),test.equals($cards.filter(".tau-selected").length,1,"still has 1 selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!1,"first not selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!0,"2nd not  selected"),test.equals($cards.eq(2).hasClass("tau-selected"),!1,"3rd not  selected"),test.equals($cards.eq(3).hasClass("tau-selected"),!1,"4rd not selected"),applySelect($cards.eq(1),!1),test.equals($cards.filter(".tau-selected").length,1,"has 1 selected simple click"),applySelect($cards.eq(1),!1),test.equals($cards.filter(".tau-selected").length,1,"has 1 selected after simple click"),test.equals($cards.eq(0).hasClass("tau-selected"),!1,"first not selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!0,"2nd not  selected"),test.equals($cards.eq(2).hasClass("tau-selected"),!1,"3rd not  selected"),test.equals($cards.eq(3).hasClass("tau-selected"),!1,"4rd not selected"),applySelect($cards.eq(0)),test.equals($cards.filter(".tau-selected").length,2,"has 2 selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!0,"first selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!0,"2nd  selected"),applySelect($cards.eq(0),!1),test.equals($cards.filter(".tau-selected").length,1,"has 1 selected"),test.equals($cards.eq(0).hasClass("tau-selected"),!0,"first selected"),test.equals($cards.eq(1).hasClass("tau-selected"),!1,"2nd  selected"),test.done()}})}),testcase})