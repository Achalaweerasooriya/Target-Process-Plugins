define(["jQuery","tests.async/testkit/testkit.component","tau/components/component.property.responsible","tests/common/remoteConstants","tau/ui/extensions/container/ui.extension.container.childrenEvents","tau/extensions/extension.underscore"],function($,TestKit,Component,Constants,ExtensionChildrenEvents){var testKit=new TestKit(Component);testKit.registerSetup("fixtures",function(test,next){var entityTypes={us:Constants.EntityTypes.USERSTORY,impediment:Constants.EntityTypes.IMPEDIMENT,user:Constants.EntityTypes.USER},practices={planning:{id:Constants.Practices.PLANNING.id},requirements:{id:Constants.Practices.REQUIREMENTS.id},helpDesk:{id:Constants.Practices["HELP DESK"].id},bugTracking:{id:Constants.Practices["BUG TRACKING"].id}},processes={scrum:{name:"scrum"+ +(new Date),practices:["planning","requirements","helpDesk","bugTracking"]}},userStories={us1:{name:"US1",entityType:"us",project:"p_scrum"}},users={mahmud:{firstName:"Mahmud",lastName:"Padgigai",login:"mahmud"+new Date,email:"mahmud"+_.UUID()+"@padgigay.by",password:"1"},egorka:{firstName:"Egorka",lastName:"Korolek",login:"egorka"+new Date,email:"Egorka"+_.UUID()+"@Korolek.by",password:"1"},polikarp:{firstName:"Polikarp",lastName:"Polikarpich",login:"polikarp"+new Date,email:"polikarp"+_.UUID()+"@Polikarpich.by",password:"1"},bugHunter:{firstName:"Bug",lastName:"Hunter",login:"Bug"+new Date,email:"Bug"+_.UUID()+"@Hunter.by",password:"1"}},projects={p_scrum:{name:"Project Scrum"+ +(new Date),process:"scrum",projectMembers:["p_scrum_mahmud","p_scrum_egorka","p_scrum_polikarp","p_scrum_bugHunter"]}},projectMembers={p_scrum_mahmud:{user:"mahmud",role:"dev"},p_scrum_egorka:{user:"egorka",role:"sp"},p_scrum_polikarp:{user:"polikarp",role:"pm"},p_scrum_bugHunter:{user:"bugHunter",role:"qa"}},impediments={impediment:{isPrivate:!1,name:"Open Impediment"+ +(new Date),project:"p_scrum",assignable:"us1",responsible:"bugHunter"}},configuratorInstance=test.get("configurator");configuratorInstance.getStore().get("role",{fields:["id","name"]}).turboGet("user",{$query:{firstName:{$contains:"Administrator"}},fields:["id","firstName","lastName"]}).done({success:function(result){var ALL_ROLES={};admin=result[1].data[0],_.each(result[0].data,function(role){ALL_ROLES[role.name.toUpperCase()]=role});var roles={dev:ALL_ROLES.DEVELOPER,sp:ALL_ROLES["SUPPORT PERSON"],pm:ALL_ROLES["PROJECT MANAGER"],tm:ALL_ROLES["TOP MANAGER"],qa:ALL_ROLES["QA ENGINEER"]},fixtures={practices:practices,users:users,roles:roles,entityTypes:entityTypes,processes:processes,projects:projects,projectMembers:projectMembers,userStories:userStories,impediments:impediments};test.set("fixtures",fixtures),next()}})}),testKit.registerSetup("component.initialize",function(test,next){var testData=test.get("data"),componentBus=test.get("componentBus");test.get("configurator").setLoggedUser(testData.user.egorka),componentBus.initialize({store:test.get("configurator").getStore(),context:{entity:{id:testData.impediment.impediment.id,entityType:Constants.EntityTypes.IMPEDIMENT},applicationContext:{processes:[testData.process.scrum],selectedProjects:[testData.project.p_scrum]}},extensions:[ExtensionChildrenEvents]}),next()});var testcase={name:"component.responsible"};return testcase["should render valid markup and allow to edit"]=testKit.test(function(test){var bus=test.get("bus"),newAvatarUri="sda/as/",userId;bus.on("afterRender[0]",function(evt,renderData){var $el=renderData.element;test.equals($el.length,1,"element rendered"),test.get("configurator").getStore().registerWithEvents([{id:renderData.data.id,__type:"user",avatarUri:newAvatarUri}])}),bus.on("afterRender[1]",function(evt,renderData){var $el=renderData.element,src=$el.find("img").attr("src");test.equals(src,newAvatarUri+"24","avatar changed")}),bus.on("afterRender[1]",function(evt,renderData){var $el=renderData.element;test.ok($el.data().tauBubble,"Can edit"),$el.bind("taububbleloadcontent",function(){var $popup=$el.tauBubble("widget"),$options=$popup.find("table");userId=$options.eq(2).click().attr("userid")}),$el.click()}),bus.on("afterRender[2]",function(evt,renderData){var $el=renderData.element;test.equals(userId,$el.attr("userid"),"responsible changed "),test.done()})}),testcase})