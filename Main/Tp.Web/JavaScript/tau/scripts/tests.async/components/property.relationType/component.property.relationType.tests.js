define(["jQuery","tests.async/testkit/testkit.component","tau/components/component.property.relationType","tests/common/remoteConstants","tau/ui/extensions/container/ui.extension.container.childrenEvents"],function($,TestKit,Component,Constants,ExtensionChildrenEvents){var testKit=new TestKit(Component);testKit.registerSetup("fixtures",function(test,next){var entityTypes={userStory:{id:Constants.EntityTypes.USERSTORY.id,name:"userStory"}},practices={planning:{id:Constants.Practices.PLANNING.id}},processes={scrum:{name:"scrum"+parseInt(Math.random()*1e11),practices:["planning"]}},projects={scrum:{name:"Project Scrum"+parseInt(Math.random()*1e11),process:"scrum"}},userStories={relationMaster:{name:"us"+parseInt(Math.random()*1e11),entityType:"userStory",project:"scrum"},relationSlave:{name:"us"+parseInt(Math.random()*1e11),entityType:"userStory",project:"scrum"}},relationTypes={blocker:{id:Constants.RelationTypes.BLOCKER.id,name:"blocker"}},relations={masterRelation:{master:"relationMaster",slave:"relationSlave",relationType:"blocker"}},fixtures={practices:practices,entityTypes:entityTypes,processes:processes,projects:projects,userStories:userStories,relationTypes:relationTypes,relations:relations};test.set("fixtures",fixtures),next()}),testKit.registerSetup("componentBus",function(test,next){test.set("componentBus",test.get("componentClass").create({extensions:[ExtensionChildrenEvents],context:{getTerms:$.noop}})),next()}),testKit.registerSetup("component.initialize",function(test,next){var testData=test.get("data"),componentBus=test.get("componentBus"),entity=testData.relation.masterRelation;entity.entityType={name:"relation"},componentBus.initialize({context:{entity:entity,configurator:test.get("configurator")}}),next()});var testcase={name:"component.property.relationType"};return testcase["should render valid markup and allow to edit"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0]":function(e,renderData){var $el=renderData.element,$relationTypeIcon=$el.find("tau-relation-icon");test.ok($relationTypeIcon,"Relation type icon is rendered");var $relationTypeLink=$el.find(".i-role-relation-type");test.ok($relationTypeLink,"Relation type link is rendered"),$relationTypeLink.click();var $bubble=$(".tau-bubble").eq(0);test.ok($bubble,"Bubble for relation types is rendered")},"bus state-list.afterRender[0]":function(e,renderData){var $dependencyRelationType=renderData.element.find('.drop-down-option:contains("Dependency")');test.ok($dependencyRelationType,'"Dependency" relation type is rendered in bubble'),$dependencyRelationType.click()},"bus afterRender[1]":function(e,renderData){var $el=renderData.element,relationType=$el.find(".i-role-relation-type").text();test.equals(relationType,"Dependency",'Relation type is changed to "Dependency"'),test.done()}})}),testcase})