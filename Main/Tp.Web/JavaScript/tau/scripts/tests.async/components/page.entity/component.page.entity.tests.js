define(["jQuery","tests.async/testkit/testkit.component","tau/components/component.page.entity","tests/common/remoteConstants"],function($,TestKit,Component,Constants){var testKit=new TestKit(Component);testKit.registerSetup("fixtures",function(test,next){var entityTypes={us:{id:Constants.EntityTypes.USERSTORY.id,name:"userStory"}},practices={planning:{id:Constants.Practices.PLANNING.id}},customFields={},processes={scrum:{name:"scream"+parseInt(Math.random()*1e11),practices:["planning"]}},projects={p_scrum:{name:"Project Scrum"+parseInt(Math.random()*1e11),process:"scrum"}},userStories={us1:{name:"US1",entityType:"us",project:"p_scrum"}},fixtures={practices:practices,entityTypes:entityTypes,processes:processes,projects:projects,customFields:customFields,userStories:userStories};test.set("fixtures",fixtures),next()}),testKit.registerSetup("component.initialize",function(test,next){var configuratorInstance=test.get("configurator"),store=configuratorInstance.getStore();test.get("real")===!1?(sinon.stub(store.config.proxy.service,"get",function(command){if(command.type=="context")command.callbacks.success({id:command.config.id,acid:"345"});else if(!command.config.id){var collection=_.toArray(testData[command.type]);setTimeout(function(){command.callbacks.success(collection)},0)}}),test.set("removeSpy",sinon.stub(store.config.proxy.service,"remove",function(command){command.callbacks.success()}))):test.set("removeSpy",sinon.spy(store.config.proxy.service,"remove"));var testData=test.get("data"),componentBus=test.get("componentBus");componentBus.initialize({entity:{id:testData.userStory.us1.id,type:"userstory"},context:{configurator:test.get("configuratorInstance")},containerConfig:{children:[{type:"title"}]}}),next()});var testcase={name:"component.page.entity"};return testcase["should init, produce events, and render content"]=testKit.test(function(test){var testData=test.get("data"),ent=testData.userStory.us1;return testKit.flow(test,{"bus contextRetrieved[0]":function(evt,contextData){var context=contextData.context;test.equals(_.has(context,"entity"),!0,"context.entity"),test.equals(_.has(context.entity,"id"),!0,"context.entity.id"),test.equals(context.entity.id,ent.id,"context.entity.id"),test.equals(_.has(context.entity,"entityType"),!0,"context.entity.entityType"),test.equals(context.entity.entityType.name,"userstory","context.entity.entityType"),test.equals(_.has(context.entity.entityType,"id"),!1,"no context.entity.entityType.id"),test.equals(_.has(context,"configurator"),!0,"context.configurator")},"bus afterRender[0]":function(evt,renderData){var $el=renderData.element;test.equals($el.length,1,"Render content");var $title=$el.find(".ui-title .i-role-title");test.equals($title.length,1,"Render children"),test.equals($title.text(),"US1","Render children"),test.done()}})}),testcase["listen events"]=testKit.test(function(test){var testData=test.get("data"),configurator=test.get("configurator"),gb=configurator.getGlobalBus(),ent=testData.userStory.us1;return testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){var $el=renderData.element;test.equals($el.length,1,"Render content"),gb.fire("entityWasMovedToProject",{entity:ent})},"bus afterRender[1]":function(evt,renderData){var $el=renderData.element;test.equals($el.length,1,"Render content refresh"),test.done()}})}),testcase})