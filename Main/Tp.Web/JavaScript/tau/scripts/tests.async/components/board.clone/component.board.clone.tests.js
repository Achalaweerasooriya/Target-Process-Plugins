define(["Underscore","jQuery","tau/configurations/definitions/board.definition.factory","tests.async/testkit/testkit.component.board","tau/components/component.board.clone"],function(_,$,BoardDefinitionFactory,TestKit,Component){var testKit=new TestKit(Component),customLoggedUserId=27,customDefinition={groupName:"testboardz"+ +(new Date),name:"test board",x:{types:["release"]},y:{types:["feature"]},cells:{types:["UserStory"]},limits:{entitystate:{b64_SW4gVGVzdGluZw_2_2_:1,b64_SW4gUHJvZ3Jlc3M_2_:2,b64_X1BsYW5uZWQ_2_:3}},ownerId:customLoggedUserId+5,viewMode:"list",zoomLevel:"5"};testKit.registerSetup("fixtures",function(test,next){var fixtures={};test.set("fixtures",fixtures),next()}),testKit.registerSetup("board.definition",function(test,next){var definition=_.deepClone(customDefinition);test.get("real")&&!definition.id?test.get("configurator").getRestStorage().data(definition.groupName,{userData:{name:definition.name}}).done(function(res){var data=res.data;definition.id=data.id||data.key,test.set("board.definition",definition),next()}):(definition.id=definition.id||_.uniqueId(),test.set("board.definition",definition),next())}),testKit.registerSetup("component.initialize",function(test,next){var configuratorInstance=test.get("configurator");configuratorInstance.boardDefinitionFactory=new BoardDefinitionFactory(configuratorInstance,test.get("board.definition")),configuratorInstance.getBoardDefinitionFactory=function(){return this.boardDefinitionFactory},configuratorInstance.setLoggedUser({id:customLoggedUserId});var componentBus=test.get("componentBus"),componentConfig={context:{configurator:configuratorInstance}};componentBus.initialize(componentConfig);var boardSettings=configuratorInstance.getBoardSettingsFactory().createInstance(test.get("board.definition"));componentBus.fire("boardSettings.ready",{boardSettings:boardSettings}),next()});var testcase={name:"component.board.clone"};return testcase["should render clone button"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0]":function(evt){var $el=evt.data.element,configurator=test.get("configurator"),expected=customDefinition,service=configurator.getRestStorage(),spy=sinon.spy(service,"data"),routing=configurator.getRouting();sinon.stub(routing,"redirect",function(location){test.equals(spy.calledOnce,!0,"save called");var call=spy.getCall(0);test.equals(call.args[0],expected.groupName);var data=call.args[2].publicData;test.equals("createdAt"in data,!0,"set creation date"),test.equals(data.edit,!0,"set edit after create"),test.equals(data.isDraft,!0,"set as draft"),test.equals(data.isShared,!1,"set as private"),test.equals(data.name,expected.name+" Cloned","Add suffix to prev name"),test.equals(data.zoomLevel,expected.zoomLevel,"clone zoom level"),test.equals(data.viewMode,expected.viewMode,"clone view mode"),test.equals(data.ownerId,configurator.getLoggedUser().id,"set current user as owner"),test.same(data.x,expected.x,"clone x"),test.same(data.y,expected.y,"clone y"),test.same(data.cells,expected.cells,"clone cells"),test.done()});var $cloneButton=$el.find(".i-role-clone-trigger");test.equals($cloneButton.size(),1,"has button"),$cloneButton.click()}})}),testcase})