define(["jQuery","Underscore","tests.async/testkit/testkit.component","tau/components/component.relations.container","tests/common/remoteConstants"],function($,_,TestKit,Component,Constants){var ComponentTestKit=function(Fixtures){var testKit=new TestKit(Component);return testKit.registerSetup("fixtures",function(test,next){test.set("fixtures",new Fixtures),next()}),testKit.registerSetup("componentBus",function(test,next){var componentConfig={context:{configurator:test.get("configurator")}};test.set("componentBus",test.get("componentClass").create(componentConfig)),next()}),testKit.registerSetup("component.initialize",function(test,next){var testData=test.get("data");test.get("componentBus").initialize({store:test.get("configurator").getStore(),context:{entity:testData.userStory.us1,getTimeTrackingPolicies:function(){return[]},getTerms:$.noop}}),next()}),testKit},AddRemoveFixtures=function(){return{practices:{planning:{id:Constants.Practices.PLANNING.id}},processes:{scrum:{name:"Process Scrum"+parseInt(Math.random()*1e11),practices:["planning"]}},entityTypes:{us:{id:Constants.EntityTypes.USERSTORY.id,name:"userStory"}},projects:{p_scrum:{name:"Project Scrum"+parseInt(Math.random()*1e11),process:"scrum"}},userStories:{us1:{name:"UserStory"+parseInt(Math.random()*1e11),entityType:"us",project:"p_scrum"}}}},SortingFixtures=function(){return $.extend(!0,{},new AddRemoveFixtures,{practices:{"bug tracking":{id:Constants.Practices["BUG TRACKING"].id}},processes:{scrum:{practices:["planning","bug tracking"]}},entityTypes:{bug:{id:Constants.EntityTypes.BUG.id,name:"bug"}},entityStates:{us_open:{name:"Open"+parseInt(Math.random()*1e11),entityType:"us",process:"scrum",isFinal:!1},us_done:{name:"Done"+parseInt(Math.random()*1e11),entityType:"us",process:"scrum",isFinal:!0},bug_open:{name:"Open"+parseInt(Math.random()*1e11),entityType:"bug",process:"scrum",isFinal:!1},bug_done:{name:"Done"+parseInt(Math.random()*1e11),entityType:"bug",process:"scrum",isFinal:!0}},relationTypes:{dependency:{id:Constants.RelationTypes.DEPENDENCY.id,name:"dependency"},blocker:{id:Constants.RelationTypes.BLOCKER.id,name:"blocker"},relation:{id:Constants.RelationTypes.RELATION.id,name:"relation"}},userStories:{us_open1:{name:"UserStory"+parseInt(Math.random()*1e11),entityType:"us",project:"p_scrum",entityState:"us_open"},us_done1:{name:"UserStory"+parseInt(Math.random()*1e11),entityType:"us",project:"p_scrum",entityState:"us_done"}},bugs:{bug_open1:{name:"Bug"+parseInt(Math.random()*1e11),entityType:"bug",project:"p_scrum",entityState:"bug_open"},bug_done1:{name:"Bug"+parseInt(Math.random()*1e11),entityType:"bug",project:"p_scrum",entityState:"bug_done"}},relations:{relation_master1:{slave:"us1",master:"bug_open1",relationType:"blocker"},relation_master2:{slave:"us1",master:"us_open1",relationType:"dependency"},relation_master3:{slave:"us1",master:"bug_done1",relationType:"blocker"},relation_master4:{slave:"us1",master:"us_done1",relationType:"dependency"},relation_slave1:{master:"us1",slave:"bug_open1",relationType:"dependency"},relation_slave2:{master:"us1",slave:"us_open1",relationType:"blocker"},relation_slave3:{master:"us1",slave:"bug_done1",relationType:"dependency"},relation_slave4:{master:"us1",slave:"us_done1",relationType:"blocker"}}})},testcase={name:"component.relations.container"},addRemoveRelationListTest=function(test,dependencyType){var bus=test.get("bus");bus.on("componentsCreated",function(evt,createdEvt){var listComponent=_.find(createdEvt,function(element){return element.config.dependencyType==dependencyType}).component,afterRenderIndex=0;listComponent.on("afterRender",function(evt,renderData){switch(afterRenderIndex){case 1:test.equals(renderData.element.find(".tau-relations-cont tr").length,1,"A new "+dependencyType+" relation is added and rendered");var $removeButton=renderData.element.find(".i-role-action-detach").eq(0);test.ok($removeButton,"Remove "+dependencyType+" button is rendered"),$removeButton.click();break;case 2:test.equals(renderData.element.find(".tau-relations-cont tr").length,0,"Added "+dependencyType+" relation is removed"),test.done()}afterRenderIndex++}),listComponent.on("childComponentCreated",function(evt){var $entityAddButton=$();evt.data.on("afterRender",function(evt,renderData){$entityAddButton=renderData.element.find(".i-role-add")}),evt.data.on("childComponentCreated",function(evt,childBus){var $popup=$();childBus.on("afterRender",function(evt,renderData){$popup=renderData.element}),childBus.on("result.ready",function(){var $row=$popup.find(".ui-menu-item").eq(1);$row.mouseenter().click(),$entityAddButton.click()})})})}),bus.on("afterRender[0]",function(evt,initEvt){var $el=initEvt.element,$addElements=$el.find(".i-role-action-attach"),$addButton=$addElements[dependencyType=="master"?0:1];test.ok($addButton,"Add "+dependencyType+" button are rendered"),$addButton.click()})},sortRelationListTest=function(test,dependencyType){var bus=test.get("bus"),testData=test.get("data"),maxRelatedEntityTypeId=0,initialRelationsSorted=_.chain(testData.relation).keys().reduce(function(relations,key){var relation=testData.relation[key];return key.indexOf("relation_"+dependencyType)>=0&&relations.push(relation),relation[dependencyType].entityType.id>maxRelatedEntityTypeId&&(maxRelatedEntityTypeId=relation[dependencyType].entityType.id),relations},[]).sortBy(function(relation){return relation[dependencyType].entityState.isFinal?maxRelatedEntityTypeId+relation[dependencyType].entityType.id:relation[dependencyType].entityType.id}).value();bus.on("componentsCreated",function(evt,createdEvt){var listComponent=_.find(createdEvt,function(element){return element.config.dependencyType==dependencyType}).component;listComponent.on("afterRender",function(evt,renderData){var relationLinks=renderData.element.find(".tau-relations-cont .tau-entitylink");test.equals(relationLinks.length,initialRelationsSorted.length,"All "+dependencyType+" relations are rendered"),test.equals(_.map(initialRelationsSorted,function(relation){return relation[dependencyType].id.toString()}).join(","),_.map(relationLinks,function(relationLink){return $(relationLink).text()}).join(","),"All "+dependencyType+" relations are sorted by state and entity type"),test.done()})})},addRemoveTestKit=new ComponentTestKit(function(){var addRemoveFixtures=new AddRemoveFixtures;return{practices:addRemoveFixtures.practices,processes:addRemoveFixtures.processes,projects:addRemoveFixtures.projects,entityTypes:addRemoveFixtures.entityTypes,userStories:addRemoveFixtures.userStories}}),sortingTestKit=new ComponentTestKit(function(){var sortingFixtures=new SortingFixtures;return{practices:sortingFixtures.practices,processes:sortingFixtures.processes,projects:sortingFixtures.projects,entityTypes:sortingFixtures.entityTypes,entityStates:sortingFixtures.entityStates,relationTypes:sortingFixtures.relationTypes,userStories:sortingFixtures.userStories,bugs:sortingFixtures.bugs,relations:sortingFixtures.relations}});return testcase["should add and remove master entities"]=addRemoveTestKit.test(function(test){addRemoveRelationListTest(test,"master")}),testcase["should render master entities sorted"]=sortingTestKit.test(function(test){sortRelationListTest(test,"master")}),testcase["should add and remove slave entities"]=addRemoveTestKit.test(function(test){addRemoveRelationListTest(test,"slave")}),testcase["should render slave entities sorted"]=sortingTestKit.test(function(test){sortRelationListTest(test,"slave")}),testcase})