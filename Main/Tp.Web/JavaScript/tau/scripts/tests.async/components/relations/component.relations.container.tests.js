define(["jQuery","tests.async/testkit/testkit.component","tau/components/component.relations.container","tests/common/remoteConstants"],function($,TestKit,Component,Constants){var testKit=new TestKit(Component);testKit.registerSetup("fixtures",function(test,next){var entityTypes={us:{id:Constants.EntityTypes.USERSTORY.id,name:"userStory"}},practices={planning:{id:Constants.Practices.PLANNING.id}},processes={scrum:{name:"scrum"+parseInt(Math.random()*1e11),practices:["planning"]}},projects={p_scrum:{name:"Project Scrum"+parseInt(Math.random()*1e11),process:"scrum"}},userStories={us1:{name:"US1",entityType:"us",project:"p_scrum"}},fixtures={practices:practices,entityTypes:entityTypes,processes:processes,projects:projects,userStories:userStories};test.set("fixtures",fixtures),next()}),testKit.registerSetup("componentBus",function(test,next){var componentConfig={context:{configurator:test.get("configurator")}};test.set("componentBus",test.get("componentClass").create(componentConfig)),next()}),testKit.registerSetup("component.initialize",function(test,next){var testData=test.get("data");test.get("componentBus").initialize({store:test.get("configurator").getStore(),context:{entity:testData.userStory.us1,getTimeTrackingPolicies:function(){return[]},getTerms:$.noop}}),next()});var testcase={name:"component.relations.container"};return testcase["should add and remove entities"]=testKit.test(function(test){var bus=test.get("bus"),masterListComponent,slaveListComponent;bus.on("componentsCreated",function(evt,createdEvt){var findListComponent=function(dependencyType){return _.find(createdEvt,function(element){return element.config.dependencyType==dependencyType}).component};masterListComponent=findListComponent("master"),slaveListComponent=findListComponent("slave")}),bus.on("afterRender[0]",function(evt,initEvt){var $el=initEvt.element,$addElements=$el.find(".i-role-action-attach");test.equals($addElements.length,2,"Add buttons are presented");var $masterAddButton=$addElements[0],$slaveAddButton=$addElements[1],totalAfterRenderIndex=0,testRelationList=function(listComponent,$addButton,dependencyType){var $entityAddButton=$(),inlineAfterRenderIndex=0;listComponent.on("afterRender",function(evt,renderData){if(inlineAfterRenderIndex==0){inlineAfterRenderIndex++,totalAfterRenderIndex++,test.equals(renderData.element.find(".tau-relations-cont tr").length,1,"Added "+dependencyType+" relation rendered");var $detachButton=renderData.element.find(".i-role-action-detach").eq(0);$detachButton.click()}else inlineAfterRenderIndex==1&&(totalAfterRenderIndex++,test.equals(renderData.element.find(".tau-relations-cont tr").length,0,"Relation removed for "+dependencyType+" type"));totalAfterRenderIndex==4&&test.done()}),listComponent.on("childComponentCreated",function(evt){evt.data.on("afterRender",function(evt,renderData){$entityAddButton=renderData.element.find(".i-role-add")}),evt.data.on("childComponentCreated",function(evt,childBus){var $popup=$();childBus.on("afterRender",function(evt,renderData){$popup=renderData.element}),childBus.on("result.ready",function(){var $row=$popup.find(".ui-menu-item").eq(1);$row.mouseenter().click(),$entityAddButton.click()})})}),$addButton.click()};testRelationList(masterListComponent,$masterAddButton,"master"),testRelationList(slaveListComponent,$slaveAddButton,"slave")})}),testcase})