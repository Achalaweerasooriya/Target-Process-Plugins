define(["jQuery","tests.async/testkit/testkit.component","tau/components/component.board.startScreen","tests/common/remoteConstants"],function($,TestKit,Component,Constants){var testKit=new TestKit(Component);testKit.registerSetup("fixtures",function(test,next){test.set("fixtures",{});var storage=test.get("configurator").getRestStorage();test.set("boards.groupName","teztboaaardszzz"+ +(new Date)),test.set("boardTemplates.groupName","testboardztemplatez"+ +(new Date)),test.set("boardTemplateGroups.groupName","testboardztemplatezgraupz"+ +(new Date)),test.get("configurator").setLoggedUser({isAdministrator:!0});var idd=function(){return _.uniqueId("testboardztemplatez"+ +(new Date))},ids=[idd(),idd(),idd(),idd(),idd()];$.when(storage.data(test.get("boardTemplates.groupName"),ids[0],{scope:"Public ",publicData:{name:"Blank",description:"bla bla custom blank",tags:["kanban"]}}),storage.data(test.get("boardTemplates.groupName"),ids[1],{scope:"Public",publicData:{name:"Scrum",description:"bla bla custom 2",tags:["boobs","sex"]}}),storage.data(test.get("boardTemplates.groupName"),ids[2],{scope:"Public",publicData:{name:"Dummy",description:"not a scrum",tags:["kanban","lesbian"]}}),storage.data(test.get("boardTemplates.groupName"),ids[3],{scope:"Public",publicData:{name:"Kill me",description:"with pleasure",tags:["kanban","porn"]}}),storage.data(test.get("boardTemplates.groupName"),ids[4],{scope:"Public",publicData:{name:"Fuck",description:"with pleasure",tags:["agile","porn"]}}),storage.data(test.get("boardTemplateGroups.groupName"),undefined,{scope:"Public",publicData:{name:"scrum",boardTemplateIds:[ids[0],ids[2],ids[3]]}}),storage.data(test.get("boardTemplateGroups.groupName"),undefined,{scope:"Public",publicData:{name:"kanban",boardTemplateIds:[ids[0],ids[1]]}})).done(_.bind(function(res){next()},this))}),testKit.registerSetup("component.initialize",function(test,next){var configuratorInstance=test.get("configurator"),store=configuratorInstance.getStore();test.get("real")===!1?(sinon.stub(store.config.proxy.service,"get",function(command){if(command.type=="context")command.callbacks.success({id:command.config.id,acid:"345"});else if(!command.config.id){var collection=_.toArray(testData[command.type]);setTimeout(function(){command.callbacks.success(collection)},0)}}),test.set("removeSpy",sinon.stub(store.config.proxy.service,"remove",function(command){command.callbacks.success()}))):test.set("removeSpy",sinon.spy(store.config.proxy.service,"remove"));var testData=test.get("data"),componentBus=test.get("componentBus");componentBus.initialize({context:{configurator:test.get("configuratorInstance")},options:{boardTemplatesGroupName:test.get("boardTemplates.groupName"),boardTemplateGroupsGroupName:test.get("boardTemplateGroups.groupName"),boardsGroupName:test.get("boards.groupName")}}),next()});var testcase={name:"component.board.startScreen"};return testcase["should render content and allow to choose"]=testKit.test(function(test){var configurator=test.get("configuratorInstance"),spy;return testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){var $el=renderData.element;test.equals($el.length,1,"render el");var $triggers=$el.find(".i-role-trigger");test.equals($triggers.length,3,"triggers");var $t=$triggers.eq(0);test.equals($t.data("type"),"scrum","triggers");var $t=$triggers.eq(1);test.equals($t.data("type"),"kanban","triggers");var $t=$triggers.eq(2);test.equals($t.data("type"),"scratch","triggers"),spy=sinon.spy(configurator.getRestStorage(),"data");var st=sinon.stub(configurator.getRouting(),"redirect",function(){});$triggers.eq(1).click()},"bus boardsSet.applied":function(){test.equals(spy.callCount,2,"Saved"),test.done()}})}),testcase})