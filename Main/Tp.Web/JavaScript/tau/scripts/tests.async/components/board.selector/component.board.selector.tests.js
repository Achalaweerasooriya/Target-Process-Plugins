define(["Underscore","jQuery","tau/core/event","tests.async/testkit/testkit.component.board","tau/components/component.board.selector","tests/common/remoteConstants"],function(_,$,Event,TestKit,Component,Constants){var testKit=new TestKit(Component);testKit.registerSetup("fixtures",function(test,next){var practices={planning:{id:Constants.Practices.PLANNING.id},requirements:{id:Constants.Practices.REQUIREMENTS.id}},processes={scrum:{name:"scrum"+ +(new Date),practices:["planning","requirements"]}},users={mahmud:{firstName:"Mahmud",lastName:"Padgigai",login:"mahmud"+ +(new Date),email:"mahmud"+ +(new Date)+"@padgigay.by",password:"1",isAdministrator:!0}},projectMembers={p_scrum_mahmud:{user:"mahmud"}},projects={p_scrum:{name:"Project Scrum"+ +(new Date),process:"scrum",projectMembers:["p_scrum_mahmud"]},p_scrum_2:{name:"Project Scrum 2"+ +(new Date),process:"scrum"}},teams={teamX:{name:"teamX"+ +(new Date)}},fixtures={practices:practices,processes:processes,users:users,projects:projects,projectMembers:projectMembers,teams:teams};test.set("fixtures",fixtures),next()}),testKit.registerSetup("restStorage.data",function(test,next){var fixture=test.get("data"),data=[{publicData:{name:"Atos",isShared:!0},userData:{menuIsVisible:!0,menuNumericPriority:4}},{publicData:{name:"Portos",isShared:!0},userData:{menuIsVisible:!1,menuNumericPriority:3}},{publicData:{name:"Aramis",isShared:!0},userData:{menuIsVisible:!0,menuNumericPriority:2}},{publicData:{name:"Fantomas",isShared:!0},userData:{menuIsVisible:!1,menuNumericPriority:1}},{publicData:{name:"Custom access",isShared:!0,customSharedData:{isActive:!0,projectIds:[fixture.project.p_scrum.id],teamIds:[fixture.team.teamX.id]}},userData:{menuIsVisible:!1,menuNumericPriority:10}},{publicData:{name:"Custom access invisible",isShared:!0,customSharedData:{isActive:!0,projectIds:[fixture.project.p_scrum_2.id],teamIds:[fixture.team.teamX.id]}},userData:{menuIsVisible:!1,menuNumericPriority:11}}],definition=test.get("board.definition"),groupName=definition.groupName;if(test.get("real")===!1){var storageData=_.map(data,function(item,i){return _.extend(item,{key:(11*(1+i)).toString()})});test.set("restStorage.data",storageData);var tmpBoardDefinition=test.get("board.definition");tmpBoardDefinition.id=storageData[1].key,test.set("board.definition",tmpBoardDefinition),next()}else{var storage=test.get("configurator").getRestStorage(),functions=[];_.forEach(data,function(boardData){functions.push(function(next){storage.data(groupName,boardData).done(function(r){next(!1,r.data)})})}),_.series(functions,function(err,storageData){test.set("restStorage.data",storageData);var tmpBoardDefinition=test.get("board.definition");tmpBoardDefinition.id=storageData[1].key,test.set("board.definition",tmpBoardDefinition),next()})}}),testKit.registerSetup("configurator.externalService",function(test,next){var configuratorInstance=test.get("configurator");next()}),testKit.registerSetup("store.stub",function(test,next){var configuratorInstance=test.get("configurator"),store=configuratorInstance.getStore();test.get("real")===!1&&sinon.stub(store.config.proxy.service,"get",function(command){command.callbacks.success({id:command.config.id,acid:"234567896789322345l"})}),next()}),testKit.registerSetup("context",function(test,next){next()}),testKit.registerSetup("componentBus.create",function(test,next){test.set("componentBus",test.get("componentClass").create()),next()}),testKit.registerSetup("componentBus.initialize",function(test,next){var componentBus=test.get("componentBus"),configuratorInstance=test.get("configurator");configuratorInstance.setLoggedUser(test.get("data").user.mahmud);var componentConfig={context:{configurator:configuratorInstance}};componentBus.initialize(componentConfig);var def=test.get("board.definition"),boardSettings=configuratorInstance.getBoardSettingsFactory().createInstance(def);componentBus.fire("boardSettings.ready",{boardSettings:boardSettings}),test.set("boardSettings",boardSettings),next()}),testKit.registerSetup("board.definition.before",function(test,next){test.set("board.definition",{id:100500}),next()}),testKit.setSetupsOrder(["options","configurator","configurator.externalService","fixtures","fixtures.load","store","store.stub","board.definition.before","board.definition","board.slice","restStorage","restStorage.data","context","componentBus.create","listeners","componentBus.initialize"]),testKit.registerSetup("restStorage",function(test,next){var configuratorInstance=test.get("configurator"),definition=test.get("board.definition"),i=0;test.get("real")===!1?configuratorInstance.setRestStorageService(sinon.spy(function(ajaxConfig){var resp={},$scope=ajaxConfig.$scope;if($scope.$group=="settings")resp={};else{switch(i){case 0:resp={group:{name:definition.groupName,id:2},key:$scope.$key,ownerId:1,scope:"Public",publicData:test.get("restStorage.data")[1].publicData,userData:test.get("restStorage.data")[1].userData,id:definition.id};break;case 1:resp=_.map(test.get("restStorage.data"),function(v){return _.extend(v,v.publicData,v.userData)})}i++}var deferred=$.Deferred();return deferred.resolve(resp),deferred})):configuratorInstance.setRestStorageService(sinon.spy($.ajax)),next()});var testCase={name:"component.board.selector"};return testCase["should render list"]=testKit.test(function(test){var bus=test.get("bus"),testFlow={bus:bus,"bus afterRender[0]":function(evt){var $el=evt.data.element,storageData=test.get("restStorage.data"),configurator=test.get("configurator"),appStateStore=configurator.getAppStateStore(),$menu=$el.find(".i-role-group");test.equals($menu.length,1,"One group");var $links=$menu.find("a");test.equals($links.length,2,"Expected links are rendered"),test.equals($links.eq(0).text().trim(),"Aramis","Expected links are rendered"),test.equals($links.eq(1).text().trim(),"Atos","Expected links are rendered");var $showMore=$el.find(".i-role-action-showmore");test.equals($showMore.length,1,"Link to show more"),test.equals($showMore.text().trim(),"Portos More","text"),$showMore.click();var $p=$showMore.tauBubble("widget");test.equals($p.length,1,"Bubble"),test.equals($p.is($showMore),!1,"Bubble");var $moreLinks=$p.find("a");test.equals($moreLinks.length,3,"Other links"),test.equals($moreLinks.eq(0).text().trim(),"Fantomas","Expected links are rendered"),test.equals($moreLinks.eq(1).text().trim(),"Portos","Expected links are rendered"),test.equals($moreLinks.eq(2).text().trim(),"Custom access","Expected links are rendered"),test.done()}};Event.subscribeOn(testFlow)}),testCase["should allow dnd"]=testKit.test(function(test){var bus=test.get("bus"),spy=test.get("configurator").getRestStorageService(),$p,testFlow={bus:bus,"bus afterRender[0]":function(evt){var $el=evt.data.element,$menu=$el.find(".i-role-list");test.equals($menu.length,1,"One group");var $links=$menu.find(".i-role-item");test.equals($links.length,2,"Expected links are rendered"),test.equals($links.eq(0).text().trim(),"Aramis","Expected links are rendered"),test.equals($links.eq(1).text().trim(),"Atos","Expected links are rendered");var $showMore=$el.find(".i-role-action-showmore");test.equals($showMore.length,1,"Link to show more"),$showMore.click(),$p=$showMore.tauBubble("widget"),test.equals($p.length,1,"Bubble"),test.equals($p.is($showMore),!1,"Bubble");var $moreLinks=$p.find(".i-role-item");test.equals($moreLinks.length,3,"Other links"),test.equals($moreLinks.eq(0).text().trim(),"Fantomas","Expected links are rendered"),test.equals($moreLinks.eq(1).text().trim(),"Portos","Expected links are rendered"),test.equals($moreLinks.eq(2).text().trim(),"Custom access","Expected links are rendered"),test.equals($moreLinks.eq(0).data("draggable"),null,"No sortable by default");var $confButton=$p.find(".i-role-action-configure"),$doneButton=$p.find(".i-role-action-done");test.equals($confButton.length,1,"Link to conf"),test.equals($doneButton.length,1,"Link to done"),$confButton.click(),$links.eq(0).trigger("mouseenter"),$moreLinks.eq(0).trigger("mouseenter"),test.equals($links.eq(0).data("draggable")!=null,!0,"sortable"),test.equals($moreLinks.eq(0).data("draggable")!=null,!0,"sortable"),spy.reset();var $link=$moreLinks.eq(0),$prevLink=$links.eq(0);$el.data("tauSortable").dndOptions.start({target:$link},{}),$link.insertAfter($prevLink),$el.data("tauSortable").currentGroup=$menu,$el.data("tauSortable").dndOptions.stop({target:$link},{})},"bus afterRender[0]+dragndrop.completed[0]":function(evt,renderData){test.equals(spy.callCount,0,"No request to update");var $doneButton=$p.find(".i-role-action-done");test.equals($doneButton.length,1,"Link to done"),$doneButton.click()},"bus afterRender[0]+edit.completed[0]":function(evt,renderData){var $el=renderData.element;test.equals($el.data("tauSortable"),null,"No sortable after"),test.equals($el.find(".i-role-item").eq(0).data("draggable"),null,"No sortable after"),test.equals(spy.callCount,5,"All boards should be sent to update");var call=spy.getCall(0),userData=JSON.parse(call.args[0].data).userData;test.equals(userData.menuIsVisible,1,"Correct request"),test.equals(userData.menuNumericPriority,1,"Correct request"),call=spy.getCall(3),userData=JSON.parse(call.args[0].data).userData,test.equals(userData.menuIsVisible,0,"Correct request"),test.equals(userData.menuNumericPriority,4,"Correct request");var $showMore=$el.find(".i-role-action-showmore");test.equals($showMore.length,1,"Link to show more"),test.equals($showMore.text().trim(),"Portos More","text stay"),test.done()}};Event.subscribeOn(testFlow)}),testCase["should change acid on links list"]=testKit.test(function(test){var bus=test.get("bus"),testFlow={bus:bus,"bus afterRender[0]":function(){var state={acid:"new acid",detailed:"true",option1:"selected"};test.set("state",state);var configurator=test.get("configurator"),appStateStore=configurator.getAppStateStore();appStateStore.set({set:state})},"bus afterRender[0]+linksUpdated[1]":function(evt){var $el=evt["afterRender[0]"].data.element,storageData=_.filter(test.get("restStorage.data"),function(v){return v.userData.menuIsVisible}),$links=$el.find("a"),expectedCount=storageData.length;test.equals($links.length,expectedCount,"Expected links are rendered");var configurator=test.get("configurator"),appStateStore=configurator.getAppStateStore(),state=test.get("state"),fields=[];for(var key in state)fields.push(key);var hashes=[];for(var i=0;i<storageData.length;i++){var $link=$links.eq(i),href=$link.attr("href").substring(1);hashes.push(href)}for(var i=0;i<hashes.length;i++)configurator.getExternal().setHash(hashes[i]),appStateStore.get({fields:fields,callback:function(result){for(var i=0;i<fields.length;i++){var fieldsName=fields[i];test.equal(result[fieldsName],state[fieldsName],"State["+fieldsName+"] is valid")}}});test.done()}};Event.subscribeOn(testFlow)}),testCase})