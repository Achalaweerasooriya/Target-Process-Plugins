define(["jQuery","tau/configurator","tests.async/testkit/testkit.component.board","tau/core/external.fake","tau/components/component.board.container","tau/ui/extensions/container/ui.extension.container.childrenEvents","tests/common/remoteConstants"],function($,LEGACY_CONFIGURATOR,TestKit,FakeExternalService,Component,ExtensionChildrenEvents,Constants){var testKit=new TestKit(Component,{name:"MegaBoard",viewMode:"list",zoomLevel:0,min:1,max:20,x:{types:["AssignedUser"]},cells:{types:["UserStory"]}});testKit.registerSetup("fixtures",function(test,next){var entityTypes={us:Constants.EntityTypes.USERSTORY,release:Constants.EntityTypes.RELEASE,feature:Constants.EntityTypes.FEATURE},practices={planning:{id:Constants.Practices.PLANNING.id},requirements:{id:Constants.Practices.REQUIREMENTS.id},bugTracking:{id:Constants.Practices["BUG TRACKING"].id}},processes={scrum:{name:"scrum"+ +(new Date),practices:["planning","requirements","bugTracking"]}},projects={p_scrum:{name:"Project Scrum"+ +(new Date),process:"scrum"}},releases={},features={};for(var r=0;r<4;r++){var releaseName="release"+r;releases[releaseName]={name:"Release_"+r+"_"+ +(new Date),entityType:"release",project:"p_scrum"};var featureName="feature"+r;features[featureName]={name:"Feature_"+r+"_"+ +(new Date),entityType:"feature",project:"p_scrum",release:releaseName}}var userStories={};_(releases).chain().keys().each(function(releaseId){_(features).chain().keys().each(function(featureId){for(var s=0;s<4;s++){var userStoryName=["us",releaseId,featureId,s].join("_");userStories[userStoryName]={name:userStoryName,entityType:"us",project:"p_scrum",release:releaseId,feature:featureId}}})});var fixtures={entityTypes:entityTypes,practices:practices,processes:processes,projects:projects,releases:releases,features:features,userStories:userStories};test.set("fixtures",fixtures),next()}),testKit.registerSetup("componentBus",function(test,next){test.set("componentBus",test.get("componentClass").create({extensions:[ExtensionChildrenEvents]})),next()}),testKit.registerSetup("component.initialize",function(test,next){var configuratorInstance=test.get("configurator");configuratorInstance.getFeaturesService({"quick.add":!0});var store=configuratorInstance.getStore();configuratorInstance.getApplicationContextService(),configuratorInstance.setExternalService(new FakeExternalService),configuratorInstance.getClipboardManager().restStorage.sources.splice(0,1);var testData=test.get("data"),projectID=testData.project.p_scrum.id;test.get("real")===!1&&sinon.stub(store.config.proxy.service,"get",function(command){if(command.type=="context")command.callbacks.success({id:command.config.id,acid:"345"});else if(!command.config.id){var collection=_.toArray(testData[command.type]);setTimeout(function(){command.callbacks.success(collection)},0)}}),store.get("context",{projectId:projectID,fields:["acid"]},{success:function(r){var componentBus=test.get("componentBus"),definition=test.get("board.definition"),acid=r.data[0].acid,fakeWindow={document:{title:""},location:{hash:"#",href:"http://localhost/targetprocess/RestUI/board.aspx?acid="+acid+"#"}},fakeExternal=new FakeExternalService(fakeWindow);LEGACY_CONFIGURATOR.setWindow(fakeWindow),LEGACY_CONFIGURATOR.setExternalService(fakeExternal),configuratorInstance.setExternalService(fakeExternal),configuratorInstance.setBoardSettingsOptions(definition);var componentConfig={context:{configurator:configuratorInstance,entity:{id:test.get("board.definition").id},acid:acid}};componentConfig.children=[{type:"board.plus.list"}],componentBus.initialize(componentConfig);var boardSettings=configuratorInstance.getBoardSettingsFactory().createInstance(test.get("board.definition"));componentBus.fire("boardSettings.ready",{boardSettings:boardSettings}),next()}}).done()});var testcase={name:"component.board.plus.quickAdd for view mode list"};return testcase["render and add new entity"]=testKit.test(function(test){testKit.flow(test,{"bus board.plus.list.slice.cells.quickadd.api.ready[0] + afterRender[0]+board.plus.list.model.cellActions.ready[0] + board.plus.list.domWrapper.ready[0]":function(evt,quickAddApi,renderData){$("body").append(renderData.element);var e=jQuery.Event("mouseenter",{relatedTarget:$("body").get(0)}),$boardBody=renderData.element.find(".i-role-board-body"),$grid=$boardBody.find(".i-role-grid"),$addBtnPanel=$boardBody.find(".tau-quick-add");test.ok($addBtnPanel.size()===1,"Quick Add button should be added to grid"),test.ok($addBtnPanel.css("display")==="none","Button should be hidden by default"),$grid.trigger(e),test.ok($addBtnPanel.css("display")!=="none","Button should become visible");var self=this,$addBtn=$addBtnPanel.find(".tau-btn.tau-add");$addBtn.bind("taububbleloadcontent",function(){var $popup=$(this).tauBubble("widget"),form=$popup.find("form").eq(0),$nameField=form.find("[name=Name]");test.ok($nameField.size()===1,"Quick add from is not empty"),quickAddApi.on("after.listAddData",function(evt,data){var item=data.result[0].dataItem.data;test.equals(item.name==="test",!0,"save entity"),self.bus.fire("test.quickadd.submitted",{})}),$nameField.val("test"),form.submit()}),$addBtn.click()},"bus test.quickadd.submitted":function(evt,cell){test.ok(!0,"render entity"),test.done()}})}),testcase})