define(["tau/core/event","tests.async/components/board.editor.access/component.board.editor.access.base.tests"],function(Event,BaseTest){function getActionShare($el){return $el.find("[role=action-share]")}function getFixture(test){var fixture=test.get("data");return{team:fixture.team.teamX,project:fixture.project.p_scrum}}function getElementsForTeamId($el,id){return $el.find(".i-role-section-teams .i-role-item").has(":checkbox[value="+id+"]")}function getElementsForProjectId($el,id){return $el.find(".i-role-section-projects .i-role-item").has(":checkbox[value="+id+"]")}function assertAccessOptions($el,test){var $widget=getActionShare($el);test.equals($widget.size(),3,"All 3 access options should be visible"),test.equals($widget.eq(0).val(),"private","Private access should be allowed"),test.equals($widget.eq(1).val(),"public","Public access should be allowed"),test.equals($widget.eq(2).val(),"custom","Custom access should be allowed")}function assertFixtureIsPresent($el,test){var fixture=getFixture(test),$teams=getElementsForTeamId($el,fixture.team.id);test.equals($teams.length,1,'Should be exactly one team with id "'+fixture.team.id+'"'),test.equals($teams.text(),fixture.team.name,'Should be exactly one team with name "'+fixture.team.name+'"');var $projects=getElementsForProjectId($el,fixture.project.id);test.equals($projects.length,1,'Should be exactly one project with id "'+fixture.project.id+'"'),test.equals($projects.text(),fixture.project.name,'Should be exactly one project with name "'+fixture.project.name+'"')}function assertStateIsDisabled($el,test,name){var $teamProjectManager=$el.find(".i-role-popupcontent");test.equals($teamProjectManager.hasClass("tau-disabled"),!0,"Projects and teams popup disabled for "+name+" access"),test.equals($teamProjectManager.find(":input:enabled").length,0,"Projects and teams inputs disabled for "+name+" access")}return BaseTest({generateLoggedUser:function(ctx){return{id:ctx.loggedUser.id,name:"Me",isAdministrator:!0,role:"Developer"}},testcaseName:"should show share checkbox for admin users",testcaseCallback:function(test){var bus=test.get("bus"),testFlow={bus:bus,"bus afterRender[0]":function(evt){var $el=evt.data.element;$el.hide().appendTo($("body"));var $widget=getActionShare($el),fixture=getFixture(test);assertAccessOptions($el,test),assertFixtureIsPresent($el,test);var expectedCustomSharedData={},boardSettingsCallbackFired=0,boardSettings=test.get("boardSettings");boardSettings.bind({fields:["customSharedData"],listener:test,callback:function(res){boardSettingsCallbackFired++,test.deepEqual(res.customSharedData,expectedCustomSharedData,"Custom shared data in boardSettings callback ("+boardSettingsCallbackFired+")")}}),assertStateIsDisabled($el,test,"private"),expectedCustomSharedData={isActive:!1,projectIds:[],teamIds:[]},$widget.eq(1).click(),assertStateIsDisabled($el,test,"public"),setTimeout(function(){expectedCustomSharedData={isActive:!0,projectIds:[],teamIds:[]},$widget.eq(2).click();var $teamProjectManager=$el.find(".i-role-popupcontent");test.equals($teamProjectManager.hasClass("tau-disabled"),!1,"Projects and teams popup enabled for custom access"),test.equals($teamProjectManager.find(":input:disabled").length,0,"Projects and teams inputs enabled for custom access"),expectedCustomSharedData={isActive:!0,projectIds:[fixture.project.id],teamIds:[fixture.team.id]};var $teams=getElementsForTeamId($el,fixture.team.id);$teams.find(":checkbox").prop("checked",!0);var $projects=getElementsForProjectId($el,fixture.project.id);$projects.find(":checkbox").prop("checked",!0).click(),test.equals(boardSettingsCallbackFired,3,"Callback for customSharedData should be called 3 times"),test.done()},500)}};Event.subscribeOn(testFlow)}})})