define(["Underscore","jQuery","tau/configurator","app.path","tests.async/testkit/testkit.component.board","tests/common/remoteConstants","tau/components/component.board.container","tau/ui/extensions/container/ui.extension.container.childrenEvents","tau/utils/utils.date","tau/ui/extensions/board.plus/ui.board.plus.utils"],function(_,$,configurator,AppPath,TestKit,Constants,ComponentBoardContainer,ExtensionChildrenEvents,DateUtils,BoardUtils){var USER_STORY_COUNT=10,testKit=new TestKit(ComponentBoardContainer,{name:"MegaBoard",viewMode:"board",zoomLevel:1,x:{types:[]},y:{types:[]},cells:{types:["userStory","release","feature","task","bug","request"],filter:""}}),admin={};testKit.registerSetup("fixtures",function(test,next){if(test.get("real")==0){test.done();return}var entityTypes={us:Constants.EntityTypes.USERSTORY,release:Constants.EntityTypes.RELEASE,feature:Constants.EntityTypes.FEATURE,task:Constants.EntityTypes.TASK,bug:Constants.EntityTypes.BUG,request:Constants.EntityTypes.REQUEST,impediment:Constants.EntityTypes.IMPEDIMENT,user:Constants.EntityTypes.USER},configuratorInstance=test.get("configurator");configuratorInstance.getStore().get("role",{fields:["id","name"]}).turboGet("user",{$query:{firstName:{$contains:"Administrator"}},fields:["id","firstName","lastName"]}).done({success:function(result){var ALL_ROLES={};admin=result[1].data[0],_.each(result[0].data,function(role){ALL_ROLES[role.name.toUpperCase()]=role});var roles={dev:ALL_ROLES.DEVELOPER,sp:ALL_ROLES["SUPPORT PERSON"],pm:ALL_ROLES["PROJECT MANAGER"],tm:ALL_ROLES["TOP MANAGER"],qa:ALL_ROLES["QA ENGINEER"]},practices={planning:{id:Constants.Practices.PLANNING.id},requirements:{id:Constants.Practices.REQUIREMENTS.id},helpDesk:{id:Constants.Practices["HELP DESK"].id},bugTracking:{id:Constants.Practices["BUG TRACKING"].id}},severities={blockingSeverity:{id:Constants.Severities.BLOCKING.id,name:Constants.Severities.BLOCKING.name}},users={mahmud:{firstName:"Mahmud",lastName:"Padgigai",login:"mahmud"+ +(new Date),email:"mahmud"+ +(new Date)+"@padgigay.by",password:"1"},egorka:{firstName:"Egorka",lastName:"Korolek",login:"egorka"+ +(new Date),email:"Egorka"+ +(new Date)+"@Korolek.by",password:"1"},polikarp:{firstName:"Polikarp",lastName:"Polikarpich",login:"polikarp"+ +(new Date),email:"polikarp"+ +(new Date)+"@Polikarpich.by",password:"1"},bugHunter:{firstName:"Bug",lastName:"Hunter",login:"Bug"+ +(new Date),email:"Bug"+ +(new Date)+"@Hunter.by",password:"1"}},entityStates={open:{name:"Open"+ +(new Date),numericPriority:1,entityType:"impediment",process:"scrum"},inprogress:{name:"In Progress "+ +(new Date),numericPriority:2,entityType:"impediment",process:"scrum"},done:{name:"Done "+ +(new Date),numericPriority:3,isFinal:!0,isPlanned:!1,isInitial:!1,entityType:"impediment",process:"scrum"},openTask:{name:"Open Task"+ +(new Date),numericPriority:1,isInitial:!0,entityType:"task",process:"scrum"},plannedTask:{name:"Planned Task"+ +(new Date),numericPriority:1,isPlanned:!0,entityType:"task",process:"scrum"},inprogressTask:{name:"In Progress Task"+ +(new Date),numericPriority:2,entityType:"task",process:"scrum"},doneTask:{name:"Done Task"+ +(new Date),numericPriority:3,isFinal:!0,isPlanned:!1,isInitial:!1,entityType:"task",process:"scrum"},openUS:{name:"Open US"+ +(new Date),numericPriority:1,isInitial:!0,entityType:"us",process:"scrum"},plannedUS:{name:"Planned US"+ +(new Date),numericPriority:1,isPlanned:!0,entityType:"us",process:"scrum"},inprogressUS:{name:"In Progress US"+ +(new Date),numericPriority:2,entityType:"us",process:"scrum"},doneUS:{name:"Done US"+ +(new Date),numericPriority:3,isFinal:!0,isPlanned:!1,isInitial:!1,entityType:"us",process:"scrum"},openBug:{name:"Open Bug"+ +(new Date),numericPriority:1,isInitial:!0,entityType:"bug",process:"scrum"},plannedBug:{name:"Planned Bug"+ +(new Date),numericPriority:1,isPlanned:!0,entityType:"bug",process:"scrum"},inprogressBug:{name:"In Progress Bug"+ +(new Date),numericPriority:2,entityType:"bug",process:"scrum"},doneBug:{name:"Done Bug"+ +(new Date),numericPriority:3,isFinal:!0,isPlanned:!1,isInitial:!1,entityType:"bug",process:"scrum"}},processes={scrum:{name:"scrum"+ +(new Date),practices:["planning","requirements","helpDesk","bugTracking"]}},projects={p_scrum:{name:"Project Scrum"+ +(new Date),process:"scrum",projectMembers:["p_scrum_mahmud","p_scrum_egorka","p_scrum_polikarp","p_scrum_bugHunter"]}},projectMembers={p_scrum_mahmud:{user:"mahmud",role:"dev"},p_scrum_egorka:{user:"egorka",role:"sp"},p_scrum_polikarp:{user:"polikarp",role:"pm"},p_scrum_bugHunter:{user:"bugHunter",role:"qa"}},impediments={openImpediment:{isPrivate:!1,name:"Open Impediment"+ +(new Date),entityState:"open",project:"p_scrum",assignable:"userStory_0"},open1Impediment2:{isPrivate:!1,name:"Open Impediment2"+ +(new Date),entityState:"open",project:"p_scrum",assignable:"userStory_0"},bugOpenImpedimentImpediment:{isPrivate:!1,name:"Open Bug Impediment"+ +(new Date),entityState:"open",project:"p_scrum",assignable:"openedBug"},closeImpediment:{isPrivate:!1,name:"Close Impediment"+ +(new Date),entityState:"done",project:"p_scrum",assignable:"userStory_0"},close2Impediment:{isPrivate:!1,name:"Close Impediment"+ +(new Date),entityState:"done",project:"p_scrum",assignable:"userStory_2"},openFeatureImpediment1:{isPrivate:!1,name:"Open Impediment2"+ +(new Date),entityState:"open",project:"p_scrum",assignable:"mainPageFeature"},openFeatureImpediment2:{isPrivate:!1,name:"Open Bug Impediment"+ +(new Date),entityState:"open",project:"p_scrum",assignable:"mainPageFeature"},closeFeatureImpediment:{isPrivate:!1,name:"Close Impediment"+ +(new Date),entityState:"done",project:"p_scrum",assignable:"mainPageFeature"},closeFeatureImpediment:{isPrivate:!1,name:"Close Impediment"+ +(new Date),entityState:"done",project:"p_scrum",assignable:"mainPageFeature"}},assignments={request1_mahmud:{generalUser:"mahmud",role:"sp"},request2_mahmud:{generalUser:"mahmud",role:"sp"},loginFeature_egorka:{generalUser:"egorka",role:"sp"}},roleEfforts={f_lf:{assignable:"firstOpenUS",effort:666,role:"dev"}},features={loginFeature:{name:"Login Feature",tags:"feature, c#",project:"p_scrum",entityType:"feature",assignments:["loginFeature_egorka"],userStories:["firstOpenUS","secondOpenUS","firstPlannedUS","firstInProgressUS","secondInProgressUS","threedInProgressUS","firstDoneUS","secondDoneUS"],initialEstimate:70},mainPageFeature:{name:"Main Page feature",tags:"feature, c#, api",project:"p_scrum",entityType:"feature",initialEstimate:150},findFriendsFeature:{name:"Find friends feature",tags:"feature, c#, search, integration",project:"p_scrum",entityType:"feature",initialEstimate:30}},tasks={openTask:{isPrivate:!1,name:"Open Impediment"+ +(new Date),entityState:"openTask",project:"p_scrum",userStory:"userStory_5"},plannedTask:{isPrivate:!1,name:"Open Impediment"+ +(new Date),entityState:"plannedTask",project:"p_scrum",userStory:"userStory_5"},inprogressTask1US5:{isPrivate:!1,name:"In progress 1 Task"+ +(new Date),entityState:"inprogressTask",project:"p_scrum",userStory:"userStory_5"},inprogressTask2US5:{isPrivate:!1,name:"In progress 2 Task"+ +(new Date),entityState:"inprogressTask",project:"p_scrum",userStory:"userStory_5"},doneTask1US5:{isPrivate:!1,name:"Close 1 Task"+ +(new Date),entityState:"doneTask",project:"p_scrum",userStory:"userStory_5"},doneTask2US5:{isPrivate:!1,name:"Close 2 Task"+ +(new Date),entityState:"doneTask",project:"p_scrum",userStory:"userStory_5"}},bugs={bug_1:{isPrivate:!1,name:"Open Bug with severity"+ +(new Date),entityState:"openBug",entityType:"bug",project:"p_scrum",severity:"blockingSeverity"},openedBug:{isPrivate:!1,name:"Open Bug"+ +(new Date),entityState:"openBug",entityType:"bug",project:"p_scrum",userStory:"userStory_5"},plannedBug:{isPrivate:!1,entityType:"bug",name:"Planned Bug"+ +(new Date),entityState:"plannedBug",project:"p_scrum",userStory:"userStory_5"},planned2Bug:{isPrivate:!1,entityType:"bug",name:"Planned Bug 2"+ +(new Date),entityState:"plannedBug",project:"p_scrum",userStory:"userStory_5"},inprogressBug1US5:{isPrivate:!1,name:"In progress 1 Bug"+ +(new Date),entityType:"bug",entityState:"inprogressBug",project:"p_scrum",userStory:"userStory_5"},inprogressBug2US5:{isPrivate:!1,name:"In progress 2 Bug"+ +(new Date),entityState:"inprogressBug",entityType:"bug",project:"p_scrum",userStory:"userStory_5"},inprogressBug3US5:{isPrivate:!1,name:"In progress 3 Bug"+ +(new Date),entityState:"inprogressBug",entityType:"bug",project:"p_scrum",userStory:"userStory_5"},inprogressBug4US5:{isPrivate:!1,name:"In progress 4 Bug"+ +(new Date),entityState:"inprogressBug",entityType:"bug",project:"p_scrum",userStory:"userStory_5"},doneBug1US5:{isPrivate:!1,name:"Close 1 Bug"+ +(new Date),entityState:"doneBug",entityType:"bug",project:"p_scrum",userStory:"userStory_5"},doneBug2US5:{isPrivate:!1,name:"Close 2 Bug"+ +(new Date),entityState:"doneBug",entityType:"bug",project:"p_scrum",userStory:"userStory_5"}},requests={request_1:{entityType:"request",name:"Make mee happy!!",project:"p_scrum",tags:"enthusiasm, passion, element, flow",assignments:["request1_mahmud"]},request_2:{entityType:"request",project:"p_scrum",name:"Make your service more quickly",tags:"customer, dream",assignments:["request2_mahmud"]}};_.each(bugs,function(bug,key){bug.tags=key+"tag"});var userStories={};for(var s=0;s<USER_STORY_COUNT;s++){var userStoryName=["userStory",s].join("_");userStories[userStoryName]={name:userStoryName,description:"UserStoryDescription_"+s,entityType:"us",project:"p_scrum",tags:"user_story_tag_"+s}}_.extend(userStories,{firstOpenUS:{name:"first open us",entityState:"openUS",entityType:"us",project:"p_scrum"},secondOpenUS:{name:"second open us",entityState:"openUS",entityType:"us",project:"p_scrum"},firstPlannedUS:{name:"first planned us",entityState:"plannedUS",entityType:"us",project:"p_scrum"},firstInProgressUS:{name:"first in progress us",entityState:"inprogressUS",entityType:"us",project:"p_scrum"},secondInProgressUS:{name:"second in progress us",entityState:"inprogressUS",entityType:"us",project:"p_scrum"},threedInProgressUS:{name:"threed in progress us",entityState:"inprogressUS",entityType:"us",project:"p_scrum"},firstDoneUS:{name:"first done us",entityState:"doneUS",entityType:"us",project:"p_scrum"},secondDoneUS:{name:"second done us",entityState:"doneUS",entityType:"us",project:"p_scrum"}});var fixtures={severities:severities,entityTypes:entityTypes,practices:practices,users:users,roles:roles,processes:processes,entityStates:entityStates,projects:projects,projectMembers:projectMembers,features:features,userStories:userStories,requests:requests,assignments:assignments,tasks:tasks,bugs:bugs,impediments:impediments,roleEfforts:roleEfforts};test.set("fixtures",fixtures),next()}})}),testKit.registerSetup("componentBus",function(test,next){test.set("componentBus",test.get("componentClass").create({extensions:[ExtensionChildrenEvents]})),next()}),testKit.registerSetup("component.initialize",function(test,next){var testData=test.get("data"),mapFunction=function(item){return{id:item.id,type:item.entityType.name,name:item.name}},dataForTest=_.map(testData.userStory,mapFunction);dataForTest=dataForTest.concat(_.map(testData.bug,mapFunction)),dataForTest=dataForTest.concat(_.map(testData.request,mapFunction)),dataForTest=dataForTest.concat(_.map(testData.feature,mapFunction)),BoardUtils.resetCardIds(),test.set("dataForRegistration",dataForTest);var projectIds=_.map(testData.project,function(project){return project.id}),configuratorInstance=test.get("configurator"),appContextService=configuratorInstance.getApplicationContextService();appContextService.getApplicationContext({ids:projectIds},{success:function(context){var definition=test.get("board.definition");configuratorInstance.getHashService().setHref("http://localhost/targetprocess/RestUI/board.aspx?acid="+context.acid+"#"),configuratorInstance.setBoardSettingsOptions(definition),configuratorInstance.getSettingsManager().sources.splice(0,1);var componentConfig={context:{configurator:configuratorInstance,definition:definition},children:[{type:"board.plus",name:"board.plus"}]},boardContainerBus=test.get("componentBus");boardContainerBus.on("afterRender",function(e){boardContainerBus.fire("view.dom.ready",{element:e.data.element})});var boardSettings=configuratorInstance.getBoardSettingsFactory().createInstance(definition);configuratorInstance.registerService("boardSettings",boardSettings),boardContainerBus.initialize(componentConfig),boardContainerBus.fire("boardSettings.ready",{boardSettings:boardSettings}),next()}})});var testcase={name:"component.board.plus.cardZooming"};return testcase["Cards html should contains all data"]=testKit.test(function(test){testKit.flow(test,{"bus view.dom.ready[0]+board.plus.overview.board.ready[0]":function(evt){var $el=evt["board.plus.overview.board.ready[0]"].data.element.find(".tau-board-grid-view");this.container=$el,checkCardsContent.call(this),test.done()}});var getCollectionInfo=function(itemCollection){var inProgressCount=_.filter(itemCollection,function(data){var entityState=data.entityState;return!entityState.isFinal&&!entityState.isPlanned&&!entityState.isInitial}).length,doneCount=_.filter(itemCollection,function(data){var entityState=data.entityState;return entityState.isFinal}).length,plannedCount=_.filter(itemCollection,function(data){var entityState=data.entityState;return entityState.isPlanned||entityState.isInitial}).length,collectionInfo={inProgressCount:inProgressCount,plannedCount:plannedCount,totalCount:itemCollection.length,doneCount:doneCount};return collectionInfo.openCount=collectionInfo.totalCount-collectionInfo.doneCount,collectionInfo},checkBoardSkeleton=function(evt){var items=test.get("dataForRegistration"),componentBus=test.get("componentBus");test.get("componentBus").fire("model.data.loader.registerItems",{items:items}),componentBus.fire("view.skeleton.built",{element:this.container});var cardsHash=test.get("cardsHash");componentBus.fire("overview.cells.skeletons.ready",cardsHash),test.get("componentBus").fire("model.zoomLevelChanged",{zoomLevel:3})},digitReg=/UserID=(\d+)/gi,checkCardsContent=function(evt){var testData=test.get("data"),self=this,checkEntities=function(itemData){var type="["+itemData.entityType.name.toUpperCase()+"] ",elementIds=BoardUtils.getCardIds({id:itemData.id,type:itemData.entityType.name});for(var i=0;i<elementIds.length;i++){var elementId=elementIds[i],$card=self.container.find("#"+elementId),$name=$card.find(".tau-name");test.equal($name.text(),itemData.name,type+" name is valid.");var openImpedimentsCount=_.filter(itemData.impediments||[],function(impediment){return!impediment.entityState.isFinal}),tags=itemData.tags||"";if(tags&&tags.length>0){tags=tags.split(",").sort();var $tag=$card.find("> div .tau-tag");test.equal($tag.length,tags.length,type+"Tags count");var actualTags=[];for(var i=0;i<tags.length;i++)tags[i]=tags[i].trim(),actualTags.push($tag.eq(i).text().trim());tags=tags.sort(),actualTags=actualTags.sort(),test.same(actualTags,tags,type+"Tags is valid")}if(itemData.hasOwnProperty("effort")&&_.isNumber(itemData.effort)){var $effort=$card.find("> div .tau-effort"),effort=parseInt($effort.text());test.equal(effort,itemData.effort,type+"Effort")}var assignments=itemData.assignments||[];!_.isArray(itemData.requesters),itemData.entityType.name!="request";if(!_.isEmpty(assignments)){var $assignments=$card.find("> div .tau-avatar");test.equal($assignments.length,itemData.assignments.length,"Assignments count"),assignments=_.sortBy(assignments,function(assignment){return assignment.generalUser?assignment.generalUser.id:assignment.id});var $array=[];for(var i=0;i<$assignments.length;i++)$array.push($assignments.eq(i));$assignments=_.sortBy($array,function($assignment){var src=$assignment.children("img").prop("src"),matches=src.match(digitReg),match=matches[0],id=match.substring(match.indexOf("=")+1);return parseInt(id)}),test.equal($assignments.length,assignments.length,type+"Assginments");for(var i=0;i<Math.min($assignments.length,assignments.length);i++){var $img=$assignments[i].children("img"),assignmentData=assignments[i],user=assignmentData.generalUser||assignmentData;test.equal($img.prop("alt"),user.firstName+" "+user.lastName,"Alt is valid"),test.equal($img.prop("title"),user.firstName+" "+user.lastName,"Title is valid");var p=AppPath.get(),r=$img.prop("src").match(/\/Avatar\.ashx\?UserId=(\d+)(&modified=(\d+))?&size=24/i);test.equal(r.length>0,!0,"Src is valid"),test.equal(r[1],user.id,"Src is valid")}}if(itemData.severity){var $tag=$card.find("> div .tau-severity");test.equal($tag.length,1,type+"Severity count"),test.equal($tag.text(),"Severity: "+itemData.severity.name,"Severity name")}if(_.isArray(itemData.userStories)&&itemData.userStories.length>0){var usInfo=$card.find(".tau-related-userstories"),userStoriesInfo=getCollectionInfo(itemData.userStories);test.equal(usInfo.size(),1,type+"User Stories info container added"),test.equal(usInfo.text().trim(),"u"+[userStoriesInfo.totalCount-userStoriesInfo.doneCount,userStoriesInfo.totalCount].join("/"),type+"User Stories infos")}openImpedimentsCount?test.equal($card.find(".tau-impediments").text(),openImpedimentsCount.length,type+"Impediments count"):test.equal($card.find(".tau-impediments").size(),0,type+"Impediments count is not visible");var tasksCollection=itemData.tasks,tasksInfoElement=$card.find(".tau-related-tasks");if(tasksCollection&&tasksCollection.length>0){var tasksInfo=getCollectionInfo(tasksCollection);tasksInfo.inProgressCount||tasksInfo.plannedCount?(test.equal(tasksInfoElement.size(),1,type+"Tasks info container added"),test.equal(tasksInfoElement.text().trim(),["t"+tasksInfo.openCount,tasksInfo.totalCount].join("/"),type+"Tasks count")):test.equal(tasksInfoElement.size(),0,type+"Tasks info container not added")}else test.equal(tasksInfoElement.size(),0,type+"Tasks info container not added");var bugsInfoElement=$card.find(".tau-related-bugs"),bugsCollection=itemData.bugs;if(bugsCollection&&bugsCollection.length>0){var bugsInfo=getCollectionInfo(bugsCollection);bugsInfo.inProgressCount||bugsInfo.plannedCount?(test.equal(bugsInfoElement.size(),1,type+"Bugs info container added"),test.equal(bugsInfoElement.text().trim(),["b"+bugsInfo.openCount,bugsInfo.totalCount].join("/"),type+"Bugs count")):test.equal(bugsInfoElement.size(),0,type+"Bugs info container not added")}else test.equal(bugsInfoElement.size(),0,type+"Bugs info container not added")}};_.each(testData.userStory,checkEntities),_.each(testData.bug,checkEntities),_.each(testData.feature,checkEntities),_.each(testData.request,checkEntities)},testDone=function(evt){var evtZoomLevel=_.values(evt)[0].data;test.equals(evtZoomLevel.zoomLevel,3,"Initial zoom level is correct"),test.ok(this.container.find(".cell").hasClass("zoom-level-"+evtZoomLevel.zoomLevel),"CSS class is set on card"),this.container.remove(),test.done()}}),testcase})