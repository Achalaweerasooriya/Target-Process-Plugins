define(["Underscore","jQuery","tau/core/event","tests.async/testkit/testkit.component.board","tau/components/component.board.container","tau/ui/extensions/board.container/ui.extension.board.container.editMode","tau/ui/extensions/container/ui.extension.container.childrenEvents","tests/common/remoteConstants"],function(_,$,Event,TestKit,Component,ExtensionEditor,ExtensionChildrenEvents,Constants){var testKit=new TestKit(Component,{x:{types:["release"]},y:{types:["iteration"]},viewMode:"board"});testKit.registerSetup("fixtures",function(test,next){var entityTypes={us:Constants.EntityTypes.USERSTORY,release:Constants.EntityTypes.RELEASE,feature:Constants.EntityTypes.FEATURE},practices={planning:{id:Constants.Practices.PLANNING.id},requirements:{id:Constants.Practices.REQUIREMENTS.id}},processes={scrum:{name:"scrum"+ +(new Date),practices:["planning","requirements"]}},projects={p_scrum:{name:"Project Scrum"+ +(new Date),process:"scrum"}},fixtures={entityTypes:entityTypes,practices:practices,processes:processes,projects:projects};test.set("fixtures",fixtures),next()}),testKit.registerSetup("componentBus",function(test,next){test.set("componentBus",test.get("componentClass").create({extensions:[ExtensionEditor,ExtensionChildrenEvents]})),next()}),testKit.registerSetup("component.initialize",function(test,next){var configuratorInstance=test.get("configurator"),store=configuratorInstance.getStore();configuratorInstance.getClipboardManager().restStorage.sources.splice(0,1);var boardSettings=configuratorInstance.getBoardSettingsFactory().createInstance(test.get("board.definition"));configuratorInstance.registerService("boardSettings",boardSettings),configuratorInstance.setLoggedUser({id:1,name:"Me",role:"Developer",isAdministrator:!0});var testData=test.get("data"),projectID=testData.project.p_scrum.id;test.get("real")===!1&&sinon.stub(store.config.proxy.service,"get",function(command){command.callbacks.success({id:command.config.id,acid:"234567896789322345l"})}),store.get("context",{projectId:projectID,fields:["acid"]},{success:function(r){var componentConfig={context:{configurator:configuratorInstance,acid:r.data[0].acid},children:[{type:"board.toolbar"},{type:"board.editor"},{type:"board.plus",min:1,max:6,defaultValue:3}]},componentBus=test.get("componentBus");componentBus.initialize(componentConfig),componentBus.fire("boardSettings.ready",{boardSettings:boardSettings}),next()}}).done()});var testCase={name:"component.board.editor"};testCase["should be available and toggleable"]=testKit.test(function(test){var bus=test.get("bus"),testFlow={bus:bus,"bus afterRender[0]":function(evt){var $board=evt.data.element,$toggle=$board.find("[role=action-toggle-editor]");test.equals($toggle.length,1,"Show button"),test.equals($board.hasClass("tau-settings-active"),!1,"Editor hidden"),$toggle.click(),test.equals($board.hasClass("tau-settings-active"),!0,"Editor show"),test.done()}};Event.subscribeOn(testFlow)});var resetFilterTestCase=function(test,selectorName,filterName){return{bus:test.get("bus"),"bus afterRender[0]":function(evt,afterRender){var $board=afterRender.element,$selector=$board.find("[name="+selectorName+"]"),$filter=$board.find("[name="+filterName+"]"),selectedValue=$selector.val();test.ok(selectedValue!="project",'Axis setup value should not be "project"'),$filter.val("test filter"),test.equals($filter.val(),"test filter","Set filter"),$selector.val("project"),$selector.change(),test.equals($filter.val(),"","Filter has been reset"),test.done()}}};return testCase["should reset X filter when X axis changed"]=testKit.test(function(test){Event.subscribeOn(resetFilterTestCase(test,"x_types","x_filter"))}),testCase["should reset Y filter when Y axis changed"]=testKit.test(function(test){Event.subscribeOn(resetFilterTestCase(test,"y_types","y_filter"))}),testCase["should allow to edit and save cells and refresh board"]=testKit.test(function(test){var bus=test.get("bus"),$board,testFlow={bus:bus,"bus afterRender[0]":function(evt){var $el=evt.data.element;$board=$el.find("[role=grid]");var $form=$el.find("[role=form-settings]");test.equals($form.length,1,"Has form to edit");var $grid=$el.find("[role=board-body]");test.equals($grid.length,1,"Has grid to edit");var $input=$form.find("[name=cells_types]");test.ok($input.length>1,"Can choose cells");var $filterInput=$form.find("[name=cells_filter]");test.equals($filterInput.length,1,"Can filter");var $checked=$input.filter(":checked");test.equals($checked.length,1,"Already chosen");var $label=$checked.parent();test.equals($label.text(),"User Story","Chosen correct");var $available=$input.filter("[value=bug]:not([disabled])");test.equals($available.length,1,"Have available");var $newBoard=$el.find("[role=grid]");test.ok($board[0]===$newBoard[0],"Still board"),$available.prop("checked",!0),$available.trigger("change"),test.done()}};Event.subscribeOn(testFlow)}),testCase["should allow to edit ordering"]=testKit.test(function(test){return testKit.flow(test,{"bus afterRender[0]":function(evt,rd){var $el=rd.element,$form=$el.find("[role=form-settings]");test.equals($form.length,1,"Has form to edit");var $grid=$el.find("[role=board-body]");test.equals($grid.length,1,"Has grid to edit");var $input=$form.find("[name=x_ordering_name]");test.equals($input.length,1,"Can choose x axis ordering"),test.equals($input.find("option").length>0,!0,"Can choose x axis ordering");var $inputDir=$form.find("[name=x_ordering_direction]");test.equals($inputDir.length,1,"Can choose x axis ordering"),$input=$form.find("[name=y_ordering_name]"),test.equals($input.length,1,"Can choose x axis ordering"),$inputDir=$form.find("[name=y_ordering_direction]"),test.equals($inputDir.length,1,"Can choose x axis ordering"),test.done()}})}),testCase["should allow to edit and save axises and refresh board"]=testKit.test(function(test){var bus=test.get("bus"),testFlow={bus:bus,"bus afterRender[0]+board.plus.overview.board.ready[0]":function(evt,renderData){var $el=renderData.element,$form=$el.find("[role=form-settings]");test.equals($form.length,1,"Has form to edit");var $grid=$el.find("[role=board-body]");test.equals($grid.length,1,"Has grid to edit");var $inputCells=$form.find("[name=cells_types]");test.ok($inputCells.length>1,"Can choose cells");var expectedAxisNames={x:"release",y:"iteration"};_.forEach(["x","y"],function(axis){var sel="[name="+axis+"_types]",$input=$form.find(sel);test.equals($input.length,1,"Can choose axis "+axis);var $filterInput=$form.find("[name="+axis+"_filter]");test.equals($filterInput.length,1,"Can filter");var $options=$input.find("option");test.ok($options.length>0,"Can choose axis X"),test.ok(!$options.eq(0).val(),"Can choose empty axis");var $selected=$options.filter("[selected]");test.equals($selected.length,1,"Has selected axis"),test.equals($selected.val().toLowerCase(),expectedAxisNames[axis],'Axis "'+axis+'" should be "'+expectedAxisNames[axis]+'"')}),$form.find("[name=x_filter]").val("?IsCurrent is True"),$form.find(".i-role-switch-filter").click()},"bus board.editor.afterRender[0] > board.editor.settings.changed[0] > board.plus.$el.ready":function(evt,editorFilter,editorSettings,$el){var $fields=editorFilter.element.find("[name]");test.equals($fields.filter("[name=y_types]").val().toLowerCase(),"release","Changed selected y axis"),test.equals($fields.filter("[name=y_filter]").val(),"?IsCurrent is True","Changed y filter"),test.equals($fields.filter("[name=x_types]").val(),"iteration","Changed selected x axis"),test.equals($fields.filter("[name=x_filter]").val(),"","Changed x filter");var headerText=$el.find(".tau-x-header").text();test.equals(headerText,"Release / Iteration","Changed board dimension header text"),test.done()}};Event.subscribeOn(testFlow)}),testCase})