define(["Underscore","jQuery","tau/core/event","tests.async/testkit/testkit.component.board","tau/components/component.board.editor"],function(_,$,Event,TestKit,Component){var testKit=new TestKit(Component,{x:{types:["release"]},y:{types:["iteration"]},viewMode:"board",edit:!0});testKit.registerSetup("fixtures",function(test,next){test.set("fixtures",{}),next()}),testKit.registerSetup("component.initialize",function(test,next){var configuratorInstance=test.get("configurator"),store=configuratorInstance.getStore();configuratorInstance.getClipboardManager().restStorage.sources.splice(0,1);var boardSettings=configuratorInstance.getBoardSettingsFactory().createInstance(test.get("board.definition"));configuratorInstance.registerService("boardSettings",boardSettings),test.set("storageSpy",sinon.spy(configuratorInstance.getRestStorage(),"data")),configuratorInstance.setLoggedUser({id:1,name:"Me",role:"Developer",isAdministrator:!0}),test.get("real")===!1&&sinon.stub(store.config.proxy.service,"get",function(command){command.callbacks.success({id:command.config.id,acid:"234567896789322345l"})});var componentBus=test.get("componentBus"),componentConfig={context:{configurator:configuratorInstance}};componentBus.initialize(componentConfig),componentBus.fire("boardSettings.ready",{boardSettings:boardSettings}),next()});var testcase={name:"component.board.editor.filters"};return testcase["should render and insert help data"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender":function(evt,renderData){var $el=renderData.element;test.equals($el.length,1,"Element");var $filters=$el.find(".tau-filter:text");test.equals($filters.length,3,"Filters");var $f=$filters.eq(0),$help=$f.parent().find(".i-role-help");test.equals($help.length,1,"Has help button"),$help.click();var $popup=$help.tauBubble("widget");test.equals($popup.length,1,"Has help bubble"),test.equals($popup.is($help),!1,"Has help bubble");var $dFilters=$popup.find(".i-role-predefined-filter");test.equals($dFilters.length>3,!0,"Has filters"),test.equals($popup.find(".cm-variable").length>0,!0,"Highlighted");var currentVal=$f.val();test.equals(currentVal,"","no default val"),$f.val("blabla");var spy=test.get("storageSpy");spy.reset();var $dFilter=$dFilters.eq(2);$dFilter.click(),currentVal=$f.val(),test.equals(currentVal,$dFilter.attr("data-value"),"insert filter"),test.equals(spy.callCount,1,"Send save to storage"),test.done()}})}),testcase["clear buttons on inputs"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender":function(evt,renderData){var $el=renderData.element;test.equals($el.length,1,"Element");var $filters=$el.find(".i-role-filter");test.equals($filters.length,3,"Filters");var $filter=$filters.eq(0),$input=$filter.find(":text"),$clear=$filter.find(".i-role-clear");test.equals($input.length,1,"has input"),test.equals($clear.length,1,"has clear button"),test.equals($filter.hasClass("tau-boardsettings__filter_empty_false"),!1,"class as is empty"),$input.val("preved"),$input.trigger("keydown"),test.equals($filter.hasClass("tau-boardsettings__filter_empty_false"),!0,"not empty");var spy=test.get("storageSpy");spy.reset(),$clear.click(),test.equals($input.val(),"","clear"),test.equals($filter.hasClass("tau-boardsettings__filter_empty_false"),!1,"empty again"),test.equals(spy.callCount,1,"Send save to storage"),test.done()}})}),testcase})