define(["Underscore","jQuery","./testcase.api","tau/core/tau","./client.slice"],function(_,$,TestCaseApi,utils,ClientSlice){var testCase=new TestCaseApi("read slice operations"),clientSlice=new ClientSlice({x:"release",y:"feature",cells:"userStory"});return testCase.create({name:"x values",method:"x",asserts:function(test,r){test.equals(4,r.data.items.length,this.desc("3 releases for x axis"))}}),testCase.create({name:"y values",method:"y",asserts:function(test,r){test.equals(3,r.data.items.length,this.desc("2 features for y axis"))}}),testCase.create({name:"x values range 1",method:"x",params:{$take:1,$skip:0},asserts:function(test,r){test.equals(1,r.data.items.length,this.desc("takes required data"))}}),testCase.create({name:"!x values filtering",method:"x",params:{id:{$in:["1","2","3"]}},asserts:function(test,r){test.equals(1,r.data.items.length,this.desc("takes required data"))}}),testCase.create({name:"x values range 2",method:"x",params:{$take:1,$skip:1},asserts:function(test,r){test.equals(1,r.data.items.length,this.desc("takes required data"))}}),testCase.create({name:"cell count and format",method:"cell",asserts:function(test,r){test.equals(6,r.data.items.length,this.desc("cells count is correct")),test.ok(r.data.items[0].dynamic,this.desc("dynamic node")),test.ok(r.data.items[0].fixed,this.desc("fixed node")),test.ok(r.data.items[0].x,this.desc("x node")),test.ok(r.data.items[0].y,this.desc("y node"))}}),testCase.create({name:"cells content",method:"cell",getParams:function(test){var data=test.get("data");return{x:_.values(data.release)[0].id.toString(),y:_.values(data.feature)[0].id.toString()}},asserts:function(test,r,slice){var stories=r.data.items[0].dynamic.items;test.equals(stories.length,3,this.desc("have stories"))}}),testCase.create({name:"cells filtering by x and y",method:"cell",getParams:function(test){var data=test.get("data");return{x:_.values(data.release)[0].id.toString(),y:_.values(data.feature)[0].id.toString()}},asserts:function(test,r){test.ok(r.ajaxConfig,this.desc("ajax config comes")),test.ok(r.ajaxConfig.url.indexOf("where"),this.desc("where attached")),test.equals(r.data.items.length,1,this.desc("cells count is correct"))}}),testCase.create({name:"cells filtering only x",method:"cell",getParams:function(test){var data=test.get("data");return{x:_.values(data.release)[0].id.toString()}},asserts:function(test,r){test.equals(r.data.items.length,2,this.desc("cells count is correct"))}}),testCase.create({name:"cells filtering $in only x",method:"cell",getParams:function(test){var data=test.get("data");return{x:{$in:[_.values(data.release)[0].id.toString(),_.values(data.release)[1].id.toString()]}}},asserts:function(test,r){test.equals(r.data.items.length,4,this.desc("cells count is correct"))}}),testCase.create({name:"cells filtering only y",method:"cell",getParams:function(test){var data=test.get("data");return{y:_.values(data.feature)[0].id.toString()}},asserts:function(test,r){test.equals(r.data.items.length,3,this.desc("cells count is correct"))}}),testCase.create({name:"axis filtering using DSL",method:"axes",getDefinition:function(){return{x:{types:["EntityState"],filter:'?Name is "Done"'},y:{types:["Project"],filter:"?It is not None"}}},asserts:function(test,r){test.equals(r.data.x.length,1,this.desc("axis x count is correct")),test.equals(r.data.x[0].dynamic.items[0].data.names[0],"Done",this.desc("Filter x is correct")),test.equals(r.data.y.length,1,this.desc("axis y count is correct"))}}),testCase.create({name:"cells filtering using DSL",method:"cell",getDefinition:function(test){var data=test.get("data"),us=_.values(data.userStory)[0];return{x:{types:["EntityState"]},y:{types:["Project"]},cells:{types:["UserStory","Bug"],filter:'?Name is "'+us.name+'"'}}},asserts:function(test,r){var data=test.get("data"),us=_.values(data.userStory)[0];test.equals(r.data.items.length,1,this.desc("cells count is correct")),test.equals(r.data.items[0].dynamic.items[0].data.name,us.name,this.desc("cards filtered correct"))}}),testCase.create({name:"size",method:"size",asserts:function(test,r){test.equals(4,r.data.x,this.desc("x count is correct")),test.equals(3,r.data.y,this.desc("y count is correct"))}}),testCase.create({name:"size for y only",method:"size",getDefinition:function(){return{y:"EntityState",x:null,cells:["Bug","UserStory"]}},asserts:function(test,r){test.equals(4,r.data.y,this.desc("y count is correct")),test.ok(!r.data.x,this.desc("x count is not defined"))}}),testCase.create({name:"size for no axes",method:"size",getDefinition:function(){return{y:null,x:null,cells:["Bug","UserStory"]}},asserts:function(test,r){test.ok(!r.data.y,this.desc("y count is not defined")),test.ok(!r.data.x,this.desc("x count is not defined"))}}),testCase.create({name:"size for x only",method:"size",getDefinition:function(){return{x:"EntityState",y:null,cells:["Bug","UserStory"]}},asserts:function(test,r){test.equals(4,r.data.x,this.desc("x count is correct")),test.ok(!r.data.y,this.desc("y count is not defined"))}}),testCase.create({name:"cellCounts",method:"cellCounts",asserts:function(test,r){var items=r.data.items,axesStat=_(items).chain().filter(function(t){var x=t.hasOwnProperty("x"),y=t.hasOwnProperty("y");return x&&!y||!x&&y}).reduce(function(memo,t){var c=_.reduce(t.counts,function(m,countItem){return m+=countItem.count},0),name=(t.x||"")+(t.y||"");return memo[name]=memo[name]||0,memo[name]+=c,memo},{}).value(),cellStat=_(items).chain().filter(function(t){return t.hasOwnProperty("x")&&t.hasOwnProperty("y")}).reduce(function(memo,t){var c=_.reduce(t.counts,function(m,countItem){return m+=countItem.count},0),cardsPerCell=test.get("metaFixtures").cardsPerCell;return test.equals(c,cardsPerCell,"Valid count cards per cell"),memo[t.x]=memo[t.x]||0,memo[t.x]+=c,memo[t.y]=memo[t.y]||0,memo[t.y]+=c,memo},{}).value();_(cellStat).each(function(val,key){test.equals(val,axesStat[key],"Axis summary is correct")}),test.ok(items.length>0,"ok")}}),testCase.create({name:"cellCounts for no axes",method:"cellCounts",getDefinition:function(){return{y:null,x:null,cells:["Bug","UserStory"]}},asserts:function(test,r){var items=r.data.items;test.equals(items.length,1,"One cell"),test.ok(!items[0].hasOwnProperty("x")&&!items[0].hasOwnProperty("y"),"Without coordinates");var counts=_.reduce(items[0].counts,function(m,t){return m+=t.count},0),meta=test.get("metaFixtures");test.equals(counts,meta.cellsCount*meta.cardsPerCell,"Count is valid")}}),testCase.create({name:"multi types for cells",method:"cell",getDefinition:function(){return{x:"EntityState",y:"Project",cells:["Bug","UserStory"]}},asserts:function(test,r){test.equals(r.data.items.length,1,this.desc("return cells"))}}),testCase.create({name:"no Y",method:"cell",getDefinition:function(){return{x:"EntityState",y:null,cells:["UserStory"]}},asserts:function(test,r){test.equals(r.data.items.length,1,this.desc("works good"))}}),testCase.create({name:"no X",method:"cell",getDefinition:function(){return{y:"EntityState",x:null,cells:["UserStory"]}},asserts:function(test,r){test.equals(r.data.items.length,1,this.desc("works good"))}}),testCase.create({name:"no X/Y",method:"cell",getDefinition:function(){return{cells:["UserStory"],y:null,x:null}},asserts:function(test,r){test.equals(r.data.items.length,1,this.desc("works good"))}}),testCase.create({name:"no X and no cells",method:"y",getDefinition:function(){return{y:"EntityState"}},asserts:function(test,r){test.ok(r.data,this.desc("works good"))}}),testCase.create({name:"space it all",method:"space",getDefinition:function(){return{x:null,y:null,cells:null}},asserts:function(test,r){test.ok(r.data.axes,this.desc("has some axis in response")),test.ok(r.data.cells,this.desc("has some cells in response"))}}),testCase.create({name:"space for X defined",method:"space",getDefinition:function(){return{x:"Release",y:null,cells:null}},asserts:function(test,r){test.ok(r.data.axes,this.desc("has some axis in response")),test.ok(r.data.cells,this.desc("has some cells in response"))}}),testCase.create({name:"space for cells defined",method:"space",getDefinition:function(){return{x:null,y:null,cells:["UserStory","Bug"]}},asserts:function(test,r){test.ok(r.data.axes,this.desc("has some axis in response")),test.ok(r.data.cells,this.desc("has some cells in response"))}}),testCase.create({name:"axes",method:"axes",base64:!1,asserts:function(test,r){var data=test.get("data"),getAxis=function(axisName,data){return _(data).map(function(item){return clientSlice.generateItem(axisName,item)})},expected={x:getAxis("x",data.release),y:getAxis("y",data.feature)};expected.x.push({fixed:{items:[]},dynamic:{items:[{id:"|na|",type:"Release",data:{name:"Backlog",empty:!0,type:"Release"}}]},x:"|na|"}),expected.y.push({fixed:{items:[]},dynamic:{items:[{id:"|na|",type:"Feature",data:{name:"No Feature",empty:!0,type:"Feature"}}]},y:"|na|"});var actual=r.data,sort=function(axisName,collection){var sortById=function(item){return item[axisName]+" "};return _(collection).sortBy(sortById)},x=sort("x",actual.x),cleanOrder=function(axis){return _.each(axis,function(value){_.each(value.dynamic.items,function(item){delete item.orderingValue})}),axis};test.same(cleanOrder(x),sort("x",expected.x),this.desc("x axes info is correct"));var y=sort("y",actual.y);test.same(cleanOrder(y),sort("y",expected.y),this.desc("y axes info is correct"))}}),testCase.create({name:"list content",method:"list",getParams:function(test){var data=test.get("data");return{}},asserts:function(test,r,slice){var stories=r.data.items[0].dynamic.items;test.equals(stories.length,18,this.desc("have stories"))}}),testCase.create({name:"cardDetails",method:"cardDetails",getDefinition:function(){return{x:null,y:null,cells:{types:[{type:"userstory",data:"{id,name}"}]}}},getParams:function(test){var data=test.get("data"),ids=_(data.userStory).chain().values().pluck("id").value();return{$set:{CardsIds:ids}}},asserts:function(test,r,slice){var testData=test.get("data"),stories=r.data.items;test.equals(stories.length,_(testData.userStory).values().length,this.desc("should return card details by IDs"))}}),testCase.create({name:"cardDetails / empty types",method:"cardDetails",getDefinition:function(){return{x:null,y:null,cells:{types:[{type:"bug",data:"{}"},{type:"task",data:null}]}}},getParams:function(test){var data=test.get("data"),ids=_(data.userStory).chain().values().pluck("id").value();return{$set:{CardsIds:ids}}},asserts:function(test,r,slice){var stories=r.data.items;test.equals(stories.length,0,this.desc("should ignore types with empty data"))}}),testCase.get()})