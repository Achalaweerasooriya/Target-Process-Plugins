define(["Underscore","jQuery","./testcase.api"],function(_,$,TestCaseApi){var testCase=new TestCaseApi("write slice operations");return testCase.create({name:"move and prioritize batch items",method:"moveAndPrioritizeBatch",base64:!1,getParams:function(test){var data=test.get("data"),r=_.values(data.release),f=_.values(data.feature),u=_.values(data.userStory);return{$set:{items:[{itemId:u[u.length-3].id.toString(),oldX:null,oldY:null,x:r[r.length-1].id.toString(),y:f[f.length-1].id.toString(),afterItemId:u[u.length-2].id.toString(),beforeItemId:u[u.length-1].id.toString()}]}}},asserts:function(test,r){test.ok(r.data,this.desc("success")),test.equals(r.data.items.length,1,this.desc("return array with items")),test.equals(r.data.items[0].items.length,1,this.desc("each item is set of moved items"))}}),testCase.create({name:"move batch items",method:"moveBatch",base64:!1,getParams:function(test){var data=test.get("data"),r=_.values(data.release),f=_.values(data.feature),u=_.values(data.userStory);return{$set:{items:[{itemId:u[u.length-3].id.toString(),oldX:null,oldY:null,x:r[r.length-1].id.toString(),y:f[f.length-1].id.toString()}]}}},asserts:function(test,r){test.ok(r.data,this.desc("success")),test.equals(r.data.items.length,1,this.desc("return array with items")),test.equals(r.data.items[0].items.length,1,this.desc("each item is set of moved items"))}}),testCase.create({name:"prioritize batch items",method:"prioritizeBatch",base64:!1,getParams:function(test){var data=test.get("data"),r=_.values(data.release),f=_.values(data.feature),u=_.values(data.userStory);return{$set:{items:[{itemId:u[u.length-3].id.toString(),oldX:null,oldY:null,x:r[r.length-1].id.toString(),y:f[f.length-1].id.toString()}]}}},asserts:function(test,r){test.ok(r.data,this.desc("success")),test.equals(r.data.items.length,1,this.desc("return array with items")),test.equals(r.data.items[0].items.length,1,this.desc("each item is set of moved items"))}}),testCase.get()})