define(["require","exports","module","./utils","./objecttools"],function(require,exports,module){var utils=require("./utils"),objecttools=require("./objecttools");module.exports=function(){var env=this,Schema=this.Schema=function(rawSchema){typeof rawSchema=="string"&&(rawSchema=JSON.parse(rawSchema));if(rawSchema instanceof Schema)return rawSchema;utils.extend(this,rawSchema),this.id===undefined&&(this.id=""+Schema._id++),Schema.instances[this.id]=this};utils.extend(Schema.prototype,{validate:function(instance,options){var data=new env.Validation(this,instance,options);return delete data.instance.__id,data},setFallbacks:function(_fallbacks){return typeof _fallbacks=="string"?this.fallbacks=env.Validation[_fallbacks]:_fallbacks===undefined?this.fallbacks=env.fallbacks:this.fallbacks=utils.extend({},env.fallbacks,_fallbacks),this}}),utils.extend(Schema,{_id:1,create:function(rawSchema){if(typeof rawSchema=="string")var rawSchema=JSON.parse(rawSchema);var validation=env.schemaSchema.validate(rawSchema);if(validation.isError())throw console.log(validation.getError()),validation.getError();return validation.instance},createSeveral:function(schemaDict){for(var key in schemaDict)schemaDict[key].id===undefined&&(schemaDict[key].id=key),schemaDict[key]=this.create(schemaDict[key]);return schemaDict},instances:{},resolveRefs:function(){for(var id in this.instances)objecttools.resolveRefs(this.instances[id],!0)}})}})