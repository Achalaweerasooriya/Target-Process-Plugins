define(["libs/jquery/jquery.ui"],function(jq){var getCursorPos=function(editableDiv){var caretPos=0,containerEl=null,sel,range;if(window.getSelection)sel=window.getSelection(),sel.rangeCount&&(range=sel.getRangeAt(0),range.commonAncestorContainer.parentNode==editableDiv&&(caretPos=range.endOffset));else if(document.selection&&document.selection.createRange){range=document.selection.createRange();if(range.parentElement()==editableDiv){var tempEl=document.createElement("span");editableDiv.insertBefore(tempEl,editableDiv.firstChild);var tempRange=range.duplicate();tempRange.moveToElementText(tempEl),tempRange.setEndPoint("EndToEnd",range),caretPos=tempRange.text.length}}return caretPos},getSelectionPos=function(editableDiv){if(window.getSelection){var sel=window.getSelection();if(sel.rangeCount){var range=sel.getRangeAt(0);if(range.commonAncestorContainer.parentNode==editableDiv){var selection={start:range.startOffset,end:range.endOffset};return selection}if(range.commonAncestorContainer==editableDiv){var selection={start:0,end:range.toString().length};return selection}}}};return function($,pluginName){if(pluginName in $)throw new Error('jQuery already has the "'+pluginName+'" property.');var bindNamespacedEvents=function($element,eventMap){for(var eventType in eventMap)$element.bind(eventType+"."+pluginName,eventMap[eventType])},unbindNamespacedEvents=function($element,eventMap){for(var eventType in eventMap)$element.unbind(eventType+"."+pluginName,eventMap[eventType])},TextEditor=function($element,options){this.setOptions(options),this.initElement($element),this.enabled&&this.bindEvents(options)};TextEditor.prototype={constructor:TextEditor,initElement:function($element){this.$element=$element.addClass(this.className)},setOptions:function(options){var _options=options||{};this.onSave=$.isFunction(_options.onSave)?_options.onSave:$.noop,this.onEditStart=$.isFunction(_options.onEditStart)?_options.onEditStart:$.noop,this.onEditEnd=$.isFunction(_options.onEditEnd)?_options.onEditEnd:$.noop,this.maxLength=_options.maxLength||null,this.mask=_options.mask?new RegExp(_options.mask):!1,this.restoreText=typeof _options.restoreText=="undefined"?!0:_options.restoreText,this.enabled=options.enabled||!0,this.className=options.className||"editableText",this.classNameActive=options.className||"active"},enable:function(){this.enabled||(this.enabled=!0,this.bindEvents(this))},disable:function(){this.enabled&&(this.enabled=!1,this.deactivate(),this.unbindEvents(this))},bindEvents:function(options){options=options||{};var self=this;options.resetOnBlur&&(self.onBlur=function(){this._cancelEdit()}),bindNamespacedEvents(self.$element,{blur:$.proxy(self,"onBlur"),keydown:$.proxy(self,"mapKeys"),keypress:$.proxy(self,"mapKeys"),click:$.proxy(self,"onFocus")}),$.browser.msie||$(window).blur(function(){self.$element.blur()})},unbindEvents:function(options){options=options||{};var self=this;options.resetOnBlur&&(self.onBlur=function(){this._cancelEdit()}),unbindNamespacedEvents(self.$element,{blur:$.proxy(self,"onBlur"),keydown:$.proxy(self,"mapKeys"),keypress:$.proxy(self,"mapKeys"),click:$.proxy(self,"onFocus")})},onFocus:function(evt){evt&&evt.stopPropagation(),this.isActive()||(this.activate(),this.onEditStart(),this.storeInitialText())},_performSave:function(noCheck){if(!noCheck&&!this.isActive()){this.deactivate();return}this.deactivate(),this.saveText(),this.onEditEnd()},_cancelEdit:function(){if(!this.isActive())return;this.deactivate(),this.restoreInitialText(),this.onEditEnd()},onBlur:function(){this._performSave()},onEnter:function(event){event.preventDefault(),this._performSave(!0),this.$element.blur()},onEscape:function(event){event.preventDefault(),event.stopPropagation(),this._cancelEdit(),this.$element.blur()},onKeyDefault:function(event){var str=this._getValue(),k=event.which;if(event.ctrlKey||event.altKey||event.metaKey||k<32)return!0;var charValue=String.fromCharCode(k),pos=getCursorPos(this.$element[0]),strParts=[str.substring(0,pos),charValue,str.substring(pos)],newVal=strParts.join("");this.mask.test(newVal)||event.preventDefault()},activate:function(){this.$element.prop("contentEditable",!0).data("testEditorActive",!0).addClass(this.classNameActive).focus()},deactivate:function(){this.$element.prop("contentEditable",!1).data("testEditorActive",!1).removeClass(this.classNameActive)},isActive:function(){return this.$element.data("testEditorActive")||!1},setInitialText:function(text){this.initialText=text},getInitialText:function(){return this.initialText},storeInitialText:function(){this.setInitialText(this._getValue())},restoreInitialText:function(){this._setValue(this.getInitialText())},trimText:function(text){return _.trim(text)},normalizeText:function(text){var normalizedText=this.trimText(text);return normalizedText.length==0&&this.restoreText===!0&&(normalizedText=this.getInitialText()),normalizedText},saveText:function(){var changedText=this.normalizeText(this._getValue());this._setValue(changedText),changedText!=this.getInitialText()&&this.onSave(changedText)},mapKeys:function(event){switch(event.which){case 13:this.onEnter(event);break;case 27:this.onEscape(event);break;default:event.type=="keypress"&&this.mask&&this.onKeyDefault(event)}},_getValue:function(){return this.$element.is("input")?this.$element.val():this.$element.text()},_setValue:function(v){return this.$element.is("input")?this.$element.val(v):this.$element.text(v)}},$.fn[pluginName]=function(options){return this.each(function(index,element){var $element=$(element);$element.data(pluginName,new TextEditor($element,options))})},$[pluginName]=function(element,options){return $(element)[pluginName](options)}}(jq,"textEditor"),jq.fn.textEditor})