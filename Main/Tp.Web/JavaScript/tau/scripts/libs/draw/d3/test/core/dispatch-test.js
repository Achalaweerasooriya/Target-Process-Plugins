require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.dispatch");suite.addBatch({dispatch:{topic:function(){return d3.dispatch},"returns a map of dispatchers for each event type":function(a){assert.deepEqual(a(),{});var b=a("foo");assert.isTrue("foo"in b),assert.isFalse("bar"in b);var b=a("foo","bar");assert.isTrue("foo"in b),assert.isTrue("bar"in b)},"added listeners receive subsequent events":function(a){var b=a("foo"),c=0;b.on("foo",function(){++c}),b.foo(),assert.equal(c,1),b.foo(),b.foo(),assert.equal(c,3)},"the listener is passed any arguments to dispatch":function(a){var b=a("foo"),c={},d={},e,f;b.on("foo",function(a,b){e=a,f=b}),b.foo(c,d),assert.equal(e,c),assert.equal(f,d),b.foo(1,"foo"),assert.equal(e,1),assert.equal(f,"foo")},"the listener's context is the same as dispatch's":function(a){var b=a("foo"),c={},d={},e;b.on("foo",function(){e=this}),b.foo.call(c),assert.equal(e,c),b.foo.call(d),assert.equal(e,d)},"listeners are notified in the order they are added":function(a){function f(){e.push(c)}function g(){e.push(d)}var b=a("foo"),c={},d={},e=[];b.on("foo.a",f).on("foo.b",g),b.foo(),assert.deepEqual(e,[c,d]),e=[],b.on("foo.a",f),b.foo(),assert.deepEqual(e,[d,c])},"notifying listeners returns the dispatch object":function(a){var b=a("foo");assert.equal(b.foo(),b)},"adding a listener returns the dispatch object":function(a){function c(){}var b=a("foo");assert.equal(b.on("foo",c),b)},"removed listeners do not receive subsequent events":function(a){function f(){e.push(c)}function g(){e.push(d)}var b=a("foo"),c={},d={},e=[];b.on("foo.a",f).on("foo.b",g),b.foo(),e=[],b.on("foo.a",null),b.foo(),assert.deepEqual(e,[d])},"removing a shared listener only affects the intended event":function(a){function d(){++c}var b=a("foo","bar"),c=0;b.on("foo",d).on("bar",d),b.foo(),b.bar(),assert.equal(c,2),b.on("foo",null),b.bar(),assert.equal(c,3)},"adding an existing listener has no effect":function(a){function d(){++c}var b=a("foo"),c=0;b.on("foo.a",d),b.foo(),b.on("foo.a",d).on("foo.a",d),b.foo(),assert.equal(c,2)},"removing a missing listener has no effect":function(a){function d(){++c}var b=a("foo"),c=0;b.on("foo.a",null).on("foo",d).on("foo",null).on("foo",null),b.foo(),assert.equal(c,0)},"adding a listener does not affect the current event":function(a){function f(){b.on("foo.b",g),e.push(c)}function g(){e.push(d)}var b=a("foo"),c={},d={},e=[];b.on("foo.a",f),b.foo(),assert.deepEqual(e,[c])},"removing a listener does affect the current event":function(a){function f(){b.on("foo.b",null),e.push(c)}function g(){e.push(d)}var b=a("foo"),c={},d={},e=[];b.on("foo.a",f).on("foo.b",g),b.foo(),assert.deepEqual(e,[c])},"getting a listener returns the correct listener":function(a){function c(){}function d(){}function e(){}var b=a("foo");b.on("foo.a",c).on("foo.b",d).on("foo",e),assert.equal(b.on("foo.a"),c),assert.equal(b.on("foo.b"),d),assert.equal(b.on("foo"),e)}}}),suite.export(module)