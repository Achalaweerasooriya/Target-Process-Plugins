require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.rebind");suite.addBatch({rebind:{topic:function(){return d3.rebind},"bound function uses source as context":function(a){var b={},c={foo:function(){d=this}},d;a(b,c,"foo"),assert.strictEqual((b.foo(),d),c),assert.strictEqual((b.foo.call({}),d),c)},"bound function receives any arguments":function(a){var b={},c={foo:function(){d=Array.prototype.slice.call(arguments)}},d;a(b,c,"foo"),assert.deepEqual((b.foo(),d),[]),assert.deepEqual((b.foo(1),d),[1]),assert.deepEqual((b.foo(null),d),[null]),assert.deepEqual((b.foo(c,c,1),d),[c,c,1])},"bound function returns object if arguments":function(a){var b={},c={foo:function(){}};a(b,c,"foo"),assert.strictEqual(b.foo(1),b),assert.strictEqual(b.foo(1,2,3),b)},"bound function returns return value if no arguments":function(a){var b={},c={foo:function(){return d}},d={};a(b,c,"foo"),assert.strictEqual(b.foo(),d)},"can bind multiple methods":function(a){var b={},c={foo:function(){return 1},bar:function(){return 2}};a(b,c,"foo","bar"),assert.strictEqual(b.foo(),1),assert.strictEqual(b.bar(),2)},"returns the target object":function(a){var b={},c={foo:function(){return d}},d={};assert.strictEqual(a(b,c,"foo"),b)}}}),suite.export(module)