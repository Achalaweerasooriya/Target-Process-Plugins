require("../env");var assert=require("assert");module.exports={topic:function(){function h(h,i,j){return b.push(h),c.push(i),e.push(j),d.push(this)>=2&&a(null,{selection:f,transition:g,data:b,index:c,value:e,context:d}),i&&d3.interpolateHsl(j,"blue")}var a=this.callback,b=[],c=[],d=[],e=[],f=d3.select("body").html("").append("div").selectAll("div").data(["red","green"]).enter().append("div").attr("color",function(a){return d3.rgb(a)+""}),g=f.transition().attrTween("color",h)},"defines the corresponding attr tween":function(a){assert.typeOf(a.transition.tween("attr.color"),"function")},"invokes the tween function":function(a){assert.deepEqual(a.data,["red","green"],"expected data, got {actual}"),assert.deepEqual(a.index,[0,1],"expected data, got {actual}"),assert.deepEqual(a.value,["#ff0000","#008000"],"expected value, got {actual}"),assert.domEqual(a.context[0],a.selection[0][0],"expected this, got {actual}"),assert.domEqual(a.context[1],a.selection[0][1],"expected this, got {actual}")},end:{topic:function(a){var b=this.callback;a.transition.each("end",function(c,d){d>=1&&b(null,a)})},"uses the returned interpolator":function(a){assert.equal(a.selection[0][1].getAttribute("color"),"#0000ff")},"does nothing if the interpolator is falsey":function(a){assert.equal(a.selection[0][0].getAttribute("color"),"#ff0000")}}}