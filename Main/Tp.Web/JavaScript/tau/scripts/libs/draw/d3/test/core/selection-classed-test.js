require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("selection.call");suite.addBatch({"select(body)":{topic:function(){return d3.select("body").html("")},"adds a missing class as true":function(a){a.attr("class",null),a.classed("foo",!0),assert.equal(document.body.className,"foo"),a.classed("bar",!0),assert.equal(document.body.className,"foo bar")},"adds a missing class as a function":function(a){a.attr("class",null),a.classed("foo",function(){return!0}),assert.equal(document.body.className,"foo"),a.classed("bar",function(){return!0}),assert.equal(document.body.className,"foo bar")},"removes an existing class as false":function(a){a.attr("class","bar foo"),a.classed("foo",!1),assert.equal(document.body.className,"bar"),a.classed("bar",!1),assert.equal(document.body.className,"")},"removes an existing class as a function":function(a){a.attr("class","bar foo"),a.classed("foo",function(){return!1}),assert.equal(document.body.className,"bar"),a.classed("bar",function(){return!1}),assert.equal(document.body.className,"")},"preserves an existing class as true":function(a){a.attr("class","bar foo"),a.classed("foo",!0),assert.equal(document.body.className,"bar foo"),a.classed("bar",!0),assert.equal(document.body.className,"bar foo")},"preserves an existing class as a function":function(a){a.attr("class","bar foo"),a.classed("foo",function(){return!0}),assert.equal(document.body.className,"bar foo"),a.classed("bar",function(){return!0}),assert.equal(document.body.className,"bar foo")},"preserves a missing class as false":function(a){a.attr("class","baz"),a.classed("foo",!1),assert.equal(document.body.className,"baz"),a.attr("class",null),a.classed("bar",!1),assert.equal(document.body.className,"")},"preserves a missing class as a function":function(a){a.attr("class","baz"),a.classed("foo",function(){return!1}),assert.equal(document.body.className,"baz"),a.attr("class",null),a.classed("bar",function(){return!1}),assert.equal(document.body.className,"")},"gets an existing class":function(a){a.attr("class"," foo\tbar  baz"),assert.isTrue(a.classed("foo")),assert.isTrue(a.classed("bar")),assert.isTrue(a.classed("baz"))},"does not get a missing class":function(a){a.attr("class"," foo\tbar  baz"),assert.isFalse(a.classed("foob")),assert.isFalse(a.classed("bare")),assert.isFalse(a.classed("rbaz"))},"returns the current selection":function(a){assert.isTrue(a.classed("foo",!0)===a)},"adds missing classes as true":function(a){a.attr("class",null),a.classed("foo bar",!0),assert.equal(document.body.className,"foo bar")},"gets existing classes":function(a){a.attr("class"," foo\tbar  baz"),assert.isTrue(a.classed("foo")),assert.isTrue(a.classed("foo bar")),assert.isTrue(a.classed("bar baz")),assert.isTrue(a.classed("foo bar baz"))},"does not get missing classes":function(a){a.attr("class"," foo\tbar  baz"),assert.isFalse(a.classed("foob")),assert.isFalse(a.classed("foob bar")),assert.isFalse(a.classed("bar baz blah")),assert.isFalse(a.classed("foo bar baz moo"))}}}),suite.addBatch({"selectAll(div)":{topic:function(){return d3.select("body").html("").selectAll("div").data(d3.range(2)).enter().append("div")},"adds a missing class as true":function(a){a.attr("class",null),a.classed("foo",!0),assert.equal(a[0][0].className,"foo"),assert.equal(a[0][1].className,"foo"),a.classed("bar",!0),assert.equal(a[0][0].className,"foo bar"),assert.equal(a[0][1].className,"foo bar")},"adds a missing class as a function":function(a){a.data([0,1]).attr("class",null),a.classed("foo",function(a,b){return a===0}),assert.equal(a[0][0].className,"foo"),assert.equal(a[0][1].className,""),a.classed("bar",function(a,b){return b===1}),assert.equal(a[0][0].className,"foo"),assert.equal(a[0][1].className,"bar")},"removes an existing class as false":function(a){a.attr("class","bar foo"),a.classed("foo",!1),assert.equal(a[0][0].className,"bar"),assert.equal(a[0][1].className,"bar"),a.classed("bar",!1),assert.equal(a[0][0].className,""),assert.equal(a[0][1].className,"")},"removes an existing class as a function":function(a){a.data([0,1]).attr("class","bar foo"),a.classed("foo",function(a,b){return a===0}),assert.equal(a[0][0].className,"bar foo"),assert.equal(a[0][1].className,"bar"),a.classed("bar",function(a,b){return b===1}),assert.equal(a[0][0].className,"foo"),assert.equal(a[0][1].className,"bar"),a.classed("foo",function(){return!1}),assert.equal(a[0][0].className,""),assert.equal(a[0][1].className,"bar"),a.classed("bar",function(){return!1}),assert.equal(a[0][0].className,""),assert.equal(a[0][1].className,"")},"preserves an existing class as true":function(a){a.attr("class","bar foo"),a.classed("foo",!0),assert.equal(a[0][0].className,"bar foo"),assert.equal(a[0][1].className,"bar foo"),a.classed("bar",!0),assert.equal(a[0][0].className,"bar foo"),assert.equal(a[0][1].className,"bar foo")},"preserves an existing class as a function":function(a){a.attr("class","bar foo"),a.classed("foo",function(){return!0}),assert.equal(a[0][0].className,"bar foo"),assert.equal(a[0][1].className,"bar foo"),a.classed("bar",function(){return!0}),assert.equal(a[0][0].className,"bar foo"),assert.equal(a[0][1].className,"bar foo")},"preserves a missing class as false":function(a){a.attr("class","baz"),a.classed("foo",!1),assert.equal(a[0][0].className,"baz"),assert.equal(a[0][1].className,"baz"),a.attr("class",null),a.classed("bar",!1),assert.equal(a[0][0].className,""),assert.equal(a[0][1].className,"")},"preserves a missing class as a function":function(a){a.attr("class","baz"),a.classed("foo",function(){return!1}),assert.equal(a[0][0].className,"baz"),assert.equal(a[0][1].className,"baz"),a.attr("class",null),a.classed("bar",function(){return!1}),assert.equal(a[0][0].className,""),assert.equal(a[0][1].className,"")},"gets an existing class":function(a){a[0][0].className=" foo\tbar  baz",assert.isTrue(a.classed("foo")),assert.isTrue(a.classed("bar")),assert.isTrue(a.classed("baz"))},"does not get a missing class":function(a){a[0][0].className=" foo\tbar  baz",assert.isFalse(a.classed("foob")),assert.isFalse(a.classed("bare")),assert.isFalse(a.classed("rbaz"))},"ignores null nodes":function(a){var b=d3.selectAll("div");b[0][1]=null,b.attr("class",null).classed("foo",!0),assert.equal(a[0][0].className,"foo"),assert.equal(a[0][1].className,"")},"returns the current selection":function(a){assert.isTrue(a.classed("foo",!0)===a)}}}),suite.export(module)