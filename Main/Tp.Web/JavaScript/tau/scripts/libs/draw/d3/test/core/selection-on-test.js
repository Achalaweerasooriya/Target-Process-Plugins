require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("selection.on");suite.addBatch({"select(body)":{topic:function(){return d3.select("body").html("")},"registers an event listener for the specified type":function(a){var b=a.append("form"),c=0;b.on("submit",function(){++c}),b.append("input").attr("type","submit").node().click(),assert.equal(c,1)},"replaces an existing event listener for the same type":function(a){var b=a.append("form"),c=0,d=0;b.on("submit",function(){++d}),b.on("submit",function(){++c}),b.append("input").attr("type","submit").node().click(),assert.equal(c,1),assert.equal(d,0)},"removes an existing event listener":function(a){var b=a.append("form"),c=0;b.on("submit",function(){++c}),b.on("submit",null),b.append("input").attr("type","submit").node().click(),assert.equal(c,0),assert.isUndefined(b.on("submit"))},"ignores removal of non-matching event listener":function(a){a.append("form").on("submit",null)},"observes the specified namespace":function(a){var b=a.append("form"),c=0,d=0;b.on("submit.foo",function(){++c}),b.on("submit.bar",function(){++d}),b.append("input").attr("type","submit").node().click(),assert.equal(c,1),assert.equal(d,1)},"passes the current data and index to the event listener":function(a){var b=a.html("").selectAll("form").data(["a","b"]).enter().append("form"),c,d,e=new Object;b.on("submit",function(a,b){c=a,d=b}),b.append("input").attr("type","submit")[0][1].click(),assert.equal(c,"b"),assert.equal(d,1),b[0][1].__data__=e,b.append("input").attr("type","submit")[0][1].click(),assert.equal(c,e),assert.equal(d,1)},"uses the current element as the context":function(a){var b=a.html("").selectAll("form").data(["a","b"]).enter().append("form"),c;b.on("submit",function(){c=this}),b.append("input").attr("type","submit")[0][1].click(),assert.domEqual(c,b[0][1])},"sets the current event as d3.event":function(a){var b=a.append("form"),c;b.on("submit",function(){c=d3.event}),b.append("input").attr("type","submit").node().click(),assert.equal(c.type,"submit"),assert.domEqual(c.target,b[0][0])},"restores the original event after notifying listeners":function(a){var b=a.append("form"),c=d3.event=new Object;b.on("submit",function(){}),b.append("input").attr("type","submit").node().click(),assert.equal(d3.event,c)},"returns the current selection":function(a){assert.isTrue(a.on("submit",function(){})===a)},"returns the assigned listener if called with one argument":function(a){function b(){}a.on("mouseover",b).on("click.foo",b),assert.equal(a.on("mouseover"),b),assert.equal(a.on("click.foo"),b),assert.isUndefined(a.on("click")),assert.isUndefined(a.on("mouseover.foo"))}}}),suite.export(module)