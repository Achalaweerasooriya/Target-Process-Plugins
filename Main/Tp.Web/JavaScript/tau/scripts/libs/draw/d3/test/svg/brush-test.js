require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.svg.brush");suite.addBatch({brush:{topic:function(){return d3.svg.brush},x:{"defaults to null":function(a){assert.isNull(a().x())}},y:{"defaults to null":function(a){assert.isNull(a().y())}},extent:{"returns null when no scales are attached":function(a){assert.isNull(a().extent())},"returns a one-dimensional array if only x is defined":function(a){var b=a().x(d3.scale.linear());assert.deepEqual(b.extent(),[0,0])},"takes a one-dimensional array if only x is defined":function(a){var b=a().x(d3.scale.linear()).extent([.1,.4]);assert.deepEqual(b.extent(),[.1,.4])},"returns a one-dimensional array if only y is defined":function(a){var b=a().y(d3.scale.linear());assert.deepEqual(b.extent(),[0,0])},"takes a one-dimensional array if only y is defined":function(a){var b=a().y(d3.scale.linear()).extent([.1,.4]);assert.deepEqual(b.extent(),[.1,.4])},"returns a two-dimensional array if x and y are defined":function(a){var b=a().x(d3.scale.linear()).y(d3.scale.linear());assert.deepEqual(b.extent(),[[0,0],[0,0]])},"takes a two-dimensional array if x and y are defined":function(a){var b=a().x(d3.scale.linear()).y(d3.scale.linear()).extent([[.1,.2],[.3,.4]]);assert.deepEqual(b.extent(),[[.1,.2],[.3,.4]])},"preserves the set extent exactly":function(a){var b=new Number(.1),c=new Number(.3),d=a().x(d3.scale.linear()).extent([b,c]),e=d.extent();assert.strictEqual(e[0],b),assert.strictEqual(e[1],c)}}}}),suite.export(module)