require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("selection.datum");suite.addBatch({"select(body)":{topic:function(){return d3.select("body").html("")},"updates the data according to the specified function":function(a){a.data([42]).datum(function(a,b){return a+b}),assert.equal(document.body.__data__,42)},"updates the data to the specified constant":function(a){a.datum(43),assert.equal(document.body.__data__,43)},"deletes the data if the function returns null":function(a){a.data([42]).datum(function(){return null}),assert.isFalse("__data__"in document.body)},"deletes the data if the constant is null":function(a){a.data([42]).datum(null),assert.isFalse("__data__"in document.body)},"returns the current selection":function(a){assert.isTrue(a.datum(function(){return 1})===a),assert.isTrue(a.datum(2)===a)},"with no arguments, returns the first node's datum":function(a){a.data([42]),assert.equal(a.datum(),42)}}}),suite.addBatch({"selectAll(div)":{topic:function(){return d3.select("body").html("").selectAll("div").data(d3.range(2)).enter().append("div")},"updates the data according to the specified function":function(a){a.data([42,43]).datum(function(a,b){return a+b}),assert.equal(a[0][0].__data__,42),assert.equal(a[0][1].__data__,44)},"updates the data to the specified constant":function(a){a.datum(44),assert.equal(a[0][0].__data__,44),assert.equal(a[0][1].__data__,44)},"deletes the data if the function returns null":function(a){a.datum(function(){return null}),assert.isFalse("__data__"in a[0][0]),assert.isFalse("__data__"in a[0][1])},"deletes the data if the constant is null":function(a){a.datum(null),assert.isFalse("__data__"in a[0][0]),assert.isFalse("__data__"in a[0][1])},"returns the current selection":function(a){assert.isTrue(a.datum(function(){return 1})===a),assert.isTrue(a.datum(2)===a)},"ignores null nodes":function(a){var b=d3.selectAll("div").data([42,43]);b[0][1]=null,b.datum(function(){return 1}),assert.equal(a[0][0].__data__,1),assert.equal(a[0][1].__data__,43),b.datum(2),assert.equal(a[0][0].__data__,2),assert.equal(a[0][1].__data__,43)}}}),suite.export(module)