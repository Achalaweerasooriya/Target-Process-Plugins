function testInterpolation(a){var b=[[10,0],[20,1],[20,2],[10,3]],c=d3.svg.line.radial(),d=d3.svg.line().x(function(a){return a[0]*Math.cos(a[1]-Math.PI/2)}).y(function(a){return a[0]*Math.sin(a[1]-Math.PI/2)});return function(){assert.pathEqual(c.interpolate(a)(b),d.interpolate(a)(b))}}require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.svg.line.radial");suite.addBatch({"line.radial":{topic:function(){return d3.svg.line.radial},"radius defaults to a function accessor":function(a){var b=a();assert.pathEqual(b([[10,0],[20,1],[20,2],[10,3]]),"M0,-10L16.82941969615793,-10.806046117362794L18.185948536513635,8.32293673094285L1.4112000805986715,9.899924966004454"),assert.typeOf(b.radius(),"function")},"radius can be defined as a constant":function(a){var b=a().radius(30);assert.pathEqual(b([[10,0],[20,1],[20,2],[10,3]]),"M0,-30L25.244129544236895,-16.20906917604419L27.278922804770453,12.484405096414275L4.233600241796014,29.699774898013363"),assert.equal(b.radius(),30)},"radius can be defined as a function":function(a){function g(a,b){return d.push(a),e.push(b),f.push(this),30}var b=a().radius(g),c={},d=[],e=[],f=[];assert.pathEqual(b.call(c,[[10,0],[20,1],[20,2],[10,3]]),"M0,-30L25.244129544236895,-16.20906917604419L27.278922804770453,12.484405096414275L4.233600241796014,29.699774898013363"),assert.deepEqual(d,[[10,0],[20,1],[20,2],[10,3]],"expected data, got {actual}"),assert.deepEqual(e,[0,1,2,3],"expected index, got {actual}"),assert.deepEqual(f,[c,c,c,c],"expected this, got {actual}")},"angle defaults to a function accessor":function(a){var b=a();assert.pathEqual(b([[10,0],[20,1],[20,2],[10,3]]),"M0,-10L16.82941969615793,-10.806046117362794L18.185948536513635,8.32293673094285L1.4112000805986715,9.899924966004454"),assert.typeOf(b.angle(),"function")},"angle can be defined as a constant":function(a){var b=a().angle(Math.PI/2);assert.pathEqual(b([[10,0],[20,1],[20,2],[10,3]]),"M10,0L20,0L20,0L10,0"),assert.equal(b.angle(),Math.PI/2)},"angle can be defined as a function":function(a){function g(a,b){return d.push(a),e.push(b),f.push(this),Math.PI/2}var b=a().angle(g),c={},d=[],e=[],f=[];assert.pathEqual(b.call(c,[[10,0],[20,1],[20,2],[10,3]]),"M10,0L20,0L20,0L10,0"),assert.deepEqual(d,[[10,0],[20,1],[20,2],[10,3]],"expected data, got {actual}"),assert.deepEqual(e,[0,1,2,3],"expected index, got {actual}"),assert.deepEqual(f,[c,c,c,c],"expected this, got {actual}")},"angle is defined in radians, with zero at 12 o'clock":function(a){var b=a().angle(0);assert.pathEqual(b([[10,Math.PI],[20,Math.PI/3]]),"M0,-10L0,-20"),assert.equal(b.angle(),0)},"interpolate defaults to linear":function(a){assert.equal(a().interpolate(),"linear")},"interpolate can be defined as a constant":function(a){var b=a().interpolate("cardinal");assert.pathEqual(b([[10,0],[20,1],[20,2],[10,3]]),"M0,-10Q15.010824842506567,-12.638339790457078,16.82941969615793,-10.806046117362794C19.557311976634978,-8.057605607721365,20.498681478847523,5.217041068437762,18.185948536513635,8.32293673094285Q16.64412657495771,10.393533839279574,1.4112000805986715,9.899924966004454"),assert.equal(b.interpolate(),"cardinal")},"tension defaults to .7":function(a){assert.equal(a().tension(),.7)},"tension can be specified as a constant":function(a){var b=a().tension(.5);assert.equal(b.tension(),.5)},"returns null if input points array is empty":function(a){assert.isNull(a()([]))},"interpolate(linear)":{"supports linear interpolation":testInterpolation("linear")},"interpolate(step)":{"supports step-before interpolation":testInterpolation("step-before"),"supports step-after interpolation":testInterpolation("step-after")},"interpolate(basis)":{"supports basis interpolation":testInterpolation("basis"),"supports basis-open interpolation":testInterpolation("basis-open"),"supports basis-closed interpolation":testInterpolation("basis-closed")},"interpolate(bundle)":{"supports bundle interpolation":testInterpolation("bundle")},"interpolate(cardinal)":{"supports cardinal interpolation":testInterpolation("cardinal"),"supports cardinal-open interpolation":testInterpolation("cardinal-open"),"supports cardinal-closed interpolation":testInterpolation("cardinal-closed")},"interpolate(monotone)":{"supports monotone interpolation":testInterpolation("monotone")}}}),suite.export(module)