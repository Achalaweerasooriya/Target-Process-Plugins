require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.min");suite.addBatch({min:{topic:function(){return d3.min},"returns the least numeric value for numbers":function(a){assert.equal(a([1]),1),assert.equal(a([5,1,2,3,4]),1),assert.equal(a([20,3]),3),assert.equal(a([3,20]),3)},"returns the least lexicographic value for strings":function(a){assert.equal(a(["c","a","b"]),"a"),assert.equal(a(["20","3"]),"20"),assert.equal(a(["3","20"]),"20")},"ignores null, undefined and NaN":function(a){assert.equal(a([NaN,1,2,3,4,5]),1),assert.equal(a([1,2,3,4,5,NaN]),1),assert.equal(a([10,null,3,undefined,5,NaN]),3)},"compares heterogenous types as numbers":function(a){assert.strictEqual(a([20,"3"]),"3"),assert.strictEqual(a(["20",3]),3),assert.strictEqual(a([3,"20"]),3),assert.strictEqual(a(["3",20]),"3")},"returns undefined for empty array":function(a){assert.isUndefined(a([])),assert.isUndefined(a([null])),assert.isUndefined(a([undefined])),assert.isUndefined(a([NaN])),assert.isUndefined(a([NaN,NaN]))},"applies the optional accessor function":function(a){assert.equal(d3.min([[1,2,3,4,5],[2,4,6,8,10]],function(a){return d3.max(a)}),5),assert.equal(d3.min([1,2,3,4,5],function(a,b){return b}),0)}}}),suite.export(module)