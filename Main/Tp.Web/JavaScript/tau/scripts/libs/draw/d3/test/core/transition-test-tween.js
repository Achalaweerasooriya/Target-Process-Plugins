require("../env");var assert=require("assert");module.exports={topic:function(){function h(h,i){return b.push(h),c.push(i),d.push(this)>=2&&a(null,{selection:f,transition:g,data:b,index:c,context:d,fails:e}),i&&function(a){this.textContent=d3.hsl(230,.5,a)+""}}var a=this.callback,b=[],c=[],d=[],e=0,f=d3.select("body").append("div").selectAll("div").data(["red","green"]).enter().append("div").text(function(a){return d3.rgb(a)+""}),g=f.transition().tween("text",function(){++e}).tween("text",h)},"defines the corresponding tween":function(a){assert.typeOf(a.transition.tween("text"),"function")},"the last tween takes precedence":function(a){assert.equal(a.fails,0)},"invokes the tween function":function(a){assert.deepEqual(a.data,["red","green"],"expected data, got {actual}"),assert.deepEqual(a.index,[0,1],"expected data, got {actual}"),assert.domEqual(a.context[0],a.selection[0][0],"expected this, got {actual}"),assert.domEqual(a.context[1],a.selection[0][1],"expected this, got {actual}")},end:{topic:function(a){var b=this.callback;a.transition.each("end",function(c,d){d>=1&&b(null,a)})},"uses the returned tweener":function(a){assert.equal(a.selection[0][1].textContent,"#ffffff")},"does nothing if the tweener is falsey":function(a){assert.equal(a.selection[0][0].textContent,"#ff0000")}}}