function ascendingByKey(a,b){return d3.ascending(a.key,b.key)}require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.map");suite.addBatch({constructor:{"map() returns an empty map":function(){var a=d3.map();assert.deepEqual(a.keys(),[])},"map(null) returns an empty map":function(){var a=d3.map(null);assert.deepEqual(a.keys(),[])},"map(object) copies enumerable keys":function(){var a=d3.map({foo:42});assert.isTrue(a.has("foo")),assert.equal(a.get("foo"),42);var a=d3.map(Object.create(null,{foo:{value:42,enumerable:!0}}));assert.isTrue(a.has("foo")),assert.equal(a.get("foo"),42)},"map(object) copies inherited keys":function(){function a(){}a.prototype.foo=42;var b=d3.map(Object.create({foo:42}));assert.isTrue(b.has("foo")),assert.equal(b.get("foo"),42);var b=d3.map(new a);assert.isTrue(b.has("foo")),assert.equal(b.get("foo"),42)},"map(object) does not copy non-enumerable keys":function(){var a=d3.map({__proto__:42});assert.isFalse(a.has("__proto__")),assert.isUndefined(a.get("__proto__"));var a=d3.map(Object.create(null,{foo:{value:42,enumerable:!1}}));assert.isFalse(a.has("foo")),assert.isUndefined(a.get("foo"))}},forEach:{"empty maps have an empty keys array":function(){var a=d3.map();assert.deepEqual(a.entries(),[]),a.set("foo","bar"),assert.deepEqual(a.entries(),[{key:"foo",value:"bar"}]),a.remove("foo"),assert.deepEqual(a.entries(),[])},"keys are returned in arbitrary order":function(){var a=d3.map({foo:1,bar:"42"});assert.deepEqual(a.entries().sort(ascendingByKey),[{key:"bar",value:"42"},{key:"foo",value:1}]);var a=d3.map({bar:"42",foo:1});assert.deepEqual(a.entries().sort(ascendingByKey),[{key:"bar",value:"42"},{key:"foo",value:1}])},"observes changes via set and remove":function(){var a=d3.map({foo:1,bar:"42"});assert.deepEqual(a.entries().sort(ascendingByKey),[{key:"bar",value:"42"},{key:"foo",value:1}]),a.remove("foo"),assert.deepEqual(a.entries(),[{key:"bar",value:"42"}]),a.set("bar","bar"),assert.deepEqual(a.entries(),[{key:"bar",value:"bar"}]),a.set("foo","foo"),assert.deepEqual(a.entries().sort(ascendingByKey),[{key:"bar",value:"bar"},{key:"foo",value:"foo"}]),a.remove("bar"),assert.deepEqual(a.entries(),[{key:"foo",value:"foo"}]),a.remove("foo"),assert.deepEqual(a.entries(),[]),a.remove("foo"),assert.deepEqual(a.entries(),[])}},keys:{"returns an array of string keys":function(){var a=d3.map({foo:1,bar:"42"});assert.deepEqual(a.keys().sort(),["bar","foo"])}},values:{"returns an array of arbitrary values":function(){var a=d3.map({foo:1,bar:"42"});assert.deepEqual(a.values().sort(),[1,"42"])}},entries:{"returns an array of key-value objects":function(){var a=d3.map({foo:1,bar:"42"});assert.deepEqual(a.entries().sort(ascendingByKey),[{key:"bar",value:"42"},{key:"foo",value:1}])}},has:{"empty maps do not have object built-ins":function(){var a=d3.map();assert.isFalse(a.has("__proto__")),assert.isFalse(a.has("hasOwnProperty"))},"can has keys using built-in names":function(){var a=d3.map();a.set("__proto__",42),assert.isTrue(a.has("__proto__"))},"can has keys with null or undefined properties":function(){var a=d3.map();a.set("",""),a.set("null",null),a.set("undefined",undefined),assert.isTrue(a.has("")),assert.isTrue(a.has("null")),assert.isTrue(a.has("undefined"))},"coerces keys to strings":function(){var a=d3.map({42:"foo","null":1,"undefined":2});assert.isTrue(a.has(42)),assert.isTrue(a.has(null)),assert.isTrue(a.has(undefined))},"returns the latest value":function(){var a=d3.map({foo:42});assert.isTrue(a.has("foo")),a.set("foo",43),assert.isTrue(a.has("foo")),a.remove("foo"),assert.isFalse(a.has("foo")),a.set("foo","bar"),assert.isTrue(a.has("foo"))},"returns undefined for missing keys":function(){var a=d3.map({foo:42});assert.isFalse(a.has("bar"))}},get:{"empty maps do not have object built-ins":function(){var a=d3.map();assert.isUndefined(a.get("__proto__")),assert.isUndefined(a.get("hasOwnProperty"))},"can get keys using built-in names":function(){var a=d3.map();a.set("__proto__",42),assert.equal(a.get("__proto__"),42)},"coerces keys to strings":function(){var a=d3.map({42:1,"null":2,"undefined":3});assert.equal(a.get(42),1),assert.equal(a.get(null),2),assert.equal(a.get(undefined),3)},"returns the latest value":function(){var a=d3.map({foo:42});assert.equal(a.get("foo"),42),a.set("foo",43),assert.equal(a.get("foo"),43),a.remove("foo"),assert.isUndefined(a.get("foo")),a.set("foo","bar"),assert.equal(a.get("foo"),"bar")},"returns undefined for missing keys":function(){var a=d3.map({foo:42});assert.isUndefined(a.get("bar"))}},set:{"returns the set value":function(){var a=d3.map();assert.equal(a.set("foo",42),42)},"can set keys using built-in names":function(){var a=d3.map();a.set("__proto__",42),assert.equal(a.get("__proto__"),42)},"coerces keys to strings":function(){var a=d3.map();a.set(42,1),assert.equal(a.get(42),1),a.set(null,2),assert.equal(a.get(null),2),a.set(undefined,3),assert.equal(a.get(undefined),3),assert.deepEqual(a.keys().sort(),["42","null","undefined"])},"can replace values":function(){var a=d3.map({foo:42});assert.equal(a.get("foo"),42),a.set("foo",43),assert.equal(a.get("foo"),43),a.set("foo","bar"),assert.equal(a.get("foo"),"bar")},"can set null, undefined or empty string values":function(){var a=d3.map();a.set("",""),a.set("null",null),a.set("undefined",undefined),assert.equal(a.get(""),""),assert.isNull(a.get("null")),assert.isUndefined(a.get("undefined"))}}}),suite.export(module)