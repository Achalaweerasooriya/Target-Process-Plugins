require("../env");var assert=require("assert");module.exports={start:{topic:function(){var a=this.callback,b=d3.select("body").html("").selectAll().data(["foo","bar"]).enter().append("div").attr("class",String),c=b.transition().delay(150),d=Date.now(),e=0,f=[],g=[],h=[],i=[],j=[],k=[];c.each("start.other",function(){++e}),c.each("start",function(f,l){g.push(this),h.push(f),i.push(l),j.push(++e),k.push(Date.now()-d),e>=4&&a(null,{selection:b,delay:k,context:g,data:h,index:i,count:j,id:c.id})})},"invokes the listener after the specified delay":function(a){assert.inDelta(a.delay,[150,150],20)},"invokes each listener exactly once, in order":function(a){assert.deepEqual(a.count,[2,4])},"uses the node as the context":function(a){assert.domEqual(a.context[1],a.selection[0][0]),assert.domEqual(a.context[0],a.selection[0][1])},"passes the data and index to the function":function(a){assert.deepEqual(a.data,["bar","foo"],"expected data, got {actual}"),assert.deepEqual(a.index,[1,0],"expected index, got {actual}")},"sets an exclusive lock on transitioning nodes":function(a){var b=a.id;assert.isTrue(b>0),assert.equal(a.selection[0][0].__transition__.count,1),assert.equal(a.selection[0][1].__transition__.count,1),assert.equal(a.selection[0][0].__transition__.active,b),assert.equal(a.selection[0][1].__transition__.active,b)}},end:{topic:function(){var a=this.callback,b=d3.select("body").html("").selectAll().data(["foo","bar"]).enter().append("div").attr("class",String),c=b.transition().duration(150),d=Date.now(),e=0,f=[],g=[],h=[],i=[],j=[],k=[];c.each("end.other",function(){++e}),c.each("end",function(f,l){g.push(this),h.push(f),i.push(l),j.push(++e),k.push(Date.now()-d),e>=4&&a(null,{selection:b,delay:k,context:g,data:h,index:i,count:j,id:c.id})})},"invokes the listener after the specified delay":function(a){assert.inDelta(a.delay,[150,150],20)},"invokes each listener exactly once, in order":function(a){assert.deepEqual(a.count,[2,4])},"uses the node as the context":function(a){assert.domEqual(a.context[1],a.selection[0][0]),assert.domEqual(a.context[0],a.selection[0][1])},"passes the data and index to the function":function(a){assert.deepEqual(a.data,["bar","foo"],"expected data, got {actual}"),assert.deepEqual(a.index,[1,0],"expected index, got {actual}")},"deletes the transition lock after end":function(a){assert.isFalse("__transition__"in a.selection[0][0]),assert.isFalse("__transition__"in a.selection[0][1])},sequenced:{topic:function(a){var b=this.callback,c=a.selection[0][0],d=a.id;d3.select(c).transition().delay(150).each("start",function(){b(null,{id:d,node:this})})},"inherits the same transition id":function(a){assert.isTrue(a.id>0),assert.equal(a.node.__transition__.count,1),assert.equal(a.node.__transition__.active,a.id)}}}}