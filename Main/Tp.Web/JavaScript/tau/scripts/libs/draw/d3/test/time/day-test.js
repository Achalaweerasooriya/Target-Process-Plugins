require("../env");var vows=require("vows"),assert=require("assert"),time=require("./time"),local=time.local,utc=time.utc,suite=vows.describe("d3.time.day");suite.addBatch({day:{topic:function(){return d3.time.day},"defaults to floor":function(a){assert.strictEqual(a,a.floor)},floor:{topic:function(a){return a.floor},"returns midnights":function(a){assert.deepEqual(a(local(2010,11,31,23)),local(2010,11,31)),assert.deepEqual(a(local(2011,0,1,0)),local(2011,0,1)),assert.deepEqual(a(local(2011,0,1,1)),local(2011,0,1))},"observes start of daylight savings time":function(a){assert.deepEqual(a(utc(2011,2,13,7)),local(2011,2,12)),assert.deepEqual(a(utc(2011,2,13,8)),local(2011,2,13)),assert.deepEqual(a(utc(2011,2,13,9)),local(2011,2,13)),assert.deepEqual(a(utc(2011,2,13,10)),local(2011,2,13))},"observes end of daylight savings time":function(a){assert.deepEqual(a(utc(2011,10,6,7)),local(2011,10,6)),assert.deepEqual(a(utc(2011,10,6,8)),local(2011,10,6)),assert.deepEqual(a(utc(2011,10,6,9)),local(2011,10,6)),assert.deepEqual(a(utc(2011,10,6,10)),local(2011,10,6))}},ceil:{topic:function(a){return a.ceil},"returns midnights":function(a){assert.deepEqual(a(local(2010,11,30,23)),local(2010,11,31)),assert.deepEqual(a(local(2010,11,31,0)),local(2010,11,31)),assert.deepEqual(a(local(2010,11,31,1)),local(2011,0,1))},"observes start of daylight savings time":function(a){assert.deepEqual(a(utc(2011,2,13,7)),local(2011,2,13)),assert.deepEqual(a(utc(2011,2,13,8)),local(2011,2,13)),assert.deepEqual(a(utc(2011,2,13,9)),local(2011,2,14)),assert.deepEqual(a(utc(2011,2,13,10)),local(2011,2,14))},"observes end of daylight savings time":function(a){assert.deepEqual(a(utc(2011,10,6,7)),local(2011,10,6)),assert.deepEqual(a(utc(2011,10,6,8)),local(2011,10,7)),assert.deepEqual(a(utc(2011,10,6,9)),local(2011,10,7)),assert.deepEqual(a(utc(2011,10,6,10)),local(2011,10,7))}},offset:{topic:function(a){return a.offset},"does not modify the passed-in date":function(a){var b=local(2010,11,31,23,59,59,999);a(b,1),assert.deepEqual(b,local(2010,11,31,23,59,59,999))},"does not round the passed-in-date":function(a){assert.deepEqual(a(local(2010,11,31,23,59,59,999),1),local(2011,0,1,23,59,59,999)),assert.deepEqual(a(local(2010,11,31,23,59,59,456),-2),local(2010,11,29,23,59,59,456))},"allows negative offsets":function(a){assert.deepEqual(a(local(2010,11,31),-1),local(2010,11,30)),assert.deepEqual(a(local(2011,0,1),-2),local(2010,11,30)),assert.deepEqual(a(local(2011,0,1),-1),local(2010,11,31))},"allows positive offsets":function(a){assert.deepEqual(a(local(2010,11,31),1),local(2011,0,1)),assert.deepEqual(a(local(2010,11,30),2),local(2011,0,1)),assert.deepEqual(a(local(2010,11,30),1),local(2010,11,31))},"allows zero offset":function(a){assert.deepEqual(a(local(2010,11,31,23,59,59,999),0),local(2010,11,31,23,59,59,999)),assert.deepEqual(a(local(2010,11,31,23,59,58,0),0),local(2010,11,31,23,59,58,0))}},UTC:{topic:function(a){return a.utc},"defaults to floor":function(a){assert.strictEqual(a,a.floor)},floor:{topic:function(a){return a.floor},"returns midnights":function(a){assert.deepEqual(a(utc(2010,11,31,23)),utc(2010,11,31)),assert.deepEqual(a(utc(2011,0,1,0)),utc(2011,0,1)),assert.deepEqual(a(utc(2011,0,1,1)),utc(2011,0,1))},"does not observe the start of daylight savings time":function(a){assert.deepEqual(a(utc(2011,2,13,7)),utc(2011,2,13)),assert.deepEqual(a(utc(2011,2,13,8)),utc(2011,2,13)),assert.deepEqual(a(utc(2011,2,13,9)),utc(2011,2,13)),assert.deepEqual(a(utc(2011,2,13,10)),utc(2011,2,13))},"does not observe the end of daylight savings time":function(a){assert.deepEqual(a(utc(2011,10,6,5)),utc(2011,10,6)),assert.deepEqual(a(utc(2011,10,6,6)),utc(2011,10,6)),assert.deepEqual(a(utc(2011,10,6,7)),utc(2011,10,6)),assert.deepEqual(a(utc(2011,10,6,8)),utc(2011,10,6))}},ceil:{topic:function(a){return a.ceil},"returns midnights":function(a){assert.deepEqual(a(utc(2010,11,30,23)),utc(2010,11,31)),assert.deepEqual(a(utc(2010,11,31,0)),utc(2010,11,31)),assert.deepEqual(a(utc(2010,11,31,1)),utc(2011,0,1))},"does not observe the start of daylight savings time":function(a){assert.deepEqual(a(utc(2011,2,13,7)),utc(2011,2,14)),assert.deepEqual(a(utc(2011,2,13,8)),utc(2011,2,14)),assert.deepEqual(a(utc(2011,2,13,9)),utc(2011,2,14)),assert.deepEqual(a(utc(2011,2,13,10)),utc(2011,2,14))},"does not observe the end of daylight savings time":function(a){assert.deepEqual(a(utc(2011,10,6,5)),utc(2011,10,7)),assert.deepEqual(a(utc(2011,10,6,6)),utc(2011,10,7)),assert.deepEqual(a(utc(2011,10,6,7)),utc(2011,10,7)),assert.deepEqual(a(utc(2011,10,6,8)),utc(2011,10,7))}},offset:{topic:function(a){return a.offset},"does not modify the passed-in date":function(a){var b=utc(2010,11,31,23,59,59,999);a(b,1),assert.deepEqual(b,utc(2010,11,31,23,59,59,999))},"does not round the passed-in-date":function(a){assert.deepEqual(a(utc(2010,11,31,23,59,59,999),1),utc(2011,0,1,23,59,59,999)),assert.deepEqual(a(utc(2010,11,31,23,59,59,456),-2),utc(2010,11,29,23,59,59,456))},"allows negative offsets":function(a){assert.deepEqual(a(utc(2010,11,31),-1),utc(2010,11,30)),assert.deepEqual(a(utc(2011,0,1),-2),utc(2010,11,30)),assert.deepEqual(a(utc(2011,0,1),-1),utc(2010,11,31))},"allows positive offsets":function(a){assert.deepEqual(a(utc(2010,11,31),1),utc(2011,0,1)),assert.deepEqual(a(utc(2010,11,30),2),utc(2011,0,1)),assert.deepEqual(a(utc(2010,11,30),1),utc(2010,11,31))},"allows zero offset":function(a){assert.deepEqual(a(utc(2010,11,31,23,59,59,999),0),utc(2010,11,31,23,59,59,999)),assert.deepEqual(a(utc(2010,11,31,23,59,58,0),0),utc(2010,11,31,23,59,58,0))}}}}}),suite.export(module)