require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.xhr");suite.addBatch({xhr:{topic:function(){var a=this.callback;return d3.xhr("examples/data/sample.txt",function(b){a(null,b)})},"makes an asynchronous HTTP request":function(a){assert.equal(a._info.url,"examples/data/sample.txt"),assert.isTrue(a._info.async)},"invokes the callback with the request object":function(a){assert.equal(a.responseText,"Hello, world!\n")},"does not override the mime type by default":function(a){assert.isUndefined(a._info.mimeType)},"waits until the request is done":function(a){assert.equal(a.readyState,4),assert.equal(a.status,200)},"":{topic:function(){var a=this.callback;return d3.xhr("examples/data/sample.txt","text/plain",function(b){a(null,b)})},"observes the optional mime type":function(a){assert.equal(a._info.mimeType,"text/plain")}}," ":{topic:function(){var a=this.callback;return d3.xhr("//does/not/exist.txt",function(b){a(null,b)})},"invokes the callback with null when an error occurs":function(a){assert.isNull(a)}}}}),suite.export(module)