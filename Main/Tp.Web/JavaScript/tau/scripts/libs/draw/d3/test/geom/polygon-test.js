require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.geom.polygon");suite.addBatch({"closed counterclockwise unit square":{topic:function(){return d3.geom.polygon([[0,0],[0,1],[1,1],[1,0],[0,0]])},"has area 1":function(a){assert.equal(a.area(),1)},"has centroid ⟨.5,.5⟩":function(a){assert.deepEqual(a.centroid(),[.5,.5])}},"closed clockwise unit square":{topic:function(){return d3.geom.polygon([[0,0],[1,0],[1,1],[0,1],[0,0]])},"has area 1":function(a){assert.equal(a.area(),-1)},"has centroid ⟨.5,.5⟩":function(a){assert.deepEqual(a.centroid(),[.5,.5])}},"closed clockwise triangle":{topic:function(){return d3.geom.polygon([[1,1],[3,2],[2,3],[1,1]])},"has area 1.5":function(a){assert.equal(a.area(),-1.5)},"has centroid ⟨2,2⟩":function(a){var b=a.centroid();assert.inDelta(b[0],2,1e-6),assert.inDelta(b[1],2,1e-6)}},"open counterclockwise unit square":{topic:function(){return d3.geom.polygon([[0,0],[0,1],[1,1],[1,0]])},"has area 1":function(a){assert.equal(a.area(),1)},"has centroid ⟨.5,.5⟩":function(a){assert.deepEqual(a.centroid(),[.5,.5])}},"open clockwise unit square":{topic:function(){return d3.geom.polygon([[0,0],[1,0],[1,1],[0,1]])},"has area 1":function(a){assert.equal(a.area(),-1)},"has centroid ⟨.5,.5⟩":function(a){assert.deepEqual(a.centroid(),[.5,.5])}},"open clockwise triangle":{topic:function(){return d3.geom.polygon([[1,1],[3,2],[2,3]])},"has area 1.5":function(a){assert.equal(a.area(),-1.5)},"has centroid ⟨2,2⟩":function(a){var b=a.centroid();assert.inDelta(b[0],2,1e-6),assert.inDelta(b[1],2,1e-6)}}}),suite.export(module)