require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("selection.select");suite.addBatch({"select(body)":{topic:function(){var a=d3.select("body").html("");return a.append("div").attr("class","first"),a.append("div").attr("class","second"),a},"selects the first matching element":function(a){var b=a.select("div");assert.isTrue(b[0][0]===document.body.firstChild),assert.equal(b.length,1),assert.equal(b[0].length,1),assert.equal(b.attr("class"),"first")},"propagates parent node to the selected elements":function(a){var b=a.select("div");assert.isNotNull(b[0].parentNode),assert.isTrue(b[0].parentNode===document.documentElement),assert.isTrue(b[0].parentNode===a[0].parentNode)},"propagates data to the selected elements":function(a){var b=new Object,c=a.data([b]).select("div");assert.strictEqual(c[0][0].__data__,b)},"does not propagate data if no data was specified":function(a){delete document.body.__data__;var b=new Object,c=a.select("div").data([b]);c=a.select("div"),assert.strictEqual(c[0][0].__data__,b),assert.isUndefined(document.body.__data__)},"returns null if no match is found":function(a){var b=a.select("span");assert.equal(b[0][0],null),assert.equal(b.length,1),assert.equal(b[0].length,1)},"can select via function":function(a){a.append("foo");var b={},c=[],d=[],e=[],f=a.data([b]).select(function(a,b){return c.push(a),d.push(b),e.push(this),this.firstChild});assert.deepEqual(c,[b],"expected data, got {actual}"),assert.deepEqual(d,[0],"expected index, got {actual}"),assert.domEqual(e[0],document.body,"expected this, got {actual}"),assert.domEqual(f[0][0],document.body.firstChild),delete document.body.__data__}}}),suite.addBatch({"selectAll(div)":{topic:function(){var a=d3.select("body").html("").selectAll("div").data(d3.range(2)).enter().append("div");return a.append("span").attr("class","first"),a.append("span").attr("class","second"),a},"selects the first matching element":function(a){var b=a.select("span");assert.isTrue(b[0][0].parentNode===a[0][0]),assert.isTrue(b[0][1].parentNode===a[0][1]),assert.equal(b.length,1),assert.equal(b[0].length,2),assert.equal(b.attr("class"),"first")},"propagates parent node to the selected elements":function(a){var b=a.select("span");assert.isNotNull(b[0].parentNode),assert.isTrue(b[0].parentNode===document.body),assert.isTrue(b[0].parentNode===a[0].parentNode)},"propagates data to the selected elements":function(a){var b=new Object,c=a.data([b]).select("span");assert.strictEqual(c[0][0].__data__,b)},"does not propagate data if no data was specified":function(a){delete a[0][0].__data__,delete a[0][1].__data__;var b=new Object,c=new Object,d=a.select("span").data([b,c]);d=a.select("span"),assert.strictEqual(d[0][0].__data__,b),assert.strictEqual(d[0][1].__data__,c),assert.isUndefined(a[0][0].__data__),assert.isUndefined(a[0][1].__data__)},"returns null if no match is found":function(a){var a=a.select("div");assert.equal(a[0][0],null),assert.equal(a[0][1],null),assert.equal(a.length,1),assert.equal(a[0].length,2)},"ignores null nodes":function(a){var b=d3.selectAll("div");b[0][1]=null;var c=b.select("span");assert.equal(c.length,1),assert.equal(c[0].length,2),assert.isTrue(c[0][0].parentNode===a[0][0]),assert.isNull(c[0][1])},"can select via function":function(a){var b=[],c=[],d=[],e=a.data(["a","b"]).select(function(a,e){return b.push(a),c.push(e),d.push(this),this.firstChild});assert.deepEqual(b,["a","b"],"expected data, got {actual}"),assert.deepEqual(c,[0,1],"expected index, got {actual}"),assert.domEqual(d[0],a[0][0],"expected this, got {actual}"),assert.domEqual(d[1],a[0][1],"expected this, got {actual}"),assert.domEqual(e[0][0],a[0][0].firstChild),assert.domEqual(e[0][1],a[0][1].firstChild)}}}),suite.export(module)