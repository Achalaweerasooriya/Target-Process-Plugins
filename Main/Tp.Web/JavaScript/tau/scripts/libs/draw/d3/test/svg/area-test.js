function testInterpolation(a,b){return arguments.length<2&&(b=a),function(c){var d=c().interpolate(a),e=[[0,0],[1,1],[2,0],[3,1],[4,0]],f=d3.svg.line().interpolate(b).x(d.x0()).y(d.y0()),g=d3.svg.line().interpolate(a).x(d.x1()).y(d.y1());assert.pathEqual(d(e),g(e)+"L"+f(e.reverse()).substring(1)+"Z")}}require("../env");var vows=require("vows"),assert=require("assert"),suite=vows.describe("d3.svg.area");suite.addBatch({area:{topic:function(){return d3.svg.area},"x is an alias for setting x0 and x1":function(a){function c(){}var b=a().x(c);assert.equal(b.x(),c),assert.equal(b.x0(),c),assert.equal(b.x1(),c)},"x is an alias for getting x1":function(a){function c(){}var b=a().x1(c);assert.equal(b.x(),c)},"y is an alias for setting y0 and y1":function(a){function c(){}var b=a().y(c);assert.equal(b.y(),c),assert.equal(b.y0(),c),assert.equal(b.y1(),c)},"y is an alias for getting x1":function(a){function c(){}var b=a().y1(c);assert.equal(b.y(),c)},"x0 defaults to a function accessor":function(a){var b=a();assert.pathEqual(b([[1,2],[4,3]]),"M1,2L4,3L4,0L1,0Z"),assert.typeOf(b.x0(),"function")},"x0 can be defined as a constant":function(a){var b=a().x0(0);assert.pathEqual(b([[1,2],[4,3]]),"M1,2L4,3L0,0L0,0Z"),assert.equal(b.x0(),0)},"x0 can be defined as a function":function(a){function g(a,b){return d.push(a),e.push(b),f.push(this),0}var b=a().x0(g),c={},d=[],e=[],f=[];assert.pathEqual(b.call(c,[[1,2],[4,3]]),"M1,2L4,3L0,0L0,0Z"),assert.deepEqual(d,[[1,2],[4,3]],"expected data, got {actual}"),assert.deepEqual(e,[0,1],"expected index, got {actual}"),assert.deepEqual(f,[c,c],"expected this, got {actual}")},"x1 defaults to a function accessor":function(a){var b=a();assert.pathEqual(b([[1,2],[4,3]]),"M1,2L4,3L4,0L1,0Z"),assert.typeOf(b.x1(),"function")},"x1 can be defined as a constant":function(a){var b=a().x1(0);assert.pathEqual(b([[1,2],[4,3]]),"M0,2L0,3L4,0L1,0Z"),assert.equal(b.x1(),0)},"x1 can be defined as a function":function(a){function g(a,b){return d.push(a),e.push(b),f.push(this),0}var b=a().x1(g),c={},d=[],e=[],f=[];assert.pathEqual(b.call(c,[[1,2],[4,3]]),"M0,2L0,3L4,0L1,0Z"),assert.deepEqual(d,[[1,2],[4,3]],"expected data, got {actual}"),assert.deepEqual(e,[0,1],"expected index, got {actual}"),assert.deepEqual(f,[c,c],"expected this, got {actual}")},"y0 defaults to zero":function(a){var b=a();assert.pathEqual(b([[1,2],[4,3]]),"M1,2L4,3L4,0L1,0Z"),assert.equal(b.y0(),0)},"y0 can be defined as a constant":function(a){var b=a().y0(1);assert.pathEqual(b([[1,2],[4,3]]),"M1,2L4,3L4,1L1,1Z"),assert.equal(b.y0(),1)},"y0 can be defined as a function":function(a){function g(a,b){return d.push(a),e.push(b),f.push(this),1}var b=a().y0(g),c={},d=[],e=[],f=[];assert.pathEqual(b.call(c,[[1,2],[4,3]]),"M1,2L4,3L4,1L1,1Z"),assert.deepEqual(d,[[1,2],[4,3]],"expected data, got {actual}"),assert.deepEqual(e,[0,1],"expected index, got {actual}"),assert.deepEqual(f,[c,c],"expected this, got {actual}")},"y1 defaults to a function accessor":function(a){var b=a();assert.pathEqual(b([[1,2],[4,3]]),"M1,2L4,3L4,0L1,0Z"),assert.typeOf(b.y1(),"function")},"y1 can be defined as a constant":function(a){var b=a().y1(1);assert.pathEqual(b([[1,2],[4,3]]),"M1,1L4,1L4,0L1,0Z"),assert.equal(b.y1(),1)},"y1 can be defined as a function":function(a){function g(a,b){return d.push(a),e.push(b),f.push(this),1}var b=a().y1(g),c={},d=[],e=[],f=[];assert.pathEqual(b.call(c,[[1,2],[4,3]]),"M1,1L4,1L4,0L1,0Z"),assert.deepEqual(d,[[1,2],[4,3]],"expected data, got {actual}"),assert.deepEqual(e,[0,1],"expected index, got {actual}"),assert.deepEqual(f,[c,c],"expected this, got {actual}")},"if x0 === x1, x is only evaluated once per point":function(a){function g(a,b){return d.push(a),e.push(b),f.push(this),0}var b=a().x(g),c={},d=[],e=[],f=[];assert.pathEqual(b.call(c,[[1,2],[4,3]]),"M0,2L0,3L0,0L0,0Z"),assert.deepEqual(d,[[1,2],[4,3]],"expected data, got {actual}"),assert.deepEqual(e,[0,1],"expected index, got {actual}"),assert.deepEqual(f,[c,c],"expected this, got {actual}")},"if y0 === y1, y is only evaluated once per point":function(a){function g(a,b){return d.push(a),e.push(b),f.push(this),1}var b=a().y(g),c={},d=[],e=[],f=[];assert.pathEqual(b.call(c,[[1,2],[4,3]]),"M1,1L4,1L4,1L1,1Z"),assert.deepEqual(d,[[1,2],[4,3]],"expected data, got {actual}"),assert.deepEqual(e,[0,1],"expected index, got {actual}"),assert.deepEqual(f,[c,c],"expected this, got {actual}")},"interpolate defaults to linear":function(a){assert.equal(a().interpolate(),"linear")},"interpolate can be defined as a constant":function(a){var b=a().interpolate("step-before");assert.pathEqual(b([[0,0],[1,1]]),"M0,0V1H1L1,0H0V0Z"),assert.equal(b.interpolate(),"step-before")},"invalid interpolates fallback to linear":function(a){assert.equal(a().interpolate("__proto__").interpolate(),"linear")},"tension defaults to .7":function(a){assert.equal(a().tension(),.7)},"tension can be specified as a constant":function(a){var b=a().tension(.5);assert.equal(b.tension(),.5)},"returns null if input points array is empty":function(a){assert.isNull(a()([]))},"interpolate(linear)":{"supports linear interpolation":testInterpolation("linear")},"interpolate(step)":{"supports step-before interpolation":testInterpolation("step-before","step-after"),"supports step-after interpolation":testInterpolation("step-after","step-before")},"interpolate(basis)":{"supports basis interpolation":testInterpolation("basis"),"supports basis-open interpolation":testInterpolation("basis-open")},"interpolate(cardinal)":{"supports cardinal interpolation":testInterpolation("cardinal"),"supports cardinal-open interpolation":testInterpolation("cardinal-open")},"interpolate(monotone)":{"supports monotone interpolation":testInterpolation("monotone")}}}),suite.export(module)