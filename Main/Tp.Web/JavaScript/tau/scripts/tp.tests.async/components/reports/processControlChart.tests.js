define(["jQuery","Underscore","libs/d3/d3","tests.async/testkit/testkit.component","tp/reports/processControl/component.report","tests/common/remoteConstants","app.path","tp.tests.async/components/reports/chart.helper"],function($,_,d3,TestKit,Component,Constants,path,helper){var testKit=new TestKit(Component);testKit.registerSetup("fixtures",function(test,next){var entityStates={us_done:{name:"done"+ +(new Date),entityType:"us",process:"scrum",isFinal:!0},bug_done:{name:"done"+ +(new Date),entityType:"bug",process:"scrum",isFinal:!0},task_done:{name:"done"+ +(new Date),entityType:"task",process:"scrum",isFinal:!0},feature_done:{name:"done"+ +(new Date),entityType:"feature",process:"scrum",isFinal:!0},request_done:{name:"done"+ +(new Date),entityType:"request",process:"scrum",isFinal:!0}},entityTypes={us:Constants.EntityTypes.USERSTORY,bug:Constants.EntityTypes.BUG,task:Constants.EntityTypes.TASK,feature:Constants.EntityTypes.FEATURE,request:Constants.EntityTypes.REQUEST},practices={planning:{id:Constants.Practices.PLANNING.id},bugTracking:{id:Constants.Practices["BUG TRACKING"].id},requirements:{id:Constants.Practices.REQUIREMENTS.id},helpDesk:{id:Constants.Practices["HELP DESK"].id}},processes={scrum:{name:"scream"+parseInt(Math.random()*1e11),practices:["planning","bugTracking","requirements","helpDesk"]}},projects={p_scrum:{name:"Project Scrum"+parseInt(Math.random()*1e11),process:"scrum"}},tasks={task1:{name:"T1",userStory:"us1",entityState:"task_done",startDate:"06-Jan-2013 00:00",endDate:"10-Jan-2013 00:00"}},userStories={us1:{name:"US1",entityType:"us",project:"p_scrum",entityState:"us_done",startDate:"01-Jan-2013 00:00",endDate:"10-Jan-2013 00:00"}},bugs={bug1:{name:"B1",entityType:"bug",project:"p_scrum",entityState:"bug_done",startDate:"08-Jan-2013 00:00",endDate:"10-Jan-2013 00:00"}},features={feature1:{name:"F1",entityType:"feature",project:"p_scrum",entityState:"feature_done",startDate:"01-Jan-2013 00:00",endDate:"15-Jan-2013 00:00"}},requests={request1:{name:"R1",entityType:"request",project:"p_scrum",entityState:"request_done",startDate:"06-Jan-2013 00:00",endDate:"08-Jan-2013 00:00"}},fixtures={practices:practices,entityTypes:entityTypes,processes:processes,projects:projects,entityStates:entityStates,userStories:userStories,bugs:bugs,tasks:tasks,features:features,requests:requests};test.set("fixtures",fixtures),next()}),testKit.registerSetup("component.initialize",function(test,next){var testData=test.get("data"),componentBus=test.get("componentBus"),configurator=test.get("configuratorInstance");configurator.getApplicationContextService().getApplicationContext({projectIds:[testData.project.p_scrum.id],teamIds:[]},{success:function(context){var acid=context.acid;sinon.stub(configurator.getAppStateStore(),"get",function(command){command.callback({acid:acid})}),ajaxSpied||(ajaxSpied=sinon.spy($,"ajax")),configurator.getRestStorage().data("settings","processControlChart",{userData:{scale:"cycleTime",entities:JSON.stringify(["userstory","bug"]),filter:"?EndDate > Today - 180(days)"},scope:"Public"}).done(function(data){ajaxSpied.reset(),test.set("ajaxSpy",ajaxSpied),componentBus.initialize({context:{configurator:configurator}}),next()})}})});var testcase={name:"process control chart"},ProcessControlChart=function($element){this.settings=helper.Settings($element)},Reports=function($element){this.isrendered=function(){return $element.length==1},this["Process Control Chart"]=new ProcessControlChart($element)};return testcase["should render process control chart settings"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){var report=(new Reports(renderData.element))["Process Control Chart"],settings=report.settings;test.ok(settings.isrendered(),"Render settings"),test.same(settings.yAxisButtonNames(),["Lead Time","Cycle Time"],"Lead Time, Cycle Time buttons rendered."),test.same(settings.entityButtonNames(),["Feature","User Story","Task","Bug","Request"],"Entity selector buttons rendered."),test.ok(settings.filterRendered(),"Filter input is rendered"),test.ok(settings.filterHelpRendered(),"Filter help button is rendered"),test.done()}})}),testcase["autocomplete should work in process control chart settings"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){var report=(new Reports(renderData.element))["Process Control Chart"],settings=report.settings;test.ok(settings.filterAutocomplete(),"Autocomplete is attached to filter"),settings.whenAutocompleteOpen(function(){test.ok(settings.filterSuggestions().length>0,"Suggestions are rendered"),test.done()}),settings.enterFilter("?")}})}),testcase["help should work in process control chart settings"]=testKit.test(function(test){var bus=test.get("bus");bus.on("afterRender[0]",function(evt,renderData){var report=(new Reports(renderData.element))["Process Control Chart"],settings=report.settings;test.ok(settings.filterHelpBubble(),"Help is attached to filter"),test.done()})}),testcase["should change process control chart axis to cycle time via settings"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){var settings=(new Reports(renderData.element))["Process Control Chart"].settings;test.get("ajaxSpy").reset();var $leadTime=$(settings.yAxisButtons()[0]);$leadTime.click()},"bus settings.changed[1]":function(evt,data){test.equals(data.mapping.y.label,"Lead Time, days");var postedSettings=JSON.parse(test.get("ajaxSpy").args[0][0].data);test.equals(JSON.parse(postedSettings.userData.scale),"leadTime","Axis changed to Lead Time"),test.done()}})}),testcase["should enable feature display via process control chart settings"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){test.get("ajaxSpy").reset();var settings=(new Reports(renderData.element))["Process Control Chart"].settings,featureBtn=settings.entityButtons().get("feature");featureBtn.check(),featureBtn.change()},"bus settings.changed[1]":function(evt,data){var entities=data.parameters.definition.cells.items.map(function(item){return item.id});test.same(entities,["feature","userstory","bug"],"Feature is enabled for display"),test.done()}})}),testcase["should store settings"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){test.get("ajaxSpy").reset();var settings=(new Reports(renderData.element))["Process Control Chart"].settings,featureBtn=settings.entityButtons().get("feature");featureBtn.check(),featureBtn.change()},"bus settings.changed[1]":function(evt,data){var postedSettings=JSON.parse(test.get("ajaxSpy").args[0][0].data),postedEntities=JSON.parse(JSON.parse(postedSettings.userData.entities));test.same(postedEntities,["feature","userstory","bug"],"Feature is enabled for display"),test.done()}})}),testcase["should render process control chart scatterplot"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0] + data.ready[0]":function(evt,renderData){var settings=(new Reports(renderData.element))["Process Control Chart"].settings;settings.entityButtons().get("feature").check(),settings.entityButtons().get("task").check(),settings.entityButtons().get("request").check(),settings.entityButtons().get("userStory").check(),settings.entityButtons().get("bug").check(),settings.entityButtons().get("bug").change()},"bus plot.afterRender[1]":function(evt,plot){var circles=$(plot.placeholder).find("circle");test.equals(circles.length,5,"Circles were rendered"),test.done()}})}),testcase["should render process control plot"]=testKit.test(function(test){testKit.flow(test,{"bus plot.afterRender[0]":function(evt,plot){var $element=$(plot.placeholder),axes=$element.find("g.axis");test.equals(axes.length,2,"2 axes rendered");var xAxis=$element.find("._x");test.ok(xAxis.find("line.tick").length>0,"x axis ticks rendered"),test.ok(xAxis.find(".axisLabel text").length>0,"x axis labels rendered"),test.equals(xAxis.find(".axisTitle").text(),"End Date","x axis title rendered");var yAxis=$element.find("._y");test.ok(yAxis.find("line.tick").length>0,"y axis ticks rendered"),test.ok(yAxis.find(".axisLabel text").length>0,"y axis labels rendered"),test.equals(yAxis.find(".axisTitle").text(),"Cycle Time, days","y axis title rendered"),test.done()}})}),testcase["should render median and limits"]=testKit.test(function(test){testKit.flow(test,{"bus plot.afterRender[0]":function(evt,plot){var $element=$(plot.placeholder),limits=$element.find("g.limits line");test.equals(limits.length,6,"all limits rendered");var labels=$element.find("g.limits text.limitLabel");test.equals(labels.length,6,"all labels rendered"),test.done()}})}),testcase})