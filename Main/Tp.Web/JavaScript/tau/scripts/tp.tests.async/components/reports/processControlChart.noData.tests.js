define(["jQuery","Underscore","libs/d3/d3","tests.async/testkit/testkit.component","tp/reports/processControl/component.report","tests/common/remoteConstants","app.path","tp.tests.async/components/reports/chart.helper","tp/reports/service.chart.size"],function($,_,d3,TestKit,Component,Constants,path,helper,ServiceChartSize){function selectText($scope){return $scope.map(function(){return $(this).text()})}var testKit=new TestKit(Component);testKit.registerSetup("fixtures",function(test,next){var entityStates={us_done:{name:"done"+ +(new Date),entityType:"us",process:"scrum",isFinal:!0},bug_done:{name:"done"+ +(new Date),entityType:"bug",process:"scrum",isFinal:!0},task_done:{name:"done"+ +(new Date),entityType:"task",process:"scrum",isFinal:!0},feature_done:{name:"done"+ +(new Date),entityType:"feature",process:"scrum",isFinal:!0},request_done:{name:"done"+ +(new Date),entityType:"request",process:"scrum",isFinal:!0}},entityTypes={us:Constants.EntityTypes.USERSTORY,bug:Constants.EntityTypes.BUG,task:Constants.EntityTypes.TASK,feature:Constants.EntityTypes.FEATURE,request:Constants.EntityTypes.REQUEST},practices={planning:{id:Constants.Practices.PLANNING.id},bugTracking:{id:Constants.Practices["BUG TRACKING"].id},requirements:{id:Constants.Practices.REQUIREMENTS.id},helpDesk:{id:Constants.Practices["HELP DESK"].id}},processes={scrum:{name:"scream"+parseInt(Math.random()*1e11),practices:["planning","bugTracking","requirements","helpDesk"]}},projects={p_scrum:{name:"Project Scrum"+parseInt(Math.random()*1e11),process:"scrum"}},fixtures={practices:practices,entityTypes:entityTypes,processes:processes,projects:projects,entityStates:entityStates};test.set("fixtures",fixtures),next()}),testKit.registerSetup("component.initialize",function(test,next){var testData=test.get("data"),componentBus=test.get("componentBus"),configurator=test.get("configuratorInstance");configurator.registerService("chart.size",new ServiceChartSize),configurator.getApplicationContextService().getApplicationContext({projectIds:[testData.project.p_scrum.id],teamIds:[]},{success:function(context){var acid=context.acid;sinon.stub(configurator.getAppStateStore(),"get",function(command){command.callback({acid:acid})}),configurator.getRestStorage().data("settings","processControlChart",{userData:{scale:"cycleTime",entities:JSON.stringify([]),filter:"?EndDate > Today - 180(days)"},scope:"Public"}).done(function(data){componentBus.initialize({context:{configurator:configurator}}),next()})}})});var testcase={name:"process control chart. no data"},ProcessControlChart=function($element){this.settings=helper.Settings($element)},Reports=function($element){this.isrendered=function(){return $element.length==1},this["Process Control Chart"]=new ProcessControlChart($element)};return testcase["should render no data image when there is no data to display"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0] + plot.afterRender[0]":function(evt,renderData,$0){var plot=renderData.element.find(".tau-chart-plot");test.equals(plot.find("svg").css("display"),"none","Chart is hidden"),test.ok(!plot.find("._empty").hasClass("invisible"),"No data screen is shown"),test.done()}})}),testcase["should render no data image after all settings buttons unchecked"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0] + data.ready[0]":function(evt,renderData){var settings=(new Reports(renderData.element))["Process Control Chart"].settings;settings.entityButtons().get("feature").check(),settings.entityButtons().get("feature").change()},"bus afterRender[0] + plot.afterRender[1]":function(evt,renderData){var settings=(new Reports(renderData.element))["Process Control Chart"].settings;settings.entityButtons().get("feature").check(),settings.entityButtons().get("feature").change()},"bus afterRender[0] + plot.afterRender[2]":function(evt,renderData){var plot=renderData.element.find(".tau-chart-plot");test.equals(plot.find("svg").css("display"),"none","Chart is hidden"),test.ok(!plot.find("._empty").hasClass("invisible"),"No data screen is shown"),test.done()}})}),testcase})