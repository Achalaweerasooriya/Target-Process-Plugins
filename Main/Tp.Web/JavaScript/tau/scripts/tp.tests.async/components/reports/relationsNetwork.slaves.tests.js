define(["jQuery","tests.async/testkit/testkit.component","tp/reports/relationsNetwork/component.report","tests/common/remoteConstants","libs/d3/d3","tp/date.utils","tp/reports/service.chart.size"],function($,TestKit,Component,Constants,d3,du,ServiceChartSize){var testKit=new TestKit(Component);testKit.registerSetup("fixtures",function(test,next){var roles={developer:Constants.Roles.DEVELOPER,support:Constants.Roles["SUPPORT PERSON"]},entityTypes={us:Constants.EntityTypes.USERSTORY,bug:Constants.EntityTypes.BUG,task:Constants.EntityTypes.TASK,feature:Constants.EntityTypes.FEATURE,request:Constants.EntityTypes.REQUEST},practices={planning:{id:Constants.Practices.PLANNING.id},bugTracking:{id:Constants.Practices["BUG TRACKING"].id},iterations:{id:Constants.Practices.ITERATIONS.id},requirements:{id:Constants.Practices.REQUIREMENTS.id},helpDesk:{id:Constants.Practices["HELP DESK"].id},testCases:{id:Constants.Practices["TEST CASES"].id}},processes={scrum:{name:"scream"+parseInt(Math.random()*1e11),practices:["planning","bugTracking","iterations","requirements","helpDesk","testCases"]}},relationTypes={blocker:{id:Constants.RelationTypes.BLOCKER.id,name:"blocker"},dependency:{id:Constants.RelationTypes.DEPENDENCY.id,name:"dependency"},relation:{id:Constants.RelationTypes.RELATION.id,name:"relation"}},users={u1:{firstName:"John",lastName:"Smith",email:"js"+parseInt(Math.random()*1e11)+"@fakemail.com",login:"js.js"+parseInt(Math.random()*1e11),password:"123456",role:"developer",isActive:!0}},projectMembers={pm1:{role:"developer",user:"u1"}},projects={project1:{name:"Project with relations between all types of entities #"+parseInt(Math.random()*1e11),process:"scrum",projectMembers:["pm1"]}},assignments={asgn1:{generalUser:"u1",role:"support"},asgn2:{generalUser:"u1",role:"developer"},asgn3:{generalUser:"u1",role:"developer"},asgn4:{generalUser:"u1",role:"developer"},asgn5:{generalUser:"u1",role:"support"}},releases={release1:{name:"R#1",startDate:"/Date(1292002100000+0300)/",endDate:"/Date(1294002100000+0300)/",project:"project1"}},iterations={iteration1:{name:"I#1",release:"release1",startDate:du.toTimestamp(du.addDays(new Date,-7)),endDate:du.toTimestamp(du.addDays(new Date,7))}},features={f1:{name:"F1",entityType:"feature",assignments:["asgn1"],project:"project1"}},userStories={us0:{name:"Root",entityType:"us",project:"project1"},us1:{name:"US1",entityType:"us",assignments:["asgn2"],project:"project1"}},tasks={t1:{name:"T1",entityType:"task",assignments:["asgn3"],userStory:"us1"}},bugs={b1:{name:"B1",entityType:"bug",assignments:["asgn4"],project:"project1"}},requests={r1:{name:"R1",entityType:"request",assignments:["asgn5"],project:"project1"}},testCases={tc1:{name:"TC1",project:"project1",steps:"Kill yourself",success:"Go to hell"}},impediments={i1:{name:"I1",project:"project1"}},teams={team1:{name:"T1"+ +(new Date)}},relations={rl1:{master:"us0",slave:"f1",relationType:"relation"},rl2:{master:"us0",slave:"us1",relationType:"relation"},rl3:{master:"us0",slave:"t1",relationType:"relation"},rl4:{master:"us0",slave:"b1",relationType:"relation"},rl5:{master:"us0",slave:"r1",relationType:"relation"},rl6:{master:"us0",slave:"tc1",relationType:"relation"},rl7:{master:"i1",slave:"us0",relationType:"blocker"},rl8:{master:"us0",slave:"team1",relationType:"relation"},rl9:{master:"us0",slave:"project1",relationType:"relation"}},fixtures={practices:practices,entityTypes:entityTypes,processes:processes,relationTypes:relationTypes,roles:roles,users:users,projects:projects,projectMembers:projectMembers,releases:releases,iterations:iterations,features:features,userStories:userStories,tasks:tasks,bugs:bugs,requests:requests,testCases:testCases,impediments:impediments,teams:teams,assignments:assignments,relations:relations};test.set("fixtures",fixtures),next()}),testKit.registerSetup("component.initialize",function(test,next){var testData=test.get("data"),componentBus=test.get("componentBus"),configurator=test.get("configuratorInstance");configurator.registerService("chart.size",new ServiceChartSize),configurator.getApplicationContextService().getApplicationContext({projectIds:[testData.project.project1.id]},{success:function(context){var acid=context.acid;sinon.stub(configurator.getAppStateStore(),"get",function(command){command.callback({acid:acid})}),configurator.getRestStorage().data("settings","relationsNetworkChart",{userData:{entities:JSON.stringify(["userstory"]),filter:"Root"},scope:"Public"}).done(function(data){componentBus.initialize({context:{configurator:configurator}}),next()})}})});var testcase={name:"relations network: all types of slave cards"};return testcase["should render all slaves cards correctly"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0] + plot.afterRender":function(evt,data){test.equals(data.element.find(".zoom-level-3 .tau-feature").length,1,"1 feature card of 3rd zoom level rendered"),test.equals(data.element.find(".zoom-level-3 .tau-userstory").length,1,"1 user story card of 3rd zoom level rendered"),test.equals(data.element.find(".zoom-level-3 .tau-bug").length,1,"1 bug card of 3rd zoom level rendered"),test.equals(data.element.find(".zoom-level-3 .tau-task").length,1,"1 task card of 3rd zoom level rendered"),test.equals(data.element.find(".zoom-level-3 .tau-request").length,1,"1 request card of 3rd zoom level rendered"),test.equals(data.element.find(".zoom-level-3 .tau-testcase").length,1,"1 test case card of 3rd zoom level rendered"),test.equals(data.element.find(".zoom-level-3 .tau-impediment").length,1,"1 impediment card of 3rd zoom level rendered"),test.equals(data.element.find(".zoom-level-3 .tau-team").length,1,"1 team card of 3rd zoom level rendered"),test.equals(data.element.find(".zoom-level-3 .tau-project").length,1,"1 project card of 3rd zoom level rendered"),test.done()}})}),testcase["should render avatars on small cards"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0] + plot.afterRender":function(evt,data){test.equals(data.element.find(".tau-feature .tau-avatar img").length,1,"avatar rendered on feature card."),test.equals(data.element.find(".tau-userstory .tau-avatar img").length,1,"avatar rendered on user story card."),test.equals(data.element.find(".tau-task .tau-avatar img").length,1,"avatar rendered on task card."),test.equals(data.element.find(".tau-bug .tau-avatar img").length,1,"avatar rendered on bug card."),test.equals(data.element.find(".tau-impediment .tau-avatar img").length,1,"avatar rendered on impediment card."),test.done()}})}),testcase})