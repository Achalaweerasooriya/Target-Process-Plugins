define(["jQuery","tests.async/testkit/testkit.component","tp/reports/burnDown/component.report","tests/common/remoteConstants","app.path","tests/common/testData.Generator","tp/date.utils","tp.tests.async/components/reports/burnDown.helper","tau/storage/api"],function($,TestKit,Component,Constants,path,TestDataGenerator,du,helper,Api){var testKit=new TestKit(Component);testKit.registerSetup("fixtures",function(test,next){var entityStates={us_done:{name:"done"+ +(new Date),entityType:"us",process:"scrum",isFinal:!0},bug_done:{name:"done"+ +(new Date),entityType:"bug",process:"scrum",isFinal:!0},task_done:{name:"done"+ +(new Date),entityType:"task",process:"scrum",isFinal:!0},feature_done:{name:"done"+ +(new Date),entityType:"feature",process:"scrum",isFinal:!0},request_done:{name:"done"+ +(new Date),entityType:"request",process:"scrum",isFinal:!0}},entityTypes={us:Constants.EntityTypes.USERSTORY,bug:Constants.EntityTypes.BUG,task:Constants.EntityTypes.TASK,feature:Constants.EntityTypes.FEATURE,request:Constants.EntityTypes.REQUEST},practices={planning:{id:Constants.Practices.PLANNING.id},iterations:{id:Constants.Practices.ITERATIONS.id},timeTracking:{id:Constants.Practices["TIME TRACKING"].id}},processes={scrum:{name:"scream"+parseInt(Math.random()*1e11),practices:["planning","iterations","timeTracking"]}},projects={project1:{name:"Project #1"+parseInt(Math.random()*1e11),process:"scrum"}},fixtures={practices:practices,entityTypes:entityTypes,processes:processes,projects:projects,entityStates:entityStates};test.set("fixtures",fixtures),next()}),testKit.registerSetup("component.initialize",function(test,next){var testData=test.get("data"),componentBus=test.get("componentBus"),configurator=test.get("configuratorInstance");configurator.getApplicationContextService().getApplicationContext({projectIds:["null",testData.project.project1.id],teamIds:["null"]},{success:function(context){var acid=context.acid;sinon.stub(configurator.getAppStateStore(),"get",function(command){command.callback({acid:acid})}),componentBus.initialize({context:{configurator:configurator}}),next()}})});var testcase={name:"burn down: no releases"};return testcase["filter should not be displayed if there are no releases in selected project"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0] + filter.afterRender[0]":function(evt,renderData){var filter=renderData.element.find("#report-filter");test.equals(filter.css("display"),"none","Filter is not shown");var noData=renderData.element.find("._empty");test.equals(noData.find(".first-line").text().trim(),"Not enough data to build this beautiful chart","No data placeholder rendered successfully"),test.equals(noData.find(".second-line").text().trim(),"Add Release or Iteration and complete some user stories","No data placeholder rendered successfully"),test.done()}})}),testcase})