define(["jQuery","tests.async/testkit/testkit.component","tp/reports/relationsNetwork/component.report","tests/common/remoteConstants","libs/d3/d3","tp/date.utils","tp.tests.async/components/reports/chart.helper","tp/reports/service.chart.size"],function($,TestKit,Component,Constants,d3,du,chartHelper,ServiceChartSize){function RelationsNetwork($element){var text=function(){return $(this).text()},d3_click=function(){d3.event={target:this[0]},d3.select(this[0]).on("click").call(this[0]),d3.event=null},d3_drag=function(x,y){d3.event={target:this[0],x:x,y:y,stopPropagation:$.noop,preventDefault:$.noop};var datum=d3.select(this[0]).datum();d3.select(this[0]).on("mousedown.drag").apply(this[0],[datum]),d3.select(window).on("mousemove.drag").apply(this[0],[datum]),d3.select(window).on("mouseup.drag").apply(this[0],[datum]),d3.event=null},_settings=function(){return{onlyWithRelationsCheckbox:function(){return $element.find("#onlyWithRelations")}}};return{settings:$.extend(chartHelper.Settings($element),_settings()),area:function(){return $.extend($element.find("rect.transparent"),{click:d3_click})},card:function(name){return $.extend($element.find(".i-role-name:contains("+name+")").closest(".tau-chart-box"),{drag:d3_drag})},cards:function(){var $cards=$element.find(".tau-card");return{focused:function(){return $cards.filter(".tau-chart-focused").find(".i-role-name").map(text).toArray()}}},links:function(){return{focused:function(){return $element.find(".link.tau-chart-focused")}}}}}function parsePx(val){return parseInt(val.substring(0,val.length-2))}var testKit=new TestKit(Component);testKit.registerSetup("fixtures",function(test,next){var entityStates={us_done:{name:"done"+ +(new Date),entityType:"us",process:"scrum",isFinal:!0},bug_done:{name:"done"+ +(new Date),entityType:"bug",process:"scrum",isFinal:!0},task_done:{name:"done"+ +(new Date),entityType:"task",process:"scrum",isFinal:!0},feature_done:{name:"done"+ +(new Date),entityType:"feature",process:"scrum",isFinal:!0},request_done:{name:"done"+ +(new Date),entityType:"request",process:"scrum",isFinal:!0}},entityTypes={us:Constants.EntityTypes.USERSTORY,bug:Constants.EntityTypes.BUG,task:Constants.EntityTypes.TASK,feature:Constants.EntityTypes.FEATURE,request:Constants.EntityTypes.REQUEST},practices={planning:{id:Constants.Practices.PLANNING.id},bugTracking:{id:Constants.Practices["BUG TRACKING"].id},iterations:{id:Constants.Practices.ITERATIONS.id}},processes={scrum:{name:"scream"+parseInt(Math.random()*1e11),practices:["planning","bugTracking","iterations"]}},relationTypes={blocker:{id:Constants.RelationTypes.BLOCKER.id,name:"blocker"},dependency:{id:Constants.RelationTypes.DEPENDENCY.id,name:"dependency"},relation:{id:Constants.RelationTypes.RELATION.id,name:"relation"}},projects={project1:{name:"Relations Network Test Data Project #"+parseInt(Math.random()*1e11),process:"scrum"}},releases={release1:{name:"Release #1",startDate:"/Date(1292002100000+0300)/",endDate:"/Date(1294002100000+0300)/",project:"project1"}},iterations={iteration1:{name:"Iteration #1",release:"release1",startDate:du.toTimestamp(du.addDays(new Date,-7)),endDate:du.toTimestamp(du.addDays(new Date,7))}},userStories={us1:{name:"US1",entityType:"us",project:"project1",iteration:"iteration1"},us2:{name:"US2",entityType:"us",project:"project1",iteration:"iteration1"}},bugs={bug1:{name:"B1",entityType:"bug",project:"project1",iteration:"iteration1"},bug2:{name:"B2",entityType:"bug",project:"project1",iteration:"iteration1"}},tasks={task1:{name:"T1",entityType:"task",userStory:"us1"},task2:{name:"T2",entityType:"task",userStory:"us1"}},relations={r1:{master:"bug1",slave:"task1",relationType:"blocker"},r2:{master:"bug1",slave:"bug2",relationType:"dependency"},r3:{master:"task1",slave:"bug1",relationType:"relation"},r4:{master:"us1",slave:"us2",relationType:"relation"}},fixtures={practices:practices,entityTypes:entityTypes,processes:processes,entityStates:entityStates,relationTypes:relationTypes,projects:projects,releases:releases,iterations:iterations,userStories:userStories,tasks:tasks,bugs:bugs,relations:relations};test.set("fixtures",fixtures),next()}),testKit.registerSetup("component.initialize",function(test,next){var testData=test.get("data"),componentBus=test.get("componentBus"),configurator=test.get("configuratorInstance");configurator.registerService("chart.size",new ServiceChartSize),configurator.getApplicationContextService().getApplicationContext({projectIds:[testData.project.project1.id]},{success:function(context){var acid=context.acid;sinon.stub(configurator.getAppStateStore(),"get",function(command){command.callback({acid:acid})}),ajaxSpied||(ajaxSpied=sinon.spy($,"ajax")),configurator.getRestStorage().data("settings","relationsNetworkChart",{userData:{entities:JSON.stringify(["userstory","bug"]),filter:"?Iteration is Current",onlyWithRelations:!1},scope:"Public"}).done(function(data){ajaxSpied.reset(),test.set("ajaxSpy",ajaxSpied),componentBus.initialize({context:{configurator:configurator}}),next()})}})}),d3.mouse=function(p){return[d3.event.x,d3.event.y]};var testcase={name:"relations network"};return testcase["should render relations network chart component"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){test.ok(renderData.element.is(".tau-relations-network"),"Relations network chart container component rendered."),test.ok(renderData.element.find(".tau-chart-settings").length,"Settings rendered."),test.ok(renderData.element.find(".tau-chart-plot").length,"Plot rendered."),test.done()}})}),testcase["should initialize plot"]=testKit.test(function(test){testKit.flow(test,{"bus plot.ready":function(evt,plot){test.ok(plot,"Plot is initialized"),test.done()}})}),testcase["should render filtered entities as cards of zoom level 4"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender + plot.afterRender[0]":function(evt,data,plot){test.equals(data.element.find(".zoom-level-4 .tau-card.tau-userstory").length,2,"2 user story cards of 4th zoom level rendered"),test.equals(data.element.find(".zoom-level-4 .tau-card.tau-bug").length,2,"2 bug cards of 4th zoom level rendered"),test.done()}})}),testcase["should render related entities as cards of zoom level 3"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender + plot.afterRender[0]":function(evt,data,plot){test.equals(data.element.find(".zoom-level-3 .tau-card.tau-task").length,1,"1 task card of 3rd zoom level rendered"),test.equals(data.element.find(".zoom-level-3 .tau-card.tau-bug").length,0,"main entity should not be rendered as secondary"),test.done()}})}),testcase["should render relations as arrows"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender + plot.afterRender[0]":function(evt,data,plot){test.equals(data.element.find(".link").length,4,"4 link arrows rendered"),test.equals(data.element.find(".link.blocker").length,1,"1 blocker link rendered"),test.equals(data.element.find(".link.dependency").length,1,"1 dependency link rendered"),test.equals(data.element.find(".link.relation").length,2,"1 relation link rendered"),test.done()}})}),testcase["should focus on related cards on click"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender + plot.afterRender[0]":function(evt,data,plot){var chart=RelationsNetwork(data.element);chart.card("B1").click(),test.same(chart.cards().focused(),["B1","B2","T1"],"focused on B1 and related entities"),test.equals(chart.links().focused().length,3,"focused on 3 links"),chart.card("US1").click(),test.same(chart.cards().focused(),["US1","US2"],"focused on US1 and related entities"),test.equals(chart.links().focused().length,1,"focused on 1 link"),chart.card("US1").click(),chart.area().click(),test.same(chart.cards().focused(),[],"focused on nothing after click on chart empty area"),test.equals(chart.links().focused().length,0,"focused on nothing after click on chart empty area"),chart.card("US1").click(),chart.card("US2").click(),test.same(chart.cards().focused(),[],"focused on nothing after second click on focused card"),test.equals(chart.links().focused().length,0,"focused on nothing after second click on focused card"),test.done()}})}),testcase["should render chart settings"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0] + settings.changed[0]":function(evt,renderData){var settings=(new RelationsNetwork(renderData.element)).settings;test.ok(settings.isrendered(),"Render settings"),test.same(settings.entityButtonNames(),["Feature","User Story","Task","Bug","Request","Test Case","Impediment","Team","Project"],"Entity selector buttons rendered.");var entityButtons=settings.entityButtons();test.ok(entityButtons.get("testcase").element.is(":disabled"),"Test Case is disabled"),test.ok(entityButtons.get("impediment").element.is(":disabled"),"Impediment is disabled"),test.ok(entityButtons.get("team").element.is(":disabled"),"Team is disabled"),test.ok(entityButtons.get("project").element.is(":disabled"),"Project is disabled"),test.ok(settings.filterRendered(),"Filter input is rendered"),test.ok(settings.filterHelpRendered(),"Filter help button is rendered"),test.ok(settings.onlyWithRelationsCheckbox().length,'"Only with relations" checkbox rendered.'),test.done()}})}),testcase["should store settings"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0] + settings.changed[0]":function(evt,renderData){test.get("ajaxSpy").reset();var settings=(new RelationsNetwork(renderData.element)).settings,featureBtn=settings.entityButtons().get("feature");featureBtn.check(),settings.onlyWithRelationsCheckbox().attr("checked",!0),settings.onlyWithRelationsCheckbox().change()},"bus settings.changed[1]":function(evt,data){var postedSettings=JSON.parse(test.get("ajaxSpy").args[1][0].data),postedEntities=JSON.parse(JSON.parse(postedSettings.userData.entities)),postedOnlyWithRelations=JSON.parse(postedSettings.userData.onlyWithRelations);test.same(postedEntities,["feature","userstory","bug"],"Feature is enabled for display"),test.equals(postedOnlyWithRelations,!0,'"Only with relations" checkbox state remembered'),test.done()}})}),testcase['should render cards with no relations by default and hide them when user checked "Only with relations" checkbox']=testKit.test(function(test){testKit.flow(test,{"bus afterRender + plot.afterRender[0]":function(evt,data,plot){var settings=(new RelationsNetwork(data.element)).settings,taskBtn=settings.entityButtons().get("task");taskBtn.check(),taskBtn.change()},"bus afterRender + plot.afterRender[1]":function(evt,data,plot){test.equals(RelationsNetwork(data.element).card("T2").length,1,"Task with no relations is rendered.");var settings=(new RelationsNetwork(data.element)).settings;settings.onlyWithRelationsCheckbox().attr("checked",!0),settings.onlyWithRelationsCheckbox().change()},"bus afterRender + plot.afterRender[2]":function(evt,data,plot){test.equals(RelationsNetwork(data.element).card("T2").length,0,"Task with no relations not rendered."),test.done()}})}),testcase["should not allow to drag the card outside chart borders"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender + plot.afterRender[0]":function(evt,data,plot){var chart=RelationsNetwork(data.element);chart.card("B1").drag(-2e3,-2e3),test.equals(parsePx(chart.card("B1").css("top")),0,"card is not outside the box"),chart.card("B1").drag(2e3,2e3),test.ok(parsePx(chart.card("B1").css("left"))<plot.size.size().width,"card is not outside the box"),test.done()}})}),testcase})