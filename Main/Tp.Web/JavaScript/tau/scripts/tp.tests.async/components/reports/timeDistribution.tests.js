define(["jQuery","tests.async/testkit/testkit.component","tp/reports/timeDistribution/component.report","tests/common/remoteConstants","tp.tests.async/components/reports/chart.helper","tp/date.utils","libs/d3/d3"],function($,TestKit,Component,Constants,helper,du,d3){function Report($element){return{settings:helper.Settings($element)}}var testKit=new TestKit(Component);testKit.registerSetup("fixtures",function(test,next){var entityStates={us_done:{name:"done"+ +(new Date),entityType:"us",process:"scrum",isFinal:!0},bug_done:{name:"done"+ +(new Date),entityType:"bug",process:"scrum",isFinal:!0},task_done:{name:"done"+ +(new Date),entityType:"task",process:"scrum",isFinal:!0},feature_done:{name:"done"+ +(new Date),entityType:"feature",process:"scrum",isFinal:!0},request_done:{name:"done"+ +(new Date),entityType:"request",process:"scrum",isFinal:!0}},entityTypes={us:Constants.EntityTypes.USERSTORY,bug:Constants.EntityTypes.BUG,task:Constants.EntityTypes.TASK,feature:Constants.EntityTypes.FEATURE,request:Constants.EntityTypes.REQUEST},practices={planning:{id:Constants.Practices.PLANNING.id},bugTracking:{id:Constants.Practices["BUG TRACKING"].id}},processes={scrum:{name:"scream"+parseInt(Math.random()*1e11),practices:["planning","bugTracking"]}},projects={project1:{name:"Project #1"+parseInt(Math.random()*1e11),process:"scrum"}},userStories={us1:{name:"US1",entityType:"us",project:"project1",entityState:"us_done",createDate:du.toTimestamp(du.addDays(new Date,-10)),startDate:du.toTimestamp(du.addDays(new Date,-7))}},bugs={bug1:{name:"B1",entityType:"bug",project:"project1",entityState:"bug_done",createDate:du.toTimestamp(du.addDays(new Date,-10)),startDate:du.toTimestamp(du.addDays(new Date,-3))},bug2:{name:"B2",entityType:"bug",project:"project1",entityState:"bug_done",createDate:du.toTimestamp(du.addDays(new Date,-10)),startDate:du.toTimestamp(du.addDays(new Date,-7))}},tasks={task1:{name:"T1",entityType:"task",project:"project1",userStory:"us1",entityState:"task_done",createDate:du.toTimestamp(du.addDays(new Date,-10)),startDate:du.toTimestamp(du.addDays(new Date,-1))}},fixtures={practices:practices,entityTypes:entityTypes,processes:processes,entityStates:entityStates,projects:projects,userStories:userStories,bugs:bugs,tasks:tasks};test.set("fixtures",fixtures),next()}),testKit.registerSetup("component.initialize",function(test,next){var testData=test.get("data"),componentBus=test.get("componentBus"),configurator=test.get("configuratorInstance");configurator.getApplicationContextService().getApplicationContext({projectIds:[testData.project.project1.id]},{success:function(context){var acid=context.acid;sinon.stub(configurator.getAppStateStore(),"get",function(command){command.callback({acid:acid})}),ajaxSpied||(ajaxSpied=sinon.spy($,"ajax")),configurator.getRestStorage().data("settings","timeDistributionChart",{userData:{scale:"cycleTime",entities:JSON.stringify(["userstory","bug"]),filter:"?EndDate > Today - 180(days)"},scope:"Public"}).done(function(data){ajaxSpied.reset(),test.set("ajaxSpy",ajaxSpied),componentBus.initialize({context:{configurator:configurator}}),next()})}})});var testcase={name:"time distribution"};return testcase["should render time distribution chart component"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){test.ok(renderData.element.is(".tau-time-distribution"),"Time distribution chart container component rendered."),test.ok(renderData.element.find(".tau-chart-settings").length,"Settings rendered."),test.ok(renderData.element.find(".tau-chart-plot").length,"Plot rendered."),test.done()}})}),testcase["should initialize plot"]=testKit.test(function(test){testKit.flow(test,{"bus plot.ready":function(evt,plot){test.ok(plot,"Plot is initialized"),test.done()}})}),testcase["should render user story and bug bars"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender + plot.afterRender[0]":function(evt,data,plot){test.ok(data.element.find("rect.userStory").length,"User story bars were rendered."),test.ok(data.element.find("rect.bug").length,"Bug bars were rendered."),test.done()}})}),testcase["should open details on hover"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender + plot.afterRender[0]":function(evt,data,plot){var $bin=data.element.find(".userStory:first").closest("g.day"),d3bin=d3.select($bin[0]);d3bin.on("mouseover").call($bin[0],[d3bin.datum()]);var bubble=data.element.find(".tau-chart-tooltip").data("tauBubble"),$popup=bubble.$popup;test.ok($popup,"tooltip is shown"),test.equals($popup.text(),"7 days100% of all user stories (1 of 1)50% of all bugs (1 of 2)"),test.done()}})}),testcase["should render settings"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){var settings=Report(renderData.element).settings;test.ok(settings.isrendered(),"Render settings"),test.same(settings.yAxisButtonNames(),["Lead Time","Cycle Time"],"Lead Time, Cycle Time buttons rendered."),test.equals(settings.yAxisButton(),"Cycle Time","Cycle Time selected by default."),test.same(settings.entityButtonNames(),["Feature","User Story","Task","Bug","Request"],"Entity selector buttons rendered."),test.ok(settings.filterRendered(),"Filter input is rendered"),test.ok(settings.filterHelpRendered(),"Filter help button is rendered"),test.done()}})}),testcase["should respond to settings change"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){var settings=Report(renderData.element).settings,featureBtn=settings.entityButtons().get("feature");featureBtn.check(),featureBtn.change()},"bus settings.changed[1]":function(evt,data){test.same(["feature","userstory","bug"],helper.select("id").from(data.parameters.definition.cells.items),"User story, Bug and Feature are in definition"),test.done()}})}),testcase["should map data according to settings"]=testKit.test(function(test){testKit.flow(test,{"bus data.ready[0]":function(evt,loadedData){test.same(helper.roundAll(helper.select("y").from(loadedData.data)),[7,3,7],"Cycle time mapped to y property"),test.same(helper.select("fill").from(loadedData.data),["UserStory","Bug","Bug"],"Type mapped to fill property"),test.done()}})}),testcase["should store settings"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){test.get("ajaxSpy").reset();var settings=Report(renderData.element).settings,featureBtn=settings.entityButtons().get("feature");featureBtn.check(),featureBtn.change()},"bus settings.changed[1]":function(evt,data){var postedSettings=JSON.parse(test.get("ajaxSpy").args[0][0].data),postedEntities=JSON.parse(JSON.parse(postedSettings.userData.entities));test.same(postedEntities,["feature","userstory","bug"],"Feature is enabled for display"),test.done()}})}),testcase["should choose between lead time/cycle time via settings"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){var settings=Report(renderData.element).settings;$(settings.yAxisButtons()[0]).click()},"bus data.ready[0]":function(evt,loadedData){test.same(helper.roundAll(helper.select("y").from(loadedData.data)),[10,10,10],"Lead time mapped to y property"),test.done()}})}),testcase["should filter entities"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){var settings=Report(renderData.element).settings;settings.enterFilter("?Name == 'US1'"),settings.applyFilter()},"bus settings.changed[1]":function(evt,data){test.equals(data.parameters.definition.cells.filter,"?Name == 'US1'","Filer applied"),test.done()}})}),testcase["should display axes labels"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender + plot.afterRender[0]":function(evt,data,plot){test.ok(data.element.find("._x .axisLabel .tick").length,"x axis ticks were rendered."),test.equal(data.element.find("._x text.axisLabel.axisTitle").text(),"Cycle Time, days","x axis label were rendered."),test.ok(data.element.find("._x .axisLabel text").length,"x axis labelswere rendered."),test.ok(data.element.find("._y .axisLabel .tick").length,"y axis ticks were rendered."),test.equal(data.element.find("._y text.axisLabel.axisTitle").text(),"% of all entities","y axis label were rendered."),test.ok(data.element.find("._y .axisLabel text").length,"y axis labelswere rendered."),test.done()}})}),testcase["should aggregate data over all pages"]=testKit.test(function(test){testKit.flow(test,{"bus settings.changed[0] + data.ready[0]":function(evt,settings,data){var bus=test.get("componentBus");console.log(settings),settings.parameters.take=1,bus.fire("settings.changed",settings)},"bus data.ready[1]":function(evt,loadedData){test.same(helper.select("fill").from(loadedData.data),["UserStory","Bug","Bug"],"All entities are loaded"),test.done()}})}),testcase["should render max values"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender + plot.afterRender[0]":function(evt,data,plot){test.ok(data.element.find("text.max-val.userStory").length,"User story max value rendered."),test.ok(data.element.find("text.max-val.bug").length,"Bug max value rendered."),test.done()}})}),testcase})