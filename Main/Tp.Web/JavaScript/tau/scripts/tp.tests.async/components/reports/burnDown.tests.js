define(["jQuery","tests.async/testkit/testkit.component","tp/reports/burnDown/component.report","tests/common/remoteConstants","app.path","tests/common/testData.Generator","tp/date.utils","tp.tests.async/components/reports/burnDown.helper"],function($,TestKit,Component,Constants,path,TestDataGenerator,du,helper){function Accordion($header){return{expand:function(){$header.click()},ref:function(index){return $header.next().find("._entity-ref:nth("+(index||0)+")")}}}function DetailsPopup($popup){return{accordion:function(index){return Accordion($popup.find("._collapsible:nth("+(index||0)+")"))}}}var testKit=new TestKit(Component);testKit.registerSetup("fixtures",function(test,next){var entityStates={us_done:{name:"done"+ +(new Date),entityType:"us",process:"scrum",isFinal:!0},bug_done:{name:"done"+ +(new Date),entityType:"bug",process:"scrum",isFinal:!0},task_done:{name:"done"+ +(new Date),entityType:"task",process:"scrum",isFinal:!0},feature_done:{name:"done"+ +(new Date),entityType:"feature",process:"scrum",isFinal:!0},request_done:{name:"done"+ +(new Date),entityType:"request",process:"scrum",isFinal:!0}},entityTypes={us:Constants.EntityTypes.USERSTORY,bug:Constants.EntityTypes.BUG,task:Constants.EntityTypes.TASK,feature:Constants.EntityTypes.FEATURE,request:Constants.EntityTypes.REQUEST},practices={planning:{id:Constants.Practices.PLANNING.id},iterations:{id:Constants.Practices.ITERATIONS.id},timeTracking:{id:Constants.Practices["TIME TRACKING"].id}},processes={scrum:{name:"scream"+parseInt(Math.random()*1e11),practices:["planning","iterations","timeTracking"]}},teams={team1:{name:"TEAM A"+ +(new Date)}},projects={project1:{name:"Project #1"+parseInt(Math.random()*1e11),process:"scrum"},project2:{name:"Project #2"+parseInt(Math.random()*1e11),process:"scrum"}},teamProjects={tp1:{team:"team1",project:"project1"}},releases={release1:{name:"Release #1",isCurrent:!0,startDate:"/Date(1292002100000+0300)/",endDate:"/Date(1294002100000+0300)/",project:"project1"}},iterations={iteration1:{name:"Iteration #1",isCurrent:!1,startDate:"/Date(1292002100000+0300)/",endDate:"/Date(1294002100000+0300)/",release:"release1"},iteration2:{name:"Iteration #2",isCurrent:!0,startDate:du.toTimestamp(du.addDays(new Date,-7)),endDate:du.toTimestamp(du.addDays(new Date,7)),release:"release1"}},userStories={us1:{name:"User Story",iteration:"iteration2",effort:25.11111}},fixtures={practices:practices,entityTypes:entityTypes,processes:processes,teams:teams,projects:projects,teamProjects:teamProjects,releases:releases,iterations:iterations,userStories:userStories,entityStates:entityStates};test.set("fixtures",fixtures),next()}),testKit.registerSetup("component.initialize",function(test,next){var testData=test.get("data"),componentBus=test.get("componentBus"),configurator=test.get("configuratorInstance");configurator.getApplicationContextService().getApplicationContext({projectIds:["null",testData.project.project1.id,testData.project.project2.id],teamIds:["null",testData.team.team1.id]},{success:function(context){var acid=context.acid;sinon.stub(configurator.getAppStateStore(),"get",function(command){command.callback({acid:acid})}),componentBus.initialize({context:{configurator:configurator}}),next()}}),configurator.registerService("navigator",{to:function(url){componentBus.fire("mock.navigate",url)}})});var testcase={name:"burn down"};return testcase["context provider should get selected projects from context"]=testKit.test(function(test){testKit.flow(test,{"bus contextProvider.ready":function(evt,contextProvider){test.equals(contextProvider.getProjectIds().length,2,"2 projects selected"),test.done()}})}),testcase["context provider should get selected teams from context"]=testKit.test(function(test){testKit.flow(test,{"bus contextProvider.ready":function(evt,contextProvider){test.equals(contextProvider.getTeamIds().length,1,"1 team selected"),test.done()}})}),testcase["context provider should get available practices from context"]=testKit.test(function(test){testKit.flow(test,{"bus contextProvider.ready":function(evt,contextProvider){test.equals(contextProvider.isPracticeAvailable("Iterations"),!0,"Iterations available"),test.done()}})}),testcase["should render burn down chart component"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0]":function(evt,renderData){test.ok(renderData.element.is(".tp2-chart"),"Burn Down chart container component rendered.")},"bus plot.afterInit[0]":function(evt,plot){test.ok(plot,"Burn Down chart initialized.")},"bus plot.afterRender[0]":function(evt,plot){test.ok(plot,"Burn Down chart rendered."),test.done()},"bus error":function(evt,error){test.fail(error),test.done()}})}),testcase['if teams selected in context "Teams" option should be available in selector']=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0] + filter.afterRender[0]":function(evt,renderData){var typeSelector=helper.Filter(renderData.element).label(0);typeSelector.value().click();var options=typeSelector.list().find("li").map(function(){return $(this).data("id")});test.same(options.toArray(),["iteration","release","teamiteration"],"all burndown types should be available"),test.done()}})}),testcase['if teams selected in context "Teams" option should be available in selector']=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0] + filter.afterRender[0]":function(evt,renderData){var typeSelector=helper.Filter(renderData.element).label(0);typeSelector.value().click();var options=typeSelector.list().find("li").map(function(){return $(this).data("id")});test.same(options.toArray(),["iteration","release","teamiteration"],"all burndown types should be available"),test.done()}})}),testcase["dropdown value should return empty if disabled"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0] + filter.afterRender[0]":function(evt,renderData){var iterationSelect=helper.Filter(renderData.element).iterationSelect();iterationSelect.dropDown("option","data",[]),test.equals(iterationSelect.dropDown("value"),"","returned empty if disabled"),test.done()}})}),testcase['custom drop down should be expanded on "more..." link click ']=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0] + filter.afterRender[0]":function(evt,renderData){var label=helper.Filter(renderData.element).label(1);label.value().click(),test.equals(label.list().find("._item").length,1,"short list of iterations should be shown"),label.more().click(),test.equals(label.list().find("._item").length,2,"all iterations should be shown"),test.done()}})}),testcase["details should be shown when clicked on day"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0] + plot.afterRender[0]":function(evt,renderData){renderData.element.find("._chart .lineChartPointHover").click()},"bus details.afterRender":function(evt,$popup){test.ok($popup.is(":visible"),"popup with details should be opened"),test.done()}})}),testcase["user story should be opened in the same popup when clicked on details"]=testKit.test(function(test){testKit.flow(test,{"bus afterRender[0] + plot.afterRender[0]":function(evt,renderData){renderData.element.find("._chart .lineChartPointHover").click()},"bus afterInit + details.afterRender":function(evt,data,$popup){var popup=DetailsPopup($popup),accordion=popup.accordion(0);accordion.expand(),test.ok(accordion.ref(0).is(":visible"),"accordion should be expanded."),accordion.ref(0).click()},"bus mock.navigate":function(evt,url){test.ok(/userstory\/\d+/i.test(url),"should navigate to userstory"),test.done()}})}),testcase})