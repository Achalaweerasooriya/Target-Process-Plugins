define(["Underscore","tau/core/class"],function(_,Class){var noop=function(){},StateManager=Class.extend({init:function(config){config=config||{};var requiredParameters=[];config.state||requiredParameters.push("state"),config.service||requiredParameters.push("service");if(requiredParameters.length>0)throw"State manager should be initialized with following parameters: ["+requiredParameters.join(",")+"]";this.subscriptions={},this.cfg=config},get:function(params){var self=this;if(!params.id)throw"StateManager.get operation requires parameter [id]";var command=_.defaults(params,{fields:[],callback:noop}),service=this.cfg.service;return service.get(command),self},set:function(params){var self=this;if(!params.id)throw"StateManager.set operation requires parameter [id]";var command=_.defaults(params,{set:{},callback:noop}),service=this.cfg.service;return service.set(command),self},update:function(newHash){var self=this,prvHash=this.cfg.state,actualParams=[];_(newHash).chain().keys().each(function(paramId){actualParams.push(paramId);var p=prvHash[paramId]||{},n=newHash[paramId];if(_.isString(n)||_.isString(p))return;var prevFields=_(p).keys(),currFields=_(n).keys();_(_.union(prevFields,currFields)).each(function(field){if(!_.isEqual(n[field],p[field])){var prev=p.hasOwnProperty(field)?p[field]:null,curr=n.hasOwnProperty(field)?n[field]:null;self.applyChanges({paramId:paramId,fieldName:field,value:curr,delta:{prev:prev,curr:curr}})}})}),_(prvHash).chain().keys().difference(actualParams).each(function(pastParamId){var p=prvHash[pastParamId];if(_.isString(p))return;_(p).chain().keys().each(function(field){self.applyChanges({paramId:pastParamId,fieldName:field,value:null,delta:{prev:p[field],curr:null}})})}),self.cfg.state=newHash},applyChanges:function(config){var sub=this.subscriptions,callbacksInfo=_.clone((sub[config.paramId]||{})[config.fieldName]||[]);for(var i=0,len=callbacksInfo.length;i<len;i++){var ci=callbacksInfo[i];ci&&!ci.isDeleted&&ci.callback.call(ci.scope,config)}},bind:function(config){var paramId=config.paramId,field=config.fieldName,callback=config.callback,listener=config.listener,subs=this.subscriptions;return subs[paramId]=subs[paramId]||{},subs[paramId][field]=subs[paramId][field]||[],subs[paramId][field].push({callback:callback,scope:listener}),this},unbind:function(listener){var subs=this.subscriptions,keys=_(subs).keys();for(var k=0,kLen=keys.length;k<kLen;k++){var paramId=keys[k],fields=_(subs[paramId]).keys();for(var f=0,fLen=fields.length;f<fLen;f++){var fieldName=fields[f],callbacks=subs[paramId][fieldName];for(var c=callbacks.length-1;c>=0;c--)callbacks[c].scope===listener&&(callbacks[c].isDeleted=!0,callbacks.splice(c,1));subs[paramId][fieldName].length===0&&delete subs[paramId][fieldName]}_(subs[paramId]).keys()===0&&delete subs[paramId]}}});return StateManager})