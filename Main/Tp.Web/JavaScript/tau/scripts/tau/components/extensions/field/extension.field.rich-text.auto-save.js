define(["Underscore","jQuery","tau/components/extensions/component.extension.base"],function(_,$,ExtensionBase){return ExtensionBase.extend({category:"edit","bus editor.ready":function(evt,editor){var self=this;this.enableAutoSave();if(self.config.disableAutoSave)return;var fireAutoSave=function(){self.fire("auto.save",editor)},dataChangeEvents=["afterCommandExec","key","insertElement","paste"],onChangeData=function(){self.fire("something.changed"),self.timeoutId&&clearTimeout(self.timeoutId),self.timeoutId=setTimeout(fireAutoSave,1e3)};_.each(dataChangeEvents,function(name){editor.api.ckeInstance.on(name,onChangeData)}),self.fire("status.element",$(".ui-richeditor__controls__status_message",editor.api.$editor))},showStatus:function(message){this.fire("set.auto.save.status",message)},"bus auto.save":function(evt,editor){if(this.disabled)return;if(editor.api.ckeInstance.getData()==="")return;editor.api.performSave()!==null&&(this.disableAutoSave(),this.showStatus("Saving..."))},"bus auto.save + afterSave":function(){this.disabled=!1,this.showStatus("All changes saved"),this.fire("reset.status.on.change")},enableAutoSave:function(){this.disabled=!1},"bus start.editing":function(){this.enableAutoSave(),this.showStatus("")},"bus status.element:last > reset.status.on.change > something.changed":function(evt,$status){$status.text("")},"bus status.element:last + set.auto.save.status":function(evt,$status,message){$status.text(message)},"bus allow.close.editor":function(){this.disableAutoSave()},disableAutoSave:function(){this.disabled=!0,clearTimeout(this.timeoutId||0)},"bus stop.editing":function(){this.disableAutoSave()},"bus editor.ready + destroy":function(){this.disableAutoSave()}})})