define(["Underscore","jQuery","tau/components/extensions/component.extension.base","tau/utils/utils.date","tau/ui/behaviour/date/ui.behaviour.dateEditor"],function(_,$,ExtensionBase,dateUtils){return ExtensionBase.extend({category:"edit",init:function(){this._super.apply(this,arguments),this.onClickProxy=$.proxy(this.onClickHandler,this)},"bus permissionsReady+afterRender+dataBind":function(eventData){var self=this,$element=this.element=eventData.afterRender.data.element,permissions=this.permissions=eventData.permissionsReady.data,data=this.date=eventData.dataBind.data,format=this.config.format;if(permissions.editable){this.element.bind("click",this.onClickProxy);var $widget=this.$widget=$element.find(".property"),widgetName=null;format=="datetime"?widgetName="datetimepicker":widgetName="datepicker",$.datepicker.parseDate=function(format,value,settings){return dateUtils.parse(value)},$.datepicker.formatDate=function(format,date,settings){return dateUtils.formatAs(date,format)},$widget.dateEditor({keyboardManager:this.config.context.configurator.getKeyBoardManager(),dateFormat:dateUtils.getFormatData().date.short,widgetName:widgetName,beforeChange:function(data){self.fire("validateDate",data)},onSave:function(date){var $set={};$set[self.config.propertyName]=date;if(self.trimString(date)!=self.trimString(data.text)){var savedData={$set:$set};savedData.$include=[self.config.propertyName],self.bus.fire("save",savedData)}else self.fire("resetValidationErrors")}})}},trimString:function(value){return _.trim(value||"")},showEditor:function(){this.$widget.dateEditor("activate"),this.$widget.focus()},"bus edit":function(){this.permissions.editable&&this.showEditor()},onClickHandler:function(){this.showEditor()},removeHandlers:function(){this.element&&this.element.unbind("click",this.onClickProxy)},removeWidget:function(){this.$widget&&this.$widget.dateEditor("destroy")},destroy:function(){this.removeHandlers(),this.removeWidget(),this._super.apply(this,arguments)}})})