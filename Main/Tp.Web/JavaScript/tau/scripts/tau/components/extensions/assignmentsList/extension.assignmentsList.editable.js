define(["Underscore","jQuery","tau/core/model-base"],function(_,$,ModelEdiableBase){return ModelEdiableBase.extend({category:"edit",init:function(){var self=this;self._super.apply(self,arguments),self.animations=[]},"bus dataBind":function(evtArgs){this.bindedData=evtArgs.data},"bus afterRender":function(evtArgs){this.refresh=this._innerRefresh,this.$el=evtArgs.data.element,this.startAnimations()},"bus permissionsReady+afterRender":function(evtArgs){var permissions=evtArgs.permissionsReady.data;if(permissions.editable){var self=this;self.$el.removeClass("assignments-table-readonly"),self.$el.find(".group .effort").editableText({mask:/^\d*\.?\d*$/,restoreText:!0,onSave:function(text){var data=this.$element.parents(".group").tmplItem().data,currEffort=self.normalizeEffort(data.roleEffort.effort),newEffort=self.normalizeEffort(text);if(currEffort===newEffort)return this.restoreInitialText(),!1;var saveCmd={typeName:"roleEffort",$include:["id"],id:data.roleEffort.id,$set:{effort:newEffort}};self.bus.fire("save",saveCmd)},onEditStart:function(){this.$element.data("points",this.$element.find("span").detach())},onEditEnd:function(){this.$element.append(this.$element.data("points"))}})}},"bus beforeSaveAssignment":function(evtArgs){var self=this,assignmentId=evtArgs.data.assignmentId,selector,$user;assignmentId&&(selector=this.getAssignmentSelector(assignmentId),$user=this.$el.find(selector),$user&&(this.fire("markElementToBeUpdated",{element:$user}),this.addAnimation(function(){self.fire("updateElement",{element:self.$el.find(selector)})})))},"bus beforeStateChanged":function(evtArgs){var self=this;self.fire("markElementToBeUpdated",{element:this.$el}),self.addAnimation(function(){self.fire("updateElement",{element:self.$el})})},"bus dataDidUpdated":function(){this.refresh()},"bus avatarChanged":function(){this.refresh()},"bus afterSaveRoleEffort":function(evtArgs){var roleEffortId=evtArgs.data.roleEffortId,self=this;self.addAnimation(function(){var $roleEffort=self.findRoleEffortElementByRoleEffortId(roleEffortId);self.fire("updateElement",{element:$roleEffort}),self.fire("updateElement",{element:self.$el.find(".total-row .effort-cell span")})}),this.refresh()},"bus afterAssignmentSaved":function(){this.refresh()},"bus afterAssignmentRemoved":function(){this.refresh()},"bus afterStateChanged":function(evtArgs){this.refresh()},"bus afterAssignmentAdded":function(evtArgs){this.refresh()},"bus beforeAddAssignment":function(evtArgs){var data=evtArgs.data,self=this,assignmentId=self.generateAssignmentIdForNewAssignment(data),dataToBind={name:"",role:{},assignmentId:assignmentId};$.tmpl("user",dataToBind).appendTo(self.$el.find(".group[roleId="+data.role.id+"]"));var userSelector=self.getUserSelector({roleId:data.role.id,id:data.generalUser.id});self.addAnimation(function(){self.fire("updateElement",{element:self.$el.find(userSelector)})})},"bus beforeRemoveAssignment":function(evtArgs){var assignmentId=evtArgs.assignmentId,$user=this.$el.find(this.getAssignmentSelector(assignmentId));this.fire("markElementToBeDeleted",{element:$user})},"bus beforeSaveRoleEffort":function(command){var cmd=command.data,roleEffortId=cmd.roleEffortId,$roleEffort=this.findRoleEffortElementByRoleEffortId(roleEffortId);this.fire("markElementToBeUpdated",{element:$roleEffort})},getUserSelector:function(userData){return".group[roleId="+userData.roleId+"] .user[userId="+userData.id+"]"},getAssignmentSelector:function(assignmentId){var self=this,selector=".user",$users=self.$el.find(selector),$user;return $users.each(function(i){var $us=$users.eq(i);if($us.tmplItem().data.assignmentId==assignmentId)return $user=$us,selector+=":eq("+i+")",!1}),selector},generateAssignmentIdForNewAssignment:function(assignment){return[this.config.context.entity.id,assignment.role.id,assignment.generalUser.id].join(",")},findRoleEffortElementByRoleEffortId:function(roleEffortId){var $efforts=this.$el.find(".role-effort .effort"),$element=$();return $efforts.each(function(){var $el=$(this),$group=$el.parents(".group"),data=$group.tmplItem().data;data.roleEffort=data.roleEffort||{};if(data.roleEffort.id===roleEffortId)return $element=$el,!1}),$element},addAnimation:function(animationFunc){this.animations.push(animationFunc)},startAnimations:function(){_.each(this.animations,function(func){func()}),this.animations=[]},_innerRefresh:function(){this.refresh=function(){},this.fire("refresh")},refresh:function(){},normalizeEffort:function(effortVal){return Math.abs(Math.round(parseFloat(effortVal)*100)/100)||0},destroy:function(){delete this.$el,delete this.bindedData,delete this.animations,this._super()}})})