define(["Underscore","jQuery","tau/components/extensions/component.extension.base","tau/components/extensions/testrunner/utils/utils.testrunner.diff","tau/components/extensions/testrunner/utils/utils.testrunner.dump"],function(_,$,ExtensionBase,diff,jsDump){function escapeInnerText(s){return s?(s+="",s.replace(/[\&<>]/g,function(s){switch(s){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";default:return s}})):""}function sourceFromStacktrace(e){if(e.stacktrace)return e.stacktrace.split("\n")[6];if(e.stack)return e.stack.split("\n")[0];!e.sourceURL}window.jsErrors=[],window.notExecutedTests={},window.getNotExecutedTests=function(){return _.values(window.notExecutedTests)},window.onerror=function(errorMessage){window.jsErrors[window.jsErrors.length]=errorMessage};var _assertionOutput=function(a){var message=a.message;message=message?message:_.isString(a.error)?a.error:"";var result=!a.error,expected=a.error?a.error.expected:"",actual=a.error?a.error.actual:"",operator=a.error?a.error.operator:null;message=escapeInnerText(message)||(result?"okay":"failed"),message='<span class="test-message">'+message+"</span>",expected=escapeInnerText(jsDump.parse(expected)),actual=escapeInnerText(jsDump.parse(actual));var output=message;output+="<table>",operator&&(output+='<tr class="test-expected"><th>Expected: </th><td><pre>'+expected+"</pre></td></tr>",actual!=expected&&(output+='<tr class="test-actual"><th>Result: </th><td><pre>'+actual+"</pre></td></tr>",output+='<tr class="test-diff"><th>Diff: </th><td><pre>'+diff(expected,actual)+"</pre></td></tr>"));if(!result){var source=sourceFromStacktrace(a.error);source&&(output+='<tr class="test-source"><th>Source: </th><td><pre>'+escapeInnerText(source)+"</pre></td></tr>")}return output+="</table>",output};return ExtensionBase.extend({"bus afterRender":function(evt){var configurator=this.config.context.configurator;configurator.getTitleManager().setTitle("♒ In Progress"),this.$el=evt.data.element,this.startedAt=(new Date).getTime()},"bus module.start":function(evt){var module=evt.data.module,$module=this.$el.find("#"+module.id);$module.toggleClass("nodeunit-pending",!1),$module.toggleClass("nodeunit-inprogress",!0);var $progressBar=this.$el.find("#nodeunit-banner");$progressBar.toggleClass("nodeunit-pending",!1),$progressBar.toggleClass("nodeunit-inprogress",!0)},"bus test.start":function(evt){var names=evt.data.names,moduleId=evt.data.moduleId,testId=_.underscored(names.join(" ").replace(/[^a-z\d]/gi," ")),filter=names.join(" "),name=names.slice(1).join(" ");window.notExecutedTests[testId]=filter;var $test=$(["<li id="+testId+' role="test">',"<strong>"+name,'<b class="counts"> (','<b class="failed" role="failed">&infin;</b>,','<b class="passed" role="passed">&infin;</b>,','<b class="all" role="all">&infin;</b>',")</b> ",'<b class="all" role="time">&infin;</b> ms',"</strong>",'<a href="?filter='+filter+'">Rerun</a>',"</li>"].join(""));this.$el.find("#"+moduleId).find("[role=tests]").append($test)},"bus test.done":function(evt){var names=evt.data.names,assertions=evt.data.assertions,moduleId=evt.data.moduleId,testId=_.underscored(names.join(" ").replace(/[^a-z\d]/gi," "));delete window.notExecutedTests[testId];var $test=this.$el.find("#"+moduleId).find("#"+testId);$test.find("[role=time]").text(assertions.duration),$test.find("[role=passed]").text(assertions.passes()),$test.find("[role=failed]").text(assertions.failures()),$test.find("[role=all]").text(assertions.length);var $assertions=$(["<ol>","</ol>"].join(""));_.forEach(assertions,function(a){var $li=$("<li></li>"),out=_assertionOutput(a);a.failed()?($li.html(out),$li.addClass("fail"),window.jsErrors.push("failure:"+a.message)):($li.html(a.message||a.method||"no message"),$li.addClass("pass")),$li.appendTo($assertions)}),assertions.failures()||$assertions.hide(),$test.find("strong").click(function(){$assertions.toggle()}),$assertions.appendTo($test)},"bus module.done":function(evt){var module=evt.data.module,assertions=evt.data.assertions,$module=this.$el.find("#"+module.id),failed=!!assertions.failures();$module.toggleClass("nodeunit-inprogress",!1),$module.toggleClass("nodeunit-failed",failed),$module.toggleClass("nodeunit-passed",!failed);var $result=$module.find("[role=result]");$result.find("[role=time]").text(assertions.duration),$result.find("[role=passed]").text(assertions.passes()),$result.find("[role=failed]").text(assertions.failures()),$result.find("[role=all]").text(assertions.length);var $tests=$module.find("[role=test]");$tests.length==0&&$module.hide()},"bus modules.done":function(evt){if(!this.$el)return;var assertions=evt.data.assertions,end=(new Date).getTime(),duration=end-this.startedAt,failures=assertions.failures(),failed=!!failures,$progressBar=this.$el.find("#nodeunit-banner");$progressBar.toggleClass("nodeunit-inprogress",!1),$progressBar.toggleClass("nodeunit-fail",failed),$progressBar.toggleClass("nodeunit-pass",!failed);var title=failed?"✖ Failed":"✔ Passed",configurator=this.config.context.configurator;configurator.getTitleManager().setTitle(title),window.allTestsCompleted=!0;var $result=this.$el.find("[role=result-total]");$result.find("[role=time]").text(assertions.duration),$result.find("[role=passed]").text(assertions.passes()),$result.find("[role=failed]").text(assertions.failures()),$result.find("[role=all]").text(assertions.length)}})})