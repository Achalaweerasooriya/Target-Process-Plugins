define(["require","tau/core/class","Underscore","tau/const/entityType.practices","tau/const/entityType.names","tau/store/services/service.linkedTestPlan"],function(e){var t=e("tau/core/class"),n=e("Underscore"),i=e("tau/const/entityType.practices"),s=e("tau/const/entityType.names"),r=e("tau/store/services/service.linkedTestPlan");return t.extend({CreateType:{empty:"empty",includeChildren:"includeChildren",includeInboundRelations:"includeInboundRelations",includeOutboundRelations:"includeOutboundRelations"},_parentChildTypes:{epic:[s.FEATURE],feature:[s.US,s.BUG],userstory:[s.TASK,s.BUG],task:[],bug:[],request:[],build:[],release:[s.FEATURE,s.US,s.BUG],iteration:[s.US,s.BUG],teamiteration:[s.US,s.BUG]},_entityCollectionNames:{feature:"features",userstory:"userstories",task:"tasks",bug:"bugs"},init:function(e){var t=e.context,i=t.configurator;this._entity=t.entity,this._termResolver=e.termResolver,this._linkedTestPlanService=new r(i.getApplicationPath(),i.getStore(),e.onError),this._childTypes=this._getChildTypesEnsurePractices(e.context,this._entity.entityType.name.toLowerCase()),this._descriptionMap=this._createDescriptionMap(this._childTypes),this.changed=n.Callbacks(),this._getLinkedTestPlanCounts(i.getStore2())},getCreateTypeDescription:function(e){return n.capitalize(this._descriptionMap[e])},createTestPlan:function(e){switch(e){case this.CreateType.empty:return this._linkedTestPlanService.createEmpty(this._entity);case this.CreateType.includeChildren:return this._linkedTestPlanService.createWithChildTestPlans(this._entity,this._parentChildTypes[this._entity.entityType.name.toLowerCase()]);case this.CreateType.includeInboundRelations:return this._linkedTestPlanService.createWithInboundRelationTestPlans(this._entity);case this.CreateType.includeOutboundRelations:return this._linkedTestPlanService.createWithOutboundRelationTestPlans(this._entity);default:throw new Error("Unsupported `createType` of Linked Test Plan")}},canCreateOfType:function(e){return e!==this.CreateType.includeChildren||this._childTypes.length
},_getChildTypesEnsurePractices:function(e,t){return n.filter(this._parentChildTypes[t],function(t){var n=i[t];return!n||e.isPracticeAvailable(n)}.bind(this))},_createDescriptionMap:function(e){var t={},i=this.CreateType,r=this._termResolver.names(s.TEST_PLAN);return t[i.empty]=n.sprintf("No %s",r),t[i.includeChildren]=this._createIncludeChildrenDescription(e,r),t[i.includeInboundRelations]=n.sprintf("%s from the related inbound entities",r),t[i.includeOutboundRelations]=n.sprintf("%s from the related outbound entities",r),t},_createIncludeChildrenDescription:function(e,t){if(!n.isEmpty(e)){var i=n.map(e,this._termResolver.names.bind(this._termResolver)),s=i.pop();return n.sprintf("%s from the related %s",t,i.length?i.join(", ")+" and "+s:s)}},_getLinkedTestPlanCounts:function(e){e.findAll(this._getSpecification()).then(function(e){this.linkedTestPlanCounts=e[0].linkedTestPlanCounts,this._notifyChanged()}.bind(this))},_getSpecification:function(){var e=this._entity.entityType.name.toLowerCase(),t=n.sprintf("%s?where=(id==%d)&select={linkedTestPlanCounts:{%s,                %s:masterRelations.Count(master.linkedtestplan!=null),                %s:slaveRelations.Count(slave.linkedtestplan!=null)}}",e,this._entity.id,this._createChildLinkedTestPlanSpecification(e),this.CreateType.includeInboundRelations,this.CreateType.includeOutboundRelations);return t},_createChildLinkedTestPlanSpecification:function(e){var t=this._parentChildTypes[e];if(!t.length)return n.sprintf("%s:null",this.CreateType.includeChildren);var i=n.reduce(t,function(e,t,i){return i&&e.push("+"),e.push(n.sprintf("%s.count(linkedtestplan!=null)",this._entityCollectionNames[t])),e}.bind(this),[]).join("");return encodeURIComponent(n.sprintf("%s:%s",this.CreateType.includeChildren,i))},_notifyChanged:function(){this.changed.fire()},destroy:function(){this.changed.removeAll()}})});