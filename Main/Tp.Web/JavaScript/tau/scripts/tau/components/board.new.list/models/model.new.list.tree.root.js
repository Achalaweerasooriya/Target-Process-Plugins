define(["jQuery","Underscore","./model.new.list.tree.base","./model.new.list.tree.node","./paging","./hierarchy.meta"],function(e,t,n,a,i,r){return n.extend({init:function(e,t,n,a,i){this._super(e,t,n,a,i),this.countsModel.dataLoaded.add(function(){this.pagingModel.totalCount=this.countsModel.getAllCount(),this.pagingUpdated.fire()},this)},_createPaging:function(){var e=new i,t=this._modelSettings.paging;return e.pageSize=t?t.onPage:50,e},_getNodeConstructor:function(){return a},loadTreeData:function(){return this._loadTreeDataInternal(this.pagingModel.getSkip(),this.pagingModel.getTake()).then(this._updatePagingState.bind(this))},_loadTreeDataInternal:function(e,t){var n={$skip:e,$take:t};return this._executeTreeDataWorkflow(function(e){return e.treeView(n)})},_handleTreeResponse:function(e,t){return this._globalMeta=new r(t),this._super(e,t)},goToPage:function(e){var t=e*this.pagingModel.getTake();return this._loadTreeDataInternal(t,this.pagingModel.getTake()).done(function(){this.pagingModel.setCurrentPage(e),this._updatePagingState()}.bind(this))},goToNextPage:function(){return this.pagingModel.hasNext?this.goToPage(this.pagingModel.getCurrentPage()+1):e.Deferred().resolve()},goToPreviousPage:function(){return this.pagingModel.hasPrev?this.goToPage(this.pagingModel.getCurrentPage()-1):e.Deferred().resolve()},goToLastPage:function(){return this.goToPage(this.countsModel.getPagesCount()-1)},goToFirstPage:function(){return this.goToPage(0)},setPageSize:function(e){this._modelSettings.listSettings.boardSettingsService.set({set:{cellPaging:{onPage:e}},callback:function(){var t=e;this._loadTreeDataInternal(0,t).done(function(){this.pagingModel.pageSize=t,this.pagingModel.setCurrentPage(0),this._updatePagingState()}.bind(this))}.bind(this)})},addOrUpdateCards:function(e,n){t.each(e,function(e){var t=e.card,a=this.hierarchy.findNodeByPath(e.path);if(a&&a.nodes){var i=a.hierarchy.findChildByCardId(t.id);i?n.updateCard(a.nodes,i,t):n.addCard(a,t)}},this)},deleteCards:function(e){t.each(e,function(e){var t=e.card,n=this.hierarchy.findNodeByPath(e.path);
if(n&&n.nodes){var a=n.hierarchy.findChildByCardId(t.id);a&&n.nodes.deleteCard(t)}},this)},deleteDescendantsByCardIdAndType:function(e,n){var a=this.hierarchy.findAllDescendantNodesByCardIdAndType(e,n);t.each(a,function(e){e.parent.nodes.deleteCard(e.card)})},refreshDescendantsByCardIdAndType:function(e,n){var a=this.hierarchy.findAllDescendantNodesByCardIdAndType(e,n);t.each(a,this._refreshNode,this)},_refreshNode:function(e){var n=t.object(t.map(e.card.getCardProperties(),function(t){return[t.propertyName,t.getValue(e.card)]}));e.parent.nodes.cardUpdated.fire({card:e.card,properties:n})}})});