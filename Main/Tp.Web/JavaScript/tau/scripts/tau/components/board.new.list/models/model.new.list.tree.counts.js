define(["jQuery","Underscore","tau/components/board.new.list/models/model.new.list.tree.data","tau/services/service.features"],function(t,e,n,a){return n.extend({init:function(t,e,n){this._super(t,e),this.data=this._getInitialDataValue(),this._countsStrategy=n,this._fullCountsEnabled=(new a).isEnabled("new.list.deep.counts"),this.treeModel.nodeCollectionCreated.add(this._onNodeCollectionCreated.bind(this))},_getInitialDataValue:function(){return{types:[]}},_onNodeCollectionCreated:function(t){var e=t.nodes;e.cardAdded.add(function(t){this._countsStrategy.onCardAdded(this,t)},this),e.cardDeleted.add(function(t){this._countsStrategy.onCardDeleted(this,t)},this)},_loadData:function(t){return this._countsStrategy.loadData(this,t)},getExpansionStateForLoadData:function(){return this.treeModel.getExpandableNodes()},getTypedCountsForTitle:function(){return this._countsStrategy.getTypedCounts(this.data.types)},_bindData:function(t){this._countsStrategy.shouldBindData?this._performBindData(t):this.dataLoaded.fire()},_performBindData:function(t){this._resetCounts();var n=t.dataItem.dataItem.data;n&&e.each(n.types,function(t){var e=this._getTypeCount(t.type);e&&(e.count=t.count)},this),this.dataLoaded.fire(),e.each(t.nodes.items,function(t){var e=this.treeModel.hierarchy.findChildByCardId(t.dataItem.nodeId);e&&this._getDataModelFromNodeModel(e)&&this._getDataModelFromNodeModel(e)._bindData(t)},this)},_initializeCountsIfRequired:function(){if(!this.data.types.length){var t=this._fullCountsEnabled?this.treeModel.hierarchyMetaInfo.countTypes:this.treeModel.hierarchyMetaInfo.cardTypes;this.data.types=e.map(t,function(t){return{type:t.valueType,typeName:t.typeName,count:0}})}},_resetCounts:function(){this.data=this._getInitialDataValue(),this._initializeCountsIfRequired()},increaseCount:function(t){this._initializeCountsIfRequired();var e=this._getTypeCount(t);e&&(e.count+=1,this._countsStrategy.onCountDelta(this,t,!0)),this.dataLoaded.fire()},decreaseCount:function(t){var e=this._getTypeCount(t);
e&&(e.count=Math.max(0,e.count-1),this._countsStrategy.onCountDelta(this,t,!1)),this.dataLoaded.fire()},_getTypeCount:function(t){return e.find(this.data.types,function(e){return e.type.toLowerCase()===t.toLowerCase()})},getAllCount:function(){var t=0;return e.each(this.data.types,function(e){t+=e.count}),t},getPagesCount:function(){return Math.ceil(this.getAllCount()/this.treeModel.pagingModel.getTake())},_getDataModelFromNodeModel:function(t){return t.countsModel},collapse:function(){this.data=this._getInitialDataValue()},updateCounts:function(){this._countsStrategy.updateCounts(this)}})});