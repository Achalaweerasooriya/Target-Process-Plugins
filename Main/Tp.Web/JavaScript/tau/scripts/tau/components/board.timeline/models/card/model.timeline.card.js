define(["Underscore","tau/core/class","tau/components/board.timeline/models/card/model.board.card"],function(t,e,n){var i=n.extend({type:"base",init:function(e,n){if(t.isUndefined(n))throw new Error("dateRangeModel should be defined");this._isDirty=!1,this.onMetricsUpdating=t.Callbacks(),this.onMetricsUpdated=t.Callbacks(),this._dateRangeModel=n,this.id=e.id,this.update(e)},update:function(t){this._isDirty||this._updateCore(t)},_updateCore:function(e){if(e.showActual&&!e.hasActual)throw new Error("Actual inconsistency");if(e.showPlanned&&!e.hasPlanned)throw new Error("Planned inconsistency");if(e.fixedDatePlan&&e.showPlanned)throw new Error("Planned and Fixed inconsistency");if(e.showForecast&&!e.hasForecast)throw new Error("Forecast inconsistency");t.extend(this,this._extractMetrics(e)),this._cardData=e,this._validState=t.clone(e),this._clearCache()},isUnfinished:function(){return this._cardData.hasActual&&this._cardData.inProgress},metrics:function(){return this._extractMetrics(this)},_extractMetrics:function(){return{}},plannedRange:function(){throw new Error("plannedRange should be implemented in derived classes")},plannedDateRange:function(){return this._dateRangeModel.getCorrespondingDateRange(this.plannedRange())},convertPlannedMetrics:function(){throw new Error("convertPlannedMetrics should be implemented in derived classes")},applyEdit:function(){this._isDirty=!0,this._clearCache(),this.onMetricsUpdating.fire(this)},commitEdit:function(){this._isDirty=!1,this.onMetricsUpdated.fire(this)},rollbackEdit:function(){this.update(this._validState),this.onMetricsUpdating.fire(this)},_clearCache:function(){this._effectiveCardPosition=null}});return i});