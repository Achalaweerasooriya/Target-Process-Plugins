define(["Underscore","tau/core/class","tau/store/types.targetprocess"],function(_,Class,Types){var Loader=Class.extend({init:function(config){this.config=_.extend({generateId:!1,setType:!1,copyAdditionalFields:!1,setBackRefs:!1},config),this.schemaProcessor=Types},registerSchema:function(schema){this.schemaProcessor.register(schema)},load:function(data){var result={},collections={},dictionary=this.schemaProcessor.getDictionary(),_fillItem=_.bind(this._fillItem,this),config=this.config;return _.forEach(data,function(sourceCollection,typeName){if(dictionary.hasOwnProperty(typeName)==0)throw new Error('Entity type "'+typeName+'" does not exist');var schema=dictionary[typeName],collection=collections[schema.name]={};_.forEach(sourceCollection,function(sourceItem,key){var processedItem=_fillItem(sourceItem,schema);collection[key]=processedItem})}),_.forEach(collections,function(collection,collectionName){_.forEach(collection,function(item){item._pendingRefs&&(_.forEach(item._pendingRefs,function(pendingRef,name){if(_.isArray(pendingRef))_.forEach(pendingRef,function(pendingFind){var found=pendingFind.find.call(null,collections);config.setBackRefs==1&&!_.isEmpty(pendingFind.backRefKey)&&(found[pendingFind.backRefKey]=item),item[name].push(found)});else{var pendingFind=pendingRef,found=pendingFind.find.call(null,collections);config.setBackRefs==1&&found[pendingFind.backRefKey]&&found[pendingFind.backRefKey].push(item),item[name]=found}}),delete item._pendingRefs)})}),result=collections,result},_fillItem:function(sourceData,schema){var self=this,processedItem={};sourceData=_.isObject(sourceData)?sourceData:{name:sourceData+""},_.forEach(schema.simpleFields,function(fieldName){processedItem[fieldName]=sourceData.hasOwnProperty(fieldName)?_.clone(sourceData[fieldName]):null}),this.config.generateId&&processedItem.hasOwnProperty("id")&&processedItem.id==null&&(processedItem.id=_.uniqueId(1e4)),this.config.setType&&(processedItem.__type=schema.name);if(this.config.copyAdditionalFields){var sourceFields=_.keys(sourceData),additionalFields=_.difference(sourceFields,schema.simpleFields,schema.refs);_.forEach(additionalFields,function(fieldName){processedItem[fieldName]=sourceData[fieldName]?_.clone(sourceData[fieldName]):null})}if(_.size(schema.refs)>0){processedItem._pendingRefs={};var _find=function(allData,collectionName,sourceKey){var collection={};collectionName=="general"||collectionName=="assignable"?(collection=_.extend(collection,allData.feature?allData.feature:{},allData.task?allData.task:{},allData.bug?allData.bug:{},allData.userStory?allData.userStory:{},allData.request?allData.request:{}),collectionName=="general"&&(collection=_.extend(collection,allData.testCase?allData.testCase:{},allData.impediment?allData.impediment:{},allData.team?allData.team:{},allData.project?allData.project:{}))):collection=allData[collectionName];if(collection.hasOwnProperty(sourceKey)==0)throw"Key "+sourceKey+" from collection "+collectionName+" is not found";var _foundItem=collection[sourceKey];return _foundItem};_.forEach(schema.refs,function(refConfig,refName){var refTypeName=refConfig.name,sourceRefData=sourceData[refName]||null;refConfig.list===!0?processedItem[refName]=[]:processedItem[refName]=null;if(!sourceRefData||sourceRefData.length==0)return;if(refConfig.list===!0&&_.isObject(sourceRefData[0])||refConfig.list===!1&&_.isObject(sourceRefData)){var typeName=refTypeName,subFill=function(processedItem,config){return config.generateId&&(processedItem.id=_.uniqueId(1e4)),config.setType&&(processedItem.__type=typeName),processedItem};_.isArray(sourceRefData)?(processedItem[refName]=[],_.forEach(sourceRefData,function(item){processedItem[refName].push(subFill(item,self.config))})):processedItem[refName]=subFill(item,self.config);return}var pendingRef=null;if(refConfig.list===!0)pendingRef=[],_.forEach(sourceRefData,function(sourceRefAlias){var pendingFind={find:function(allData){return _find(allData,refTypeName,sourceRefAlias)},backRefKey:refConfig.relationProperty};pendingRef.push(pendingFind)});else{var pendingFind={find:function(allData){return _find(allData,refTypeName,sourceRefData)},backRefKey:refConfig.relationProperty};pendingRef=pendingFind}processedItem._pendingRefs[refName]=pendingRef})}return processedItem}});return Loader})