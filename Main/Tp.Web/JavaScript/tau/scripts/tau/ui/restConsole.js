define(["Underscore","jQuery","app.path","tau/store/repository","tau/store/services/service.rest","tau/store/store","tau/store/types.targetprocess","libs/jquery/jquery.console","libs/json2"],function(_,$,AppPath,repository,serviceRest,store,tauTypes){function initConsole(commandParser){control=$("#console").console({promptLabel:"tau > ",commandValidate:function(line){return line==""?!1:!0},continuedPromptLabel:"  ",commandHandle:function(line,report){var message=commandParser.parse(line);report(message)},autofocus:!0,animateScroll:!0,promptHistory:!0,welcomeMessage:["Welcome to <b>TargetProccess Rest v.1</b> console","---------------------------------------------------","You can execute rest commands using javascript here","<br/>"].join("<br/>")}),layout(),$(window).resize(layout)}function layout(){$("#console, #console .jquery-console-inner").css({height:$(window).height()-12+"px"})}var control=null;$(function(){var restApi=new serviceRest({appPath:AppPath.get(),path:AppPath.get()+"/api/v1"}),repInstance=new repository({service:restApi}),storeInstance=new store({proxy:repInstance}),commandProcessor={command:{},currentId:0,store:storeInstance,parse:function(line){try{this.currentId++;var message=this._parse(line)||"";if(message==="clear")return;return[{msg:JSON.stringify(this.command)+"<div class='rest-out' id='r"+this.currentId+"'>"+message+"</div>",className:"jquery-console-message-value"}]}catch(ex){return[{msg:"Error:"+ex.message,className:"jquery-console-message-error"}]}},_getRef:function(ref,typesDictionary,typeEntity){var refField={};refField[ref]=[];var refType=typesDictionary[typeEntity.refs[ref].name];return refType.fields.length===1&&_.each(_.keys(refType.refs),function(innerRef){if(innerRef.indexOf("parent")<0&&innerRef.indexOf("general")<0&&innerRef.indexOf("assignable")<0){var referField={};referField[innerRef]=[],refField[ref].push(referField)}}),refField},_appendAllFields:function(){var typesDictionary=tauTypes.getDictionary(),typeEntity=typesDictionary[this.command.type],fields=[],self=this;typeEntity.name!=="context"&&_.each(typeEntity.simpleFields,function(field){fields.push(field)}),_.extend(this.command.config,{fields:fields})},_doRequest:function(){var currentId=this.currentId,date=new Date,result=null,callbacks={success:function(r){var out="<div class='stats'>execution time: "+(new Date-date)/1e3+" ms</div>",count=_.isArray(r.data)?r.data.length:1;out+="<pre class='prettyprint'>"+JSON.stringify(r.data,null,"	")+"</pre>",out+="<div class='stats'>"+count+" entities(s) retrieved</div>",$("#r"+currentId).html(out),control.scrollToBottom(),result=out},failure:function(r){var data=r.data,message=data.responseText.length>1e3?"request failed: "+data.status+" "+data.statusText:data.responseText;$("#r"+currentId).html(message).addClass("jquery-console-message-error").removeClass("rest-out")}};return _.defaults(this.command,{name:"get"}),this.store[this.command.name](this.command.type,this.command.config,callbacks).done(),result},_getHelp:function(arg){var value=null,overview=["types? - display the information about all types","&lt;type&gt;? - display the information about type. For example: story?","","GET command can be formed using following steps: <ul>","<li>  Provide type of entity. For example: story","<li>  Provide id of entity. For example: id:2",'<li>  Configure command fields.For example: fields:["id", "name", { entityState: [] }]','<li>  Use "done" to complete command configuration',"</ul>","resource/id - get entity with all fields for defined resource by id","For example: story/2"].join("<br/>");if(arg.indexOf("types")>=0)value=_.keys(tauTypes.getDictionary());else{var type=tauTypes.findByKeyword(arg.substr(0,arg.length-1));type&&(value=type)}return value?"<pre><code>"+JSON.stringify(value||{},null,"	")+"</code></pre>":overview},_processResourcePath:function(arg){var pathParts=arg.split("\\");pathParts.length===1&&(pathParts=arg.split("/"));if(pathParts.length===1)return null;var type=tauTypes.findByKeyword(pathParts[0]);if(!type)return null;var id=parseInt(pathParts[1]);if(!_.isNumber(id))return null;this.command.type=type.name,_.extend(this.command.config,{id:id});if(pathParts.length>2){var fields=pathParts[2].split(","),resultFields=[];_.each(fields,function(field){if(!type.refs.hasOwnProperty(field)){resultFields.push(field);return}var ref={};ref[field]=[],resultFields.push(ref)}),_.extend(this.command.config,{fields:resultFields})}else this._appendAllFields();return this._doRequest()||"executing request: '"+arg+"'..."},_parse:function(arg){_.defaults(this.command,{name:"get",config:{}});var resourceParts=this._processResourcePath(arg);if(resourceParts)return resourceParts;if(arg[arg.length-1]==="?")return this._getHelp(arg);if(arg.toLowerCase()==="clear")return $(".jquery-console-inner>div").remove(),"clear";if(arg=="done")return this._doRequest()||"executing command...";var type=tauTypes.findByKeyword(arg);if(type){this.command.type=type.name;return}if(arg=="all_fields"&&this.command.type){this._appendAllFields();return}eval("var setting = {"+arg+"}");if(setting.hasOwnProperty("type")||setting.hasOwnProperty("name")){_.extend(this.command,setting);return}_.extend(this.command.config,setting)}};initConsole(commandProcessor)})})