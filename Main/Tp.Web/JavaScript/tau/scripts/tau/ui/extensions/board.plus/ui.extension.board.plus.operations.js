define(["Underscore","jQuery","tau/core/extension.base.stateful","tau/ui/extensions/board.plus/ui.board.plus.domWrapper","tau/ui/extensions/board.plus/ui.extension.board.plus.operations.strategies"],function(_,$,BaseExtension,DomWrapper,OperationsStrategies){var locationNamesMap={card:"Cards",x:"Axis",y:"Axis"},operationNamesMap={added:"Add",updated:"Update",cascade:"Update",deleted:"Remove",notinslice:"Remove"},generalOperationHandler=function(e,domWrapper,operationArgs){var self=this,eventName=_.keys(e)[1].substring("operation.".length);_.defaults(operationArgs,{operation:eventName,options:{}});var method=self._getMethodNameByOperationArgs(operationArgs);eventName==="cascade"&&(operationArgs.options.suspendAnimation=!0),domWrapper[method]({options:operationArgs.options,items:operationArgs.items,callback:self._createCallback(operationArgs,domWrapper)})};return BaseExtension.extend({init:function(){var self=this;self._debounceSelectionReapply=_.debounce(function(){self.fire("selection.reapply",{})},500),this._super.apply(this,arguments)},"bus view.skeleton.built + board.paging.settings + overview.board.ready":function(e,skeleton,pagingSettings){var domWrapper=new DomWrapper(skeleton.element,this.config.context.configurator);domWrapper.getPagingSettings=function(){return pagingSettings},this.fire("domWrapper.ready",domWrapper)},"bus domWrapper.ready:last > view.cell.skeleton.element.beforeUpdate":function(e,domWrapper,update){domWrapper.applyCellPagingUpdate({$cell:update.cell,$cards:$(update.content)})},throwIfChanged:function(seed,newValue,msg){if(newValue!==seed)throw console.log(msg),msg},cometDataAdapter:function(data){var items=data.items,operation="",location="",len=items.length;for(var i=0;i<len;i++){var x=items[i];i===0?(operation=x.modification,location=x.location):(this.throwIfChanged(operation,x.modification,"DEBUG INFO: Multiply operations in comet notification are not supported"),this.throwIfChanged(location,x.location,"DEBUG INFO: Multiply locations in comet notification are not supported"))}return{operation:operation.toLowerCase(),items:items}},"bus domWrapper.ready:last + comet.tick":function(e,domWrapper,cometDataItems){var self=this,d=self.cometDataAdapter(cometDataItems.data);self.fire("operation.execute",d)},"bus operation.execute":function(e){var self=this,d=e.data;self.fire("operation."+d.operation,d)},"bus domWrapper.ready:last + operation.added":generalOperationHandler,"bus domWrapper.ready:last + operation.updated":generalOperationHandler,"bus domWrapper.ready:last + operation.deleted":generalOperationHandler,"bus domWrapper.ready:last + operation.notinslice":generalOperationHandler,"bus domWrapper.ready:last + operation.cascade":generalOperationHandler,"bus configurator.ready:last + domWrapper.ready:last + operation.execute.done":function(e,configurator,domWrapper,d){var self=this,cmd=d.cmd,l=self._getLocation(cmd),o=cmd.operation;OperationsStrategies.applyCompleteHandler(self,configurator,domWrapper,l,o,d)},"bus operation.highlightItems > domWrapper.ready":function(e,items,domWrapper){domWrapper.highlightAxesLines(items)},_createCallback:function(operationArgs,domWrapper){var self=this,isListMode=domWrapper.isListMode();return function(r){var params={cmd:operationArgs,dataItems:r.affectedDataItems,affected$CellsArray:r.$affectedCells};r.hasOwnProperty("cards")&&(params.cards=r.cards),self.notifyUpdatedCells(r.$affectedCells),isListMode&&operationArgs.operation==="deleted"?self._debounceSelectionReapply():self.fire("selection.reapply",{}),self.notifyExecuted(params)}},_getLocation:function(operationArgs){var src=(operationArgs.items[0].location||"card").toLowerCase(),res=src;return src!=="card"&&(res=src.charAt(0)),res},_getMethodNameByOperationArgs:function(operationArgs){var location=this._getLocation(operationArgs),operation=operationArgs.operation;return["apply",locationNamesMap[location],"Batch",operationNamesMap[operation]].join("")},notifyExecuted:function(params){var self=this;self.fire("operation.execute.done",params)},notifyUpdatedCells:function(cells){var self=this,len=cells.length;for(var i=0;i<len;i++){var $cell=cells[i];self.fire("view.cell.skeleton.updated",{element:$cell})}},"bus operation.execute.done":function(e,params){var self=this,operation=params.cmd.operation,location=self._getLocation(params.cmd);_.contains(["updated","added","cascade"],operation)&&location==="card"&&_.each(params.cards,function($card){var d=$card.data();self.fire("view.card.skeleton.built",{element:$card,data:{id:d.id,type:d.type}})})}})})