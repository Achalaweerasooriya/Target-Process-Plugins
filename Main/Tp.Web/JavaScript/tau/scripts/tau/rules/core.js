define(["Underscore","tau/core/class","tau/rules/auto-include-beforeSave"],function(_,Class,autoInclude){return Class.extend({init:function(config){var self=this;self.store=config.store||{},config.rulesImpl=config.rulesImpl||{},_.extend(self,autoInclude),_.extend(self,{name:"rules engine"}),_(config.rulesImpl).each(function(ruleImpl){_.extend(self,ruleImpl)}),self.register(config.rules||[])},register:function(rules){var self=this;_.isArray(rules)||(rules=[rules]),_(rules).each(function(rule){_.defaults(rule,{name:_(autoInclude).keys()[0],fields:[],changes:[]});if(!rule.hasOwnProperty("type"))throw"type should be configured for rule";if(rule.fields.length===0)return;_.each(rule.changes,function(change){var fnProcess=function(evt){self[rule.name](evt,rule)},parts=rule.name.split(" ");self.store.on({eventName:parts[parts.length-1],type:rule.type,listener:self,hasChanges:[change]},fnProcess)})})},registerRule:function(rule){var self=this;_.defaults(rule,{fields:[],changes:[]});if(!rule.hasOwnProperty("name"))throw'"name" field should be configured for rule';if(!rule.hasOwnProperty("type"))throw'"type" field should be configured for rule';if(!self.hasOwnProperty(rule.name))throw"unknown rule name ["+rule.name+"]";self[rule.name].call(self,rule)},destroy:function(){var store=this.store;delete this.store,store.unbind(this)}})})