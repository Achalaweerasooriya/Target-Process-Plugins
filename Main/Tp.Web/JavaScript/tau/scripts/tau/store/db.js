define(["Underscore","tau/core/class","tau/store/header","tau/core/comparer"],function(_,Class,tau,comparer){return Class.extend({init:function(config){this.__data={},this.__types=config.types||{}},_getTypeHolder:function(dataHolder,objType){var typeDictionary=dataHolder[objType]||{};return dataHolder.hasOwnProperty(objType)||(dataHolder[objType]=typeDictionary),typeDictionary},_getTypeDictionary:function(objType){return this._getTypeHolder(this.__data,objType)},getPersistedNode:function(id,type){var self=this,recordSet=self.__data[type];if(!recordSet)return null;if(!id)return recordSet;var record=recordSet[id];return record?record:null},_getRefsArray:function(def){return!def||!def.refs?[]:(def.hasOwnProperty("refsArray")||(def.refsArray=_(def.refs).keys()),def.refsArray)},_registerReference:function(value,key,typeDefinition,node,referenceRegister){var self=this,refDefinition=typeDefinition.refs[key];if(_.isUndefined(value)||value===null||value.id===null)return refDefinition.list?[]:null;value.__type=refDefinition.name;var refType=self.__types[refDefinition.name],r=self._register(value,function(n){if(!refType.refs)return;var relationProperty=refDefinition.relationProperty;if(!relationProperty)return;var refPropertyDef=refType.refs[relationProperty];if(!refPropertyDef)return;var isPropertyInitialized=n.data.hasOwnProperty(relationProperty),previousValue=n.data[relationProperty],isList=refPropertyDef.list,selfRef=self._getReferenceObject(node.id,node.__type),registerChanges=function(value){var changes={};changes[refDefinition.relationProperty]=value,referenceRegister.diffs.push({id:n.id,type:self._getOriginType(n),changes:changes})};if(isList&&!isPropertyInitialized)return;isList?_(previousValue).any(function(r){return r.id===node.id})?selfRef=previousValue:(selfRef=previousValue.concat([selfRef]),registerChanges(selfRef)):comparer.isEqualIncluded(selfRef,previousValue)||registerChanges(selfRef),n.data[relationProperty]=selfRef});_.mergeArrayObjects(referenceRegister,r,["diffs"]);var refObj={isReference:!0,type:refDefinition.name,list:!0};return refDefinition.list?_.extend(r.refs,refObj):r.refs[0]},_removeCascadeObjects:function(typeDefinition,data){var self=this,register=self._getRegisterTemplate();return _.each(self._getRefsArray(typeDefinition),function(key){var refDefinition=typeDefinition.refs[key];refDefinition.cascade&&(refDefinition.list?_.each(data[key],function(dbRef){self._extendRegister(register,self.remove(dbRef.id,dbRef.type))}):self._extendRegister(register,self.remove(data[key].id,data[key].type)))}),register},_getOriginType:function(refNode){var type=refNode.__type;return refNode.origin&&(type=refNode.origin.type),type},_removeRefFromObj:function(node,key,register,typeDefinition,id){var self=this,data=node.data;if(!data.hasOwnProperty(key))return;var value=data[key];if(!value)return;var ref=typeDefinition.refs[key];if(!ref.relationProperty)return;var refTypeDefinition=self.__types[ref.name];_.isArray(value)||(value=[value]);for(var i=0,l=value.length;i<l;i++){var refValue=value[i];if(id&&id!==refValue.id)continue;var refNode=self.getPersistedNode(refValue.id,refValue.type);if(!refNode)return;if(!refNode.data.hasOwnProperty(ref.relationProperty))return;register.nodes.push(refNode);var changes={};changes[ref.relationProperty]=null,refTypeDefinition.refs&&refTypeDefinition.refs[ref.relationProperty]&&refTypeDefinition.refs[ref.relationProperty].list?(refNode.data[ref.relationProperty]=_(refNode.data[ref.relationProperty]).select(function(refVal){return refVal.id!=node.id}),changes[ref.relationProperty]=refNode.data[ref.relationProperty]):refNode.data[ref.relationProperty]=null,register.diffs.push({id:refNode.id,type:self._getOriginType(refNode),changes:changes})}},_removeObjectFromRefs:function(typeDefinition,node){var self=this,register=self._getRegisterTemplate();return _(self._getRefsArray(typeDefinition)).each(function(key){self._removeRefFromObj(node,key,register,typeDefinition)}),register},removeProperties:function(id,type,arrayOfPropertyNames){var self=this,node=self.getPersistedNode(id,type);if(!node)return;var data=node.data;_(arrayOfPropertyNames).each(function(propertyName){delete data[propertyName]})},removeFromList:function(id,type,listSet){var self=this,register=self._getRegisterTemplate(),node=self.getPersistedNode(id,type);if(!node)return register;var typeDefinition=self.__types[type],fieldName=tau.header.getFieldName(listSet),data=node.data[fieldName]||[];if(!data)return register;var list=[],entityId=listSet[fieldName].id;_.each(data,function(v){v.id!=entityId?list.push({id:v.id}):self._removeRefFromObj(node,fieldName,register,typeDefinition,entityId)});var regPart={id:id,__type:type};regPart[fieldName]=list;var r=self.register(regPart);return self._extendRegister(r,register),r},remove:function(id,type){var self=this,register=self._getRegisterTemplate(),node=self.getPersistedNode(id,type);if(!node)return register;var typeDefinition=self.__types[type],data=node.data;return register.deletedData.push(_(data).defaults({id:id,type:type})),delete self.__data[type][id],self._extendRegister(register,self._removeCascadeObjects(typeDefinition,data)),self._extendRegister(register,self._removeObjectFromRefs(typeDefinition,node)),register},removeCollection:function(type){var self=this,recordSet=self.__data[type];recordSet&&_.forEach(_.keys(recordSet),function(id){self.remove(id,type)})},isPropertyInitialized:function(id,type,propertyName){var node=this.getPersistedNode(id,type);return node?node.data?node.data.hasOwnProperty(propertyName):!1:!1},_getReferenceObject:function(id,objType){return{isReference:!0,id:id,type:objType}},_attachReference:function(refs,id,objType){var reference=this._getReferenceObject(id,objType);return refs.push(reference),reference},_getParentTypeNames:function(currentType){var self=this;if(!currentType.__parents){currentType.__parents=[];var parent=currentType.parent;while(parent){currentType.__parents.push(parent);var parentType=self.__types[parent];if(!parentType)break;parent=parentType.parent}}return currentType.__parents},_registerParentNodes:function(objType,id,persistedNode){var self=this,currentType=self.__types[objType],origin={data:persistedNode.data,id:id,origin:{id:id,type:objType}},parents=self._getParentTypeNames(currentType);for(var i=0;i<parents.length;i++){var parent=parents[i],typeDictionary=self._getTypeDictionary(parent);typeDictionary[id]=typeDictionary[id]||{},_.extend(typeDictionary[id],origin)}},_getRegisterTemplate:function(){return{refs:[],nodes:[],diffs:[],tree:{},deletedData:[]}},_registerObjectInTree:function(tree,registrationConfig){var self=this,dictionary=self._getTypeHolder(tree,registrationConfig.type);if(!dictionary.hasOwnProperty(registrationConfig.id)){var changes={},type=self.__types[registrationConfig.type],leaveInTree={id:registrationConfig.id,changes:changes},parents=self._getParentTypeNames(type);for(var i=0;i<parents.length;i++){var parentType=self.__types[parents[i]],parentDictionary=self._getTypeHolder(tree,parentType.name);parentDictionary[registrationConfig.id]=leaveInTree}dictionary[registrationConfig.id]=leaveInTree}_.extend(dictionary[registrationConfig.id].changes,registrationConfig.changes)},_extendTree:function(tree,diffs){var self=this;_.each(diffs,function(diff){self._registerObjectInTree(tree,diff)})},_extendRegister:function(register,r){this._extendTree(register.tree,r.diffs),_.mergeArrayObjects(register,r,["diffs","deleteData"])},register:function(data,fn,typeProperty){return this._register(data,fn,typeProperty)},isTypeDetectionRequired:function(type){var typeDefinition=this.__types[type];return typeDefinition.isParentType},getTypeDetectionForNode:function(id,type){if(!this.isTypeDetectionRequired(type))return{required:!1};var persistedNode=this.getPersistedNode(id,type),outR={required:!0};return persistedNode?persistedNode.origin?!persistedNode.origin.id||!persistedNode.origin.type?outR:{required:!1,type:persistedNode.origin.type}:outR:outR},_getTypeDefinitionForRegistration:function(id,objType,obj){var self=this,typeDefinition=self.__types[objType];typeDefinition||(typeDefinition=self.__types[objType.toLowerCase()]);if(typeDefinition.isParentType){var typeDetection=self.getTypeDetectionForNode(id,typeDefinition.name);objType=typeDetection.required?typeDefinition.detectType(obj):typeDetection.type,typeDefinition=self.__types[objType]}return typeDefinition},_register:function(data,fnRegistered,typeProperty){var self=this;typeProperty=typeProperty||"__type";var register=self._getRegisterTemplate();if(_.isEmpty(data))return register;_.isArray(data)||(data=_.isArray(data.items)?data.items:[data]);var type=data[typeProperty];for(var i=0,l=data.length;i<l;i++){var obj=data[i];obj.hasOwnProperty(typeProperty)||(obj[typeProperty]=type),self._registerObject(obj,register,fnRegistered,typeProperty)}return register},_registerObject:function(obj,register,fnRegistered,typeProperty){var self=this,objType=obj[typeProperty],id=obj.id;if(!objType||!id)throw new Error("properties __type and id are required for data registration");var typeDefinition=self._getTypeDefinitionForRegistration(id,objType,obj),registrationConfig={id:id,type:typeDefinition.name,changes:{}},typeDictionary=self._getTypeDictionary(typeDefinition.name),persistedNode=typeDictionary[id];persistedNode||(typeDictionary[id]=persistedNode={__type:typeDefinition.name,data:{id:id},id:id},self._registerParentNodes(typeDefinition.name,id,persistedNode,typeDictionary));var nodeData=persistedNode.data,refDictionary=typeDefinition.refs,registerForReferences=self._getRegisterTemplate();for(var key in obj){if(key==="__type"||key==="id")continue;var newValue=obj[key],oldValue=nodeData[key];refDictionary.hasOwnProperty(key)&&(newValue=self._registerReference(newValue,key,typeDefinition,persistedNode,registerForReferences)),persistedNode.data[key]=newValue,comparer.isEqualIncluded(oldValue,newValue)||(registrationConfig.changes[key]=newValue)}self._extendRegister(register,registerForReferences),persistedNode.data.hasOwnProperty("__type")&&delete persistedNode.data.__type,register.nodes.push(persistedNode),self._extendTree(register.tree,[registrationConfig]),register.diffs.push(registrationConfig),self._attachReference(register.refs,id,typeDefinition.name),fnRegistered&&fnRegistered(persistedNode)},get:function(id,type,config){var self=this;if(!id){var r={data:[],notInitializedFields:[],all:!0};return _.each(_(this._getTypeDictionary(type)).keys(),function(rID){var item=self._get(rID,type,config);r.data.push(item.data),self.mergeFields(r.notInitializedFields,item.notInitializedFields)}),r}return this._get(id,type,config)},_get:function(id,type,config){var self=this;config=config||{};var node=self.getPersistedNode(id,type),typeDefinition=self.__types[type]||{},refs=typeDefinition.refs||{},fields=config.$fields||config.fields||[],result={data:null,type:typeDefinition,notInitializedFields:fields};if(!node)return result;var obj={},notInitializedFields=[],processRef=function(val,fields,notInitFields){var refVal=self._get(val.id,val.type,{fields:fields||[]});return refVal.notInitializedFields.length&&notInitFields.push(refVal.notInitializedFields),refVal.data},data=node.data;return _.each(fields,function(field){var fieldName=tau.header.getFieldName(field),val=data[fieldName];if(_.isUndefined(val)){notInitializedFields.push(field);return}obj[fieldName]=val;if(refs.hasOwnProperty(fieldName)&&val){var notInitRefFields=[];if(_.isArray(val)){var arrVal=val;val=[],_.each(arrVal,function(ref){val.push(processRef(ref,field[fieldName],notInitRefFields))})}else val=processRef(val,field[fieldName],notInitRefFields);if(notInitRefFields.length>0){var m={};m[fieldName]=[],_(notInitRefFields).each(function(f){self.mergeFields(m[fieldName],f)}),m[fieldName].length>0&&notInitializedFields.push(m)}}obj[fieldName]=val}),node.origin&&(type=node.origin.type),{type:typeDefinition,data:_(obj).defaults({id:id,__type:type}),notInitializedFields:notInitializedFields}},mergeFields:function(masterFields,fields,config){return _.mergeFields(masterFields,fields,config)},destroy:function(){delete this.__data,delete this.__types}})})