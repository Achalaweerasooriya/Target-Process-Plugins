define(["Underscore","tau/core/class"],function(_,Class){var noop=function(){},createAccumulatorCallback=function(sourceKeys,callback){var accumulator=new Array(sourceKeys.length);return function(e){var cmdId=e.uid,data=e.data;accumulator[cmdId]=data,sourceKeys=_(sourceKeys).without(cmdId),sourceKeys.length===0&&callback(accumulator)}};return Class.extend({init:function(settingsConfig,sources){var self=this;self.settings=settingsConfig,self.sources=sources,self.callbacksMap=[],self.fieldsRetrieved=[],self.commonCallback=_.bind(function(e){var bs=this,data=e.data,diff=bs.mergeChanges(data);diff!==null&&bs.applyCallback(diff)},self)},getGroupName:function(){return this.settings.groupName},applyCallback:function(diff){var keys=_(diff).keys();for(var i=0;i<this.callbacksMap.length;i++){var command=this.callbacksMap[i];this.matchCommandCallback(keys,command)&&command.callback.apply(command.listener,[diff])}},matchCommandCallback:function(keys,cmd){var intersection=_.intersection(keys,cmd.fields);return intersection.length>0},each:function(iterator,emptyCallback){if(this.sources.length)_(this.sources).each(iterator);else{var callback=emptyCallback||noop;callback()}},mergeChanges:function(dataUpdate){var self=this,settings=self.settings,fields=_(dataUpdate).keys(),diff=null;for(var i=0;i<fields.length;i++){var fieldName=fields[i];self.markFieldsRetrieved(fieldName),_.isEqual(settings[fieldName],dataUpdate[fieldName])||(diff=diff||{},diff[fieldName]=settings[fieldName]=_.cloneDeep(dataUpdate[fieldName]))}return diff},markFieldsRetrieved:function(fieldNameOrFields){fieldNameOrFields=_.isString(fieldNameOrFields)?[fieldNameOrFields]:fieldNameOrFields,this.fieldsRetrieved=_.union(this.fieldsRetrieved,fieldNameOrFields)},selectNotRetrievedFields:function(requestedFields){return _.difference(requestedFields,this.fieldsRetrieved)},get:function(cmd){var self=this;_(cmd).defaults({callback:noop});var settings=self.settings,result={},sources=self.sources,sourceKeys=_.range(sources.length),fields=self.selectNotRetrievedFields(cmd.fields),accumulatorCallback=function(responses){self.markFieldsRetrieved(fields),_(responses).each(function(r){for(var i=0;i<fields.length;i++){var fieldName=fields[i],fieldValue=r[fieldName]!==null?r[fieldName]:settings[fieldName];!_.isNaN(fieldValue)&&!_.isNull(fieldValue)&&!_.isUndefined(fieldValue)&&(result[fieldName]=fieldValue)}}),_(settings).extend(result);var clone={};$.extend(!0,clone,settings),cmd.callback(clone)};if(fields.length===0)accumulatorCallback([]);else{var commonAccumulatorCallback=createAccumulatorCallback(sourceKeys,accumulatorCallback);self.each(function(s,index){s.get({uid:index,fields:fields,callback:commonAccumulatorCallback})},function(){accumulatorCallback([])})}},set:function(cmd){var self=this;_(cmd).defaults({callback:noop});var sources=self.sources,sourceKeys=_.range(sources.length),accumulatorCallback=function(responses){},commonCallback=createAccumulatorCallback(sourceKeys,accumulatorCallback);self.each(function(s,index){s.set({uid:index,set:cmd.set,callback:commonCallback})},function(){accumulatorCallback([])}),self.commonCallback({data:cmd.set}),cmd.callback(self.settings)},registerSubscription:function(cmd){var self=this;return self.callbacksMap.push(cmd),this.commonCallback},unregisterSubscription:function(listener){var self=this;if(self.callbacksMap.length==0)return;self.callbacksMap=_.reject(self.callbacksMap,function(callback){return listener===callback.listener})},bind:function(cmd){var self=this,commonCallback=self.registerSubscription(cmd);self.each(function(s,index){s.bind({uid:index,fields:cmd.fields,listener:self,callback:commonCallback})})},unbind:function(cmd){var self=this;self.each(function(s){s.unbind({listener:self})}),self.unregisterSubscription(cmd.listener)},dispose:function(){var self=this;self.each(function(s,index){s.unbind({listener:self})}),self.callbacksMap=[]}})})