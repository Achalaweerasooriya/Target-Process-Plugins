define(["Underscore","tau/core/model-base","tau/core/termProcessor"],function(_,ModelBase,Terms){return ModelBase.extend({init:function(config){this._super(config);var containsOperator=function($query,propertyName,value){$query.hasOwnProperty(propertyName)||($query[propertyName]={}),$query[propertyName].$contains=value},inComplexStatement=function($query,propertyName,value){if(value==="All uncompleted"){$query[propertyName]={isFinal:0};return}if(!$query.hasOwnProperty(propertyName)||_.isNull($query[propertyName]))$query[propertyName]={name:{$in:[]}};if(value==="Backlog"){$query[propertyName]=null;return}$query[propertyName].name&&$query[propertyName].name.$in&&$query[propertyName].name.$in.push(value)},idStatement=function($query,propertyName,value){$query.hasOwnProperty(propertyName)||($query[propertyName]={$in:[0]});var id=parseInt(value);_.isNumber(id)&&!_.isNaN(id)&&$query[propertyName].$in.push(id)};config.context&&config.context.applicationContext&&config.context.getTerms?this.terms=new Terms(config.context.getTerms()):this.terms=new Terms;var terms=this.terms;this.properties={id:{autoCompletable:!1,statement:idStatement},text:{name:"name",autoCompletable:!1,statement:containsOperator},name:{autoCompletable:!1,statement:containsOperator},description:{autoCompletable:!1,statement:containsOperator},tag:{name:"tags",autoCompletable:!1,statement:containsOperator},project:{label:terms.resolve("project"),autoCompletable:!0,statement:inComplexStatement},state:{name:"entityState",autoCompletable:!0,fields:[{entityType:["id"]}],items:[{label:"All uncompleted",value:"All uncompleted",id:0}],statement:inComplexStatement},iteration:{label:terms.resolve("iteration"),autoCompletable:!0,category:"project",items:[{label:"Backlog",value:"Backlog",id:0}],fields:[{project:["id","abbreviation"]}],statement:inComplexStatement},release:{label:terms.resolve("release"),autoCompletable:!0,category:"project",items:[{label:"Backlog",value:"Backlog",id:0}],fields:[{project:["id","abbreviation"]}],statement:inComplexStatement},priority:{autoCompletable:!0,fields:[{entityType:["id","name"]}],statement:inComplexStatement}}},getType:function(){return"assignable"},"bus autoCompleteRequest":function(evt){var config=evt.data,self=this,property=self.properties[config.property];if(!property)return;if(property.autoCompletable!==!0)return;if(property.autoCompleteValues){var data={config:config,data:property.autoCompleteValues};self["bus autoComplete"]({data:data});return}var type=property.hasOwnProperty("name")?property.name:config.property,fields=["id","name"];property.hasOwnProperty("fields")&&_.mergeFields(fields,property.fields);var callback=function(r){var evtData={data:r.data,config:config};self.fire("autoComplete",evtData)};self.bus.fire("dataRequest",{type:type,config:{fields:fields},callback:callback})},_isEqualByCategory:function(record,property,field){return property.hasOwnProperty("category")?record[property.category]?record[property.category].name===field.category:!0:!0},"bus autoComplete":function(evt){var cfg=evt.data,config=cfg.config,values=[],self=this,property=this.properties[config.property];property.hasOwnProperty("items")&&(values=values.concat(property.items)),_.each(cfg.data,function(v){if(v.name===""||v.name==="-")return;if(_(values).any(function(field){return field.value.toLowerCase()===v.name.toLocaleLowerCase()&&self._isEqualByCategory(v,property,field)}))return;var item={label:v.name,value:v.name,id:v.id,dataItem:v},filter=function(){return!0};property.hasOwnProperty("filter")&&(filter=property.filter);if(!filter.call(this,item,property,config))return;if(property.hasOwnProperty("category")){var category=v[property.category].abbreviation||v[property.category].name;_.extend(item,{category:category,label:v.name+" ["+category+"]"})}values.push(item)});var finalResultFiltering=_(values).select(function(v){return!config.term||config.term==""?!0:v.value.toLowerCase().indexOf(config.term.toLowerCase())>=0});config.callback(finalResultFiltering)},"bus search":function(evt){var config=evt.data,self=this,searchCollection=config.collection,$query=this.config.$query?_.deepClone(this.config.$query):{};_.each(searchCollection,function(val){var property=self.properties[val.property];if(!property)return;var name=property.name?property.name:val.property;property.statement($query,name,val.value)}),self.bus.fire("newSearchQuery",{type:self.getType(),config:{$orderBy:"name",$query:$query,$skip:0,$limit:20}})},getInitialQueryConfig:function(){return{$skip:0,$limit:20,$query:this.config.$query?_.deepClone(this.config.$query):{}}},getInitialQueryString:function(){return""},"bus requireSearchConfig":function(evt){var self=this,project=evt.data.project,config=self.getInitialQueryConfig();_.defaults(config,{$orderBy:"name"});var searchQuery=self.getInitialQueryString();self.fire("searchConfigFormed",{type:self.getType(),config:config,properties:self.properties,searchQuery:searchQuery})}})})