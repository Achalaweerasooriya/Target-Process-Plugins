define(["Underscore","tau/models/finder/model.assignable.search"],function(_,ModelBase){return ModelBase.extend({init:function(config){this._super(config),delete this.properties.state,delete this.properties.priority},setInitialLimits:function(data){this.initialLimits=data},getInitialQueryConfig:function(){return{$skip:0,$limit:20,$query:{}}},getInitialQueryString:function(){return""},getType:function(){return"build"},"bus requireSearchConfig":function(evt){var self=this,project=evt.data.project,entity=this.config.context.entity;this.config.store.get(entity.entityType.name,{id:entity.id,fields:["id",{project:["id"]}]}).done({success:function(result){var entity=result[0].data,q={"Project.Id":null};entity.project&&(q["Project.Id"]=entity.project.id),self.setInitialLimits(q);var config={$skip:0,$limit:20,$query:q},searchQuery=self.getInitialQueryString();self.fire("searchConfigFormed",{type:self.getType(),config:config,properties:self.properties,searchQuery:searchQuery})}})},"bus search":function(evt){var config=evt.data,self=this,searchCollection=config.collection,$query={};_.each(searchCollection,function(val){var property=self.properties[val.property];if(!property)return;var name=property.name?property.name:val.property;property.statement($query,name,val.value)}),$query=_.extend($query,this.initialLimits),self.bus.fire("newSearchQuery",{type:self.getType(),config:{$query:$query,$skip:0,$limit:20}})}})})