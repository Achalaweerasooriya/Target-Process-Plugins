define(["Underscore","jQuery","tau/core/event.emitter"],function(_,$,baseModel){return baseModel.extend({"bus slice.ready:last+model.get.cell.content":function(evt,evtSlice,evtCellContent){var self=this,slice=evtSlice.base,coords=evtCellContent;self.onGetCellContent(slice,coords)},onGetCellContent:function(slice,coords){var self=this,$skip=coords.from,$take=coords.to-coords.from+1,cfg={$take:self.generateExcessTake($take),$skip:$skip};coords.x!=="null"&&(cfg.x=coords.x),coords.y!=="null"&&(cfg.y=coords.y),slice.cell(cfg).done(function(r){var cellContent=r.data.items.length>0?r.data.items[0]:{},resp=self.preProcessCellResponse(cellContent,coords);self.fireCellBasicInfoRetrieved(resp)})},"bus model.get.cell.basicInfo":function(evt){var self=this,coords=evt.data;coords.x=coords.x||null,coords.y=coords.y||null,coords.x&&coords.y?(coords.x=coords.x.toString(),coords.y=coords.y.toString(),self.fire("model.get.cell.content",coords)):self.fire("model.get.axisCell.basicInfo",coords)},"bus model.sliceInfo.retrieved:last+model.get.axisCell.basicInfo":function(evt){var self=this,coords=evt["model.get.axisCell.basicInfo"].data,sliceInfo=evt["model.sliceInfo.retrieved"].data,isX=coords.hasOwnProperty("x"),isY=coords.hasOwnProperty("y"),axisName=coords.x?"X":"Y",marks=sliceInfo["marks"+axisName],cellContent=_(marks).find(function(item){var axis=axisName.toLowerCase();return item[axis]==coords[axis]});self.fireCellBasicInfoRetrieved({dataItem:cellContent,coords:coords})},fireCellBasicInfoRetrieved:function(dataItemCoords){var self=this,cellContent=dataItemCoords.dataItem;return self.fire("model.cell.basicInfo.retrieved",cellContent),cellContent.dynamic.items},"bus configurator.ready:last + acid.ready:last + before_model.cell.basicInfo.retrieved":function(evt,configurator,acid,cellData){var builder=configurator.getUrlBuilder();_.forEach(cellData.dynamic.items,function(item){var data=item.data;data.entityRef=builder.getNewViewUrl(_.asString(data.id),_.asString(data.type),acid)})},fireCardsDataReady:function(cardsDynamicItems){this.fire("model.cards.data.ready",{cards:cardsDynamicItems})},preProcessCellResponse:function(dataItem,coords){var cellData=_.defaults(dataItem,{dynamic:{items:[]},fixed:{items:[]},x:coords.x,y:coords.y}),cellPagingFixedItem=_(cellData.fixed.items).find(function(item){return item.type==="cellpaging"});if(cellPagingFixedItem){var $take=coords.to-coords.from+1,dynamicItems=cellData.dynamic.items;cellData.dynamic.items=dynamicItems.slice(0,$take),cellPagingFixedItem.data=cellPagingFixedItem.data||{},cellPagingFixedItem.data.nextOrderingValue=this.getNextOrderingValue($take,dynamicItems)}else coords.to=coords.from+(cellData.dynamic.items.length-1);return{dataItem:cellData,coords:coords}},getNextOrderingValue:function(index,dynamicItems){if(index>=dynamicItems.length)throw"DEBUG: index is out of range. To implement cell paging logic we must query more card items then show to user";return dynamicItems[index].orderingValue},generateExcessTake:function($take){return $take+Math.round($take/4)}})})