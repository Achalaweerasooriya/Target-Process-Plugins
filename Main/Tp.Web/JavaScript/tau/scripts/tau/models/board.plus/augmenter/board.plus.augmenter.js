define(["Underscore","tau/core/class"],function(e,t){var a="id,name,entityType.name as type",s=[a,"tags,effort"].join(","),n="entityState.IsFinal as isFinalState",r="it.isInPast() as isInPast",i="assignedUser.Select({id,firstName,lastName,email,avatarUri}) as assignedUsers",o="units",u="tasks.Count() as allTasks,tasks.Count(entityState.IsFinal != true) as openTasks",l="bugs.Count() as allBugs, bugs.Count(entityState.IsFinal != true) as openBugs",y="userStories.Count() as userStoriesCount, userStories.Count(entityState.IsFinal != true) as openUserStoriesCount",d="features.Count() as featuresCount, features.Count(entityState.IsFinal != true) as openFeaturesCount",m='firstName+ " " +LastName as name',p="login as login",c="role.Name as roleName",f="requesters.Count() as votes",C="TeamMembers.Count() as teamCount",S="comments.Count() as commentsCount",b="CurrentAllocation",T="Assignables.Count(entityState.IsFinal != true) as relatedEntitiesCount",g="lastCommentedUser",v="severity.name as severityName",A="{Project.id, Project.name, Project.abbreviation, Project.color} as Project",U="{Release.name} as release",P="{Team.id, Team.name, Team.icon, Team.abbreviation} as Team",D="CurrentStateResponsiblePersons as CurrentStateResponsiblePersons",R="{slaveRelations.ActiveSlaveRelationsCount() as activeSlaveCount, masterRelations.ActiveMasterRelationsCount() as activeMasterCount} as relations",h={user:{type:"user",data:["id",'"user" as type',"modifyDate","avatarUri",m,p,c,C,b,T]},userstory:{type:"userstory",data:[o,s,i,u,l,n,A,P,D],lazy:["id",R]},bug:{type:"bug",data:[o,s,i,v,n,A,P,D],lazy:["id",R]},feature:{type:"feature",data:[o,s,i,y,n,A,P,D],lazy:["id",R]},request:{type:"request",data:[o,s,i,f,"createDate",S,g,n,A,P,D],lazy:["id",R]},task:{type:"task",data:[o,s,i,n,A,P,D],lazy:["id",R]},impediment:{type:"impediment",data:[a,"{responsible.avatarUri as avatarURI,responsible.lastName,responsible.firstName,responsible.id} as responsible","createDate","priority.name as priorityName",n,A],lazy:["id",R]},testcase:{type:"testcase",data:[a,"tags","lastRunStatus","lastRunDate",A],lazy:["id",R]},testplan:{type:"testplan",data:[a,"tags","testCases.Count as testCaseCount","testPlanRuns.Count as testRunCount","LastCompletedTestPlanRun.Id as lastRunId","LastCompletedTestPlanRun.PassedCount as lastRunPassedCount","LastCompletedTestPlanRun.FailedCount as lastRunFailedCount","LastCompletedTestPlanRun.EndDate as lastRunEndDate",A],lazy:["id",R]},testplanrun:{type:"testplanrun",data:[a,"tags",A,P,i,n,D,"build","notRunCount","failedCount","passedCount"],lazy:["id",R]},project:{type:"project",data:["id","name","entityType.name AS type","color","tags","teamProjects.Count() AS teamProjectsCount","teamProjects.Select({Team.id, Team.name, Team.icon}) AS Teams"],lazy:["id",R,"{ userStories.Sparkline(16) AS userStories, bugs.Sparkline(16) AS bugs } as sparklines"]},release:{type:"release",data:[a,o,l,y,d,A,r,"startDate","endDate","isCurrent","EffortCompleted() as effortCompleted","EffortTotal() as effortTotal","units"],lazy:["id",R]},iteration:{type:"iteration",data:[a,"id","name",l,y,A,U,r,"startDate","endDate","isCurrent","canBeFinished","entityType.name AS type","EffortCompleted() as effortCompleted","EffortTotal() as effortTotal","units"]},teamiteration:{type:"teamiteration",data:[a,"id","name",l,y,P,r,"startDate","endDate","isCurrent","canBeFinished","entityType.name AS type","EffortCompleted() as effortCompleted","EffortTotal() as effortTotal","units"]},team:{type:"team",data:["id","name","entityType.name AS type","icon","tags","teamMembers.Count() AS teamMembersCount",'teamMembers.Select({User.id, User.firstName+ " " + User.lastName as name, User.avatarUri}) AS Members'],lazy:["id",R,'{ Assignables.Where(EntityType.name == "UserStory").Sparkline(16) AS userStories, Assignables.Where(EntityType.name == "Bug").Sparkline(16) AS bugs } as sparklines']},build:{type:"build",data:[a,"tags",A,"buildDate"],lazy:["id",R]},projectmember:{type:"projectmember",data:["id",'"projectmember" as type',A,"membershipStartDate as startDate","membershipEndDate as endDate","{User.fullName, User.avatarUri} as user","allocation"]}},j=["id","name","isCurrent","EffortCompleted() as effortCompleted","EffortTotal() as effortTotal","isNext","isPrevious","startDate","endDate","units","entityType.name AS type"],N=["id","name","isCurrent","canBeFinished","startDate","EffortSum() as effortSum","velocity","endDate","units","entityType.name AS type"],z=["id","firstName",'"user" as type',"lastName","email","avatarUri","isActive","it.UnknownCapacity() as capacity","role.name as roleName"],E=["id","name","entityType.name AS type"],k=e.without(N,"units"),F={team:{type:"team",data:["id","name","entityType.name AS type","icon"]},release:{type:"release",data:j},iteration:{type:"iteration",data:N},teamiteration:{type:"teamiteration",data:k},assigneduser:{type:"assigneduser",data:z},project:{type:"release",data:["id","name","entityType.name AS type","color"]},inboundrelations:{type:"inboundrelations",data:E},outboundrelations:{type:"outboundrelations",data:E}},I={team:{type:"team",data:["id","name","entityType.name AS type","icon","teamMembers.Select({User.id, User.firstName, User.lastName, User.email, User.avatarUri}) AS users"]},userstory:{type:"userstory",data:["id","name","entityType.name AS type","entityType","{entityState.name} as entityState","effort","units",i,A]},feature:{type:"feature",data:["id","name","entityType.name AS type","entityType","{entityState.name} as entityState","effort","units",i,A]},release:{type:"release",data:j},iteration:{type:"iteration",data:N},teamiteration:{type:"teamiteration",data:k},assigneduser:{type:"assignedUser",data:z},project:{type:"release",data:["id","name","entityType.name AS type","color"]},inboundrelations:{type:"inboundrelations",data:E},outboundrelations:{type:"outboundrelations",data:E}},w=function(t,a){var s=h[t],n=[];
return e.each(a,function(t){var a=s[t]||[];n=e.union(n,a)}),{type:s.type,data:"{"+e.compact(n).join(",")+"}"}};return e.each(I,function(t,a){I[a].data="{"+e.compact(t.data).join(",")+"}"}),e.each(F,function(t,a){F[a].data="{"+e.compact(t.data).join(",")+"}"}),t.extend({augmentCells:function(t,a){a=a||["data","lazy"];var s=t.types;return e.each(s,function(e,t){e=e.toLowerCase(),h.hasOwnProperty(e)&&(s[t]=w(e,a))}),t},augmentAxisY:function(e){if(e.types&&e.types.length){var t=e.types[0].toLowerCase();I.hasOwnProperty(t)&&(e.data=I[t].data)}return e},augmentAxisX:function(e){if(e.types&&e.types.length){var t=e.types[0].toLowerCase();F.hasOwnProperty(t)&&(e.data=F[t].data)}return e},augmentCellsLazyInfo:function(t){var a=e.deepClone(t),s=a.cells.types;return e.each(s,function(e,t){var a=e.type.toLowerCase();h.hasOwnProperty(a)&&(s[t]=w(a,["lazy"]))}),a}})});