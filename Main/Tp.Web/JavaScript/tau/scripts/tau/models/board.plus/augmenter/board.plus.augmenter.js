define(["Underscore","tau/core/class"],function(_,Class){var baseField="id,name,entityType.name as type",tagsEffort=[baseField,"tags,effort"].join(","),isFinalState="entityState.IsFinal as isFinalState",assignments="assignedUser.Select({id,firstName,lastName,email,avatarUri}) as assignedUsers",assignedUsers=assignments,units="units",tasksInfo="tasks.Count() as allTasks,tasks.Count(entityState.IsFinal != true) as openTasks",bugsInfo="bugs.Count() as allBugs, bugs.Count(entityState.IsFinal != true) as openBugs",userStoriesInfo="userStories.Count() as userStoriesCount, userStories.Count(entityState.IsFinal != true) as openUserStoriesCount",fullName='firstName+ " " +LastName as name',login="login as login",roleName="role.Name as roleName",votes="requesters.Count() as votes",teamMembersCount="TeamMembers.Count() as teamCount",commentsCount="comments.Count() as commentsCount",allocation="CurrentAllocation",assignablesInfo="Assignables.Count(entityState.IsFinal != true) as relatedEntitiesCount",lastCommentUser="lastCommentedUser",severityName="severity.name as severityName",impedimentInfo="impediments.Count(entityState.IsFinal != true) as openImpedimentsCount",projectInfo="{Project.id, Project.name, Project.abbreviation, Project.color} as Project",teamInfo="{Team.id, Team.name, Team.icon} as Team",relationInfo="{slaveRelations.ActiveSlaveRelationsCount() as activeSlaveCount, masterRelations.ActiveMasterRelationsCount() as activeMasterCount} as relations",fieldsConfig={user:{type:"user",data:["id",'"user" as type',"modifyDate","avatarUri",fullName,login,roleName,teamMembersCount,allocation,assignablesInfo,impedimentInfo]},userstory:{type:"userstory",data:[units,tagsEffort,assignments,tasksInfo,bugsInfo,impedimentInfo,isFinalState,projectInfo,teamInfo],lazy:["id",relationInfo]},bug:{type:"bug",data:[units,tagsEffort,assignments,impedimentInfo,severityName,isFinalState,projectInfo,teamInfo],lazy:["id",relationInfo]},feature:{type:"feature",data:[units,tagsEffort,assignments,impedimentInfo,userStoriesInfo,isFinalState,projectInfo,teamInfo],lazy:["id",relationInfo]},request:{type:"request",data:[units,tagsEffort,assignments,impedimentInfo,votes,"createDate",commentsCount,lastCommentUser,isFinalState,projectInfo,teamInfo],lazy:["id",relationInfo]},task:{type:"task",data:[units,tagsEffort,assignments,impedimentInfo,isFinalState,projectInfo,teamInfo],lazy:["id",relationInfo]},impediment:{type:"impediment",data:[baseField,"{responsible.avatarUri as avatarURI,responsible.lastName,responsible.firstName,responsible.id} as responsible","createDate","priority.name as priorityName",isFinalState,projectInfo],lazy:["id",relationInfo]},testcase:{type:"testcase",data:["id","name","entityType.name AS type","tags","lastStatus","lastRunDate",projectInfo],lazy:["id",relationInfo]},project:{type:"project",data:["id","name","entityType.name AS type","color","tags","teamProjects.Count() AS teamProjectsCount","teamProjects.Select({Team.id, Team.name, Team.icon}) AS Teams"],lazy:["id",relationInfo,"{ userStories.Sparkline(16) AS userStories, bugs.Sparkline(16) AS bugs } as sparklines"]},team:{type:"team",data:["id","name","entityType.name AS type","icon","tags","teamMembers.Count() AS teamMembersCount",'teamMembers.Select({User.id, User.firstName+ " " + User.lastName as name, User.avatarUri}) AS Members'],lazy:["id",relationInfo,'{ Assignables.Where(EntityType.name == "UserStory").Sparkline(16) AS userStories, Assignables.Where(EntityType.name == "Bug").Sparkline(16) AS bugs } as sparklines']}},releaseFields=["id","name","isCurrent","EffortCompleted() as effortCompleted","EffortTotal() as effortTotal","isNext","isPrevious","startDate","endDate","units","entityType.name AS type"],axisXConfig={team:{type:"team",data:["id","name","entityType.name AS type","icon"]},release:{type:"release",data:releaseFields},project:{type:"release",data:["id","name","entityType.name AS type","color"]}},axisYConfig={team:{type:"team",data:["id","name","entityType.name AS type","icon","teamMembers.Select({User.id, User.firstName, User.lastName, User.email, User.avatarUri}) AS users"]},userstory:{type:"userstory",data:["id","name","entityType.name AS type","entityType","{entityState.name} as entityState","effort","units",assignments,projectInfo]},feature:{type:"feature",data:["id","name","entityType.name AS type","entityType","{entityState.name} as entityState","effort","units",assignments,projectInfo]},release:{type:"release",data:releaseFields},project:{type:"release",data:["id","name","entityType.name AS type","color"]}},getCardFieldsData=function(type,sections){var f=fieldsConfig[type],resItems=[];return _.each(sections,function(s){var items=f[s]||[];resItems=_.union(resItems,items)}),{type:f.type,data:"{"+_.compact(resItems).join(",")+"}"}};return _.each(axisYConfig,function(v,k){axisYConfig[k].data="{"+_.compact(v.data).join(",")+"}"}),_.each(axisXConfig,function(v,k){axisXConfig[k].data="{"+_.compact(v.data).join(",")+"}"}),Class.extend({augmentCells:function(cellsDefinition,sections){sections=sections||["data","lazy"];var types=cellsDefinition.types;return _.each(types,function(type,k){type=type.toLowerCase(),fieldsConfig.hasOwnProperty(type)&&(types[k]=getCardFieldsData(type,sections))}),cellsDefinition},augmentAxisY:function(axisDefinition){if(axisDefinition.types&&axisDefinition.types.length){var type=axisDefinition.types[0].toLowerCase();axisYConfig.hasOwnProperty(type)&&(axisDefinition.data=axisYConfig[type].data)}return axisDefinition},augmentAxisX:function(axisDefinition){if(axisDefinition.types&&axisDefinition.types.length){var type=axisDefinition.types[0].toLowerCase();axisXConfig.hasOwnProperty(type)&&(axisDefinition.data=axisXConfig[type].data)}return axisDefinition},augmentCellsLazyInfo:function(definitionBase){var def=_.deepClone(definitionBase),types=def.cells.types;return _.each(types,function(item,k){var type=item.type.toLowerCase();fieldsConfig.hasOwnProperty(type)&&(types[k]=getCardFieldsData(type,["lazy"]))}),def}})})