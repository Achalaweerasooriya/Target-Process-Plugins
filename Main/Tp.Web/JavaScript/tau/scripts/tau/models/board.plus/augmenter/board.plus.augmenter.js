define(["Underscore","tau/core/class"],function(e,t){var a="id,name,entityType.name as type",s=[a,"tags,effort"].join(","),n="entityState.IsFinal as isFinalState",r="assignedUser.Select({id,firstName,lastName,email,avatarUri}) as assignedUsers",i="units",o="tasks.Count() as allTasks,tasks.Count(entityState.IsFinal != true) as openTasks",u="bugs.Count() as allBugs, bugs.Count(entityState.IsFinal != true) as openBugs",l="userStories.Count() as userStoriesCount, userStories.Count(entityState.IsFinal != true) as openUserStoriesCount",d="features.Count() as featuresCount, features.Count(entityState.IsFinal != true) as openFeaturesCount",y='firstName+ " " +LastName as name',m="login as login",p="role.Name as roleName",f="requesters.Count() as votes",c="TeamMembers.Count() as teamCount",C="comments.Count() as commentsCount",S="CurrentAllocation",b="Assignables.Count(entityState.IsFinal != true) as relatedEntitiesCount",T="lastCommentedUser",g="severity.name as severityName",v="{Project.id, Project.name, Project.abbreviation, Project.color} as Project",A="{Release.name} as release",U="{Team.id, Team.name, Team.icon, Team.abbreviation} as Team",P="CurrentStateResponsiblePersons as CurrentStateResponsiblePersons",D="{slaveRelations.ActiveSlaveRelationsCount() as activeSlaveCount, masterRelations.ActiveMasterRelationsCount() as activeMasterCount} as relations",R={user:{type:"user",data:["id",'"user" as type',"modifyDate","avatarUri",y,m,p,c,S,b]},userstory:{type:"userstory",data:[i,s,r,o,u,n,v,U,P],lazy:["id",D]},bug:{type:"bug",data:[i,s,r,g,n,v,U,P],lazy:["id",D]},feature:{type:"feature",data:[i,s,r,l,n,v,U,P],lazy:["id",D]},request:{type:"request",data:[i,s,r,f,"createDate",C,T,n,v,U,P],lazy:["id",D]},task:{type:"task",data:[i,s,r,n,v,U,P],lazy:["id",D]},impediment:{type:"impediment",data:[a,"{responsible.avatarUri as avatarURI,responsible.lastName,responsible.firstName,responsible.id} as responsible","createDate","priority.name as priorityName",n,v],lazy:["id",D]},testcase:{type:"testcase",data:[a,"tags","lastStatus","lastRunDate",v],lazy:["id",D]},testplan:{type:"testplan",data:[a,"tags","testCases.Count as testCaseCount","testPlanRuns.Count as testRunCount","LastCompletedTestPlanRun.Id as lastRunId","LastCompletedTestPlanRun.PassedCount as lastRunPassedCount","LastCompletedTestPlanRun.FailedCount as lastRunFailedCount","LastCompletedTestPlanRun.EndDate as lastRunEndDate",v],lazy:["id",D]},testplanrun:{type:"testplanrun",data:[a,"tags",v,U,r,n,P,"build","notRunCount","failedCount","passedCount"],lazy:["id",D]},project:{type:"project",data:["id","name","entityType.name AS type","color","tags","teamProjects.Count() AS teamProjectsCount","teamProjects.Select({Team.id, Team.name, Team.icon}) AS Teams"],lazy:["id",D,"{ userStories.Sparkline(16) AS userStories, bugs.Sparkline(16) AS bugs } as sparklines"]},release:{type:"release",data:[a,i,u,l,d,v,"startDate","endDate","isCurrent","EffortCompleted() as effortCompleted","EffortTotal() as effortTotal","units"],lazy:["id",D]},iteration:{type:"iteration",data:[a,"id","name",u,l,v,A,"startDate","endDate","isCurrent","canBeFinished","entityType.name AS type","EffortCompleted() as effortCompleted","EffortTotal() as effortTotal","units"]},teamiteration:{type:"teamiteration",data:[a,"id","name",u,l,U,"startDate","endDate","isCurrent","canBeFinished","entityType.name AS type","EffortCompleted() as effortCompleted","EffortTotal() as effortTotal","units"]},team:{type:"team",data:["id","name","entityType.name AS type","icon","tags","teamMembers.Count() AS teamMembersCount",'teamMembers.Select({User.id, User.firstName+ " " + User.lastName as name, User.avatarUri}) AS Members'],lazy:["id",D,'{ Assignables.Where(EntityType.name == "UserStory").Sparkline(16) AS userStories, Assignables.Where(EntityType.name == "Bug").Sparkline(16) AS bugs } as sparklines']},build:{type:"build",data:[a,"tags",v,"buildDate"],lazy:["id",D]},projectmember:{type:"projectmember",data:["id",'"projectmember" as type',v,"membershipStartDate as startDate","membershipEndDate as endDate","{User.fullName, User.avatarUri} as user","allocation"]}},h=["id","name","isCurrent","EffortCompleted() as effortCompleted","EffortTotal() as effortTotal","isNext","isPrevious","startDate","endDate","units","entityType.name AS type"],j=["id","name","isCurrent","canBeFinished","startDate","EffortSum() as effortSum","velocity","endDate","units","entityType.name AS type"],N=["id","firstName",'"user" as type',"lastName","email","avatarUri","isActive"],z=["id","name","entityType.name AS type"],E=e.without(j,"units"),F={team:{type:"team",data:["id","name","entityType.name AS type","icon"]},release:{type:"release",data:h},iteration:{type:"iteration",data:j},teamiteration:{type:"teamiteration",data:E},assigneduser:{type:"assigneduser",data:N},project:{type:"release",data:["id","name","entityType.name AS type","color"]},inboundrelations:{type:"inboundrelations",data:z},outboundrelations:{type:"outboundrelations",data:z}},k={team:{type:"team",data:["id","name","entityType.name AS type","icon","teamMembers.Select({User.id, User.firstName, User.lastName, User.email, User.avatarUri}) AS users"]},userstory:{type:"userstory",data:["id","name","entityType.name AS type","entityType","{entityState.name} as entityState","effort","units",r,v]},feature:{type:"feature",data:["id","name","entityType.name AS type","entityType","{entityState.name} as entityState","effort","units",r,v]},release:{type:"release",data:h},iteration:{type:"iteration",data:j},teamiteration:{type:"teamiteration",data:E},assigneduser:{type:"assignedUser",data:N},project:{type:"release",data:["id","name","entityType.name AS type","color"]},inboundrelations:{type:"inboundrelations",data:z},outboundrelations:{type:"outboundrelations",data:z}},I=function(t,a){var s=R[t],n=[];return e.each(a,function(t){var a=s[t]||[];n=e.union(n,a)}),{type:s.type,data:"{"+e.compact(n).join(",")+"}"}};return e.each(k,function(t,a){k[a].data="{"+e.compact(t.data).join(",")+"}"}),e.each(F,function(t,a){F[a].data="{"+e.compact(t.data).join(",")+"}"}),t.extend({augmentCells:function(t,a){a=a||["data","lazy"];var s=t.types;return e.each(s,function(e,t){e=e.toLowerCase(),R.hasOwnProperty(e)&&(s[t]=I(e,a))}),t},augmentAxisY:function(e){if(e.types&&e.types.length){var t=e.types[0].toLowerCase();k.hasOwnProperty(t)&&(e.data=k[t].data)}return e},augmentAxisX:function(e){if(e.types&&e.types.length){var t=e.types[0].toLowerCase();F.hasOwnProperty(t)&&(e.data=F[t].data)}return e},augmentCellsLazyInfo:function(t){var a=e.deepClone(t),s=a.cells.types;return e.each(s,function(e,t){var a=e.type.toLowerCase();R.hasOwnProperty(a)&&(s[t]=I(a,["lazy"]))}),a}})});