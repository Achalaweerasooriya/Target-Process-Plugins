define(["Underscore"],function(){return{general:[{label:"has 'wow' in tags or in name",value:"?'wow' in Tags or 'wow' in Name"},{label:"created last week",value:"?CreateDate > Today - 7(days)"},{label:"entities with inbound blockers",value:"?InboundRelations.Where(RelationType is 'Blocker')"}],projectMember:[{label:"fully allocated",value:"?Allocation is 100"},{label:"partially allocated",value:"?Allocation < 100"},{label:"allocated in the future",value:"?MembershipStartDate > today"}],assignable:[{label:"not done",value:"?EntityState.IsFinal != true"},{label:"assigned to a person with last name 'Gates'",value:"?AssignedUser.Where(LastName is 'Gates')"},{label:"with some effort",value:"?Effort > 0"},{label:"assigned to me",value:"?AssignedUser.Where(it is Me)"}],feature:[{label:"assigned to release started after 04-Mar-2013",value:"?Release.StartDate > '04-Mar-2013'"},{label:"has user stories with time spent",value:"?UserStories.Where(TimeSpent > 0)"}],team:[{label:"small teams",value:"?TeamMembers.Count < 4"},{label:"teams without related projects",value:"?TeamProjects.Count is 0"}],testCase:[{label:"failed today",value:"?LastStatus is False and LastRunDate is today"},{label:"for user story 'Make us happy'",value:"?UserStory is 'Make us happy'"}],entityState:[{label:"not done",value:"?IsFinal is False"},{label:"only in progress states",value:"?IsInitial is false and IsFinal is false and IsPlanned is false"},{label:"'developer' is responsible",value:"?Role is 'Developer'"},{label:"name starts with 'in'",value:"?Name.StartsWith('in')"}],tag:[{label:"Tags with user stories from project 'Triads'",value:"?Generals.Count > 0 and Generals.Where(EntityType is 'UserStory') and Generals.Where(Project.Name is 'Triads')"},{label:"Tags that starts with 'A' or 'B'",value:"?Name.StartsWith('A') or Name.StartsWith('B')"},{label:"Tags that contains 'rest' or 'soap'",value:"?Name.Contains('rest') or Name.Contains('soap')"}],impediment:[{label:"with critical priority",value:"?Priority is 'Critical'"},{label:"resolved",value:"?EntityState.IsFinal is true"},{label:"email of responsible contains 'ted'",value:"?Responsible.Email.Contains('ted')"},{label:"related to entities with 'rest' in name",value:"?Assignable.Name.Contains('rest')"}],iteration:[{label:"started last month",value:"?StartDate > today - 30(days)"},{label:"backlog",value:"?it is None"},{label:"in releases that have 'gold' in name",value:"?Release.Name.Contains('gold')"}],time_container:[{label:"current and backlog",value:"?it is Current"},{label:"current only",value:"?it is Current and it is not none"},{label:"future and backlog",value:"?it is Future"},{label:"past and backlog",value:"?it is Past"}],release:[{label:"started last year",value:"?StartDate > today - 365(days)"},{label:"without iterations",value:"?Iterations.Count is 0"}],role:[{label:"name starts with 'dev'",value:"?Name.StartsWith('dev')"},{label:"roles with effort and for pair of people",value:"?HasEffort is True and IsPair is True"}],severity:[{label:"most severe bugs",value:"?Importance is 1"},{label:"severity contains 'cri' and ends with 'cal'",value:"?Name.Contains('cri') and Name.EndsWith('cal')"}],requestType:[{label:"types with some requests",value:"?Requests.Count > 0"},{label:"types with name 'Issue'",value:"?Name is 'Issue'"}],testPlan:[{label:"without test runs",value:"?TestPlanRuns.Count is 0"},{label:"from projects where name contains 'tp'",value:"?Project.Name.Contains('tp')"}],process:[{label:"default process",value:"?IsDefault is True"},{label:"unused process",value:"?Projects.Count is 0"}],priority:[{label:"most important",value:"?Importance is 1"},{label:"name starts with 'must'",value:"?Name.StartsWith('must')"}],teamIteration:[{label:"started last month",value:"?StartDate > today - 30(days)"},{label:"backlog",value:"?it is None"}],assignment:[{label:"developers or qa engineers",value:"?Role is 'Developer' or Role is 'QA Engineer'"},{label:"persons from Project A",value:"?It is not none and ProjectMembers.Where(Project is 'Project A')"},{label:"added this year",value:"?CreateDate > today - 365(days)"},{label:"last name starts with 'D'",value:"?LastName.StartsWith('D')"},{label:"active admins",value:"?IsActive is true and IsAdministrator is true"}],user:[{label:"developers or qa engineers",value:"?Role is 'Developer' or Role is 'QA Engineer'"},{label:"added this year",value:"?CreateDate > today - 365(days)"},{label:"last name starts with 'D'",value:"?LastName.StartsWith('D')"},{label:"active admins",value:"?IsActive is true and IsAdministrator is true"}],releasable:[{label:"belongs to the current release",value:"?Release is Current"},{label:"belongs to a future release",value:"?Release is Future"}],project:[{label:"only active projects",value:"?IsActive is True"},{label:"problematic projects",value:"?Bugs.Count > 1000"}],task:[{label:"user story contains 'zoom' in name",value:"?UserStory.Name.Contains('zoom')"}],request:[{label:"not replied or without comments",value:"?IsReplied is False or Comments.Count is 0"}],bug:[{label:"belongs to the last 3 team iterations",value:"?TeamIteration is Past(3)"},{label:"with 'Confused' severity",value:"?Severity.Name is 'Confused'"}],userStory:[{label:"belongs to the 2 future iterations",value:"?Iteration is Future(2)"},{label:"without tasks",value:"?Tasks.Count is 0"},{label:"belongs to 'Quick Add' feature ",value:"?Feature is 'Quick Add'"},{label:"belongs to the current iteration",value:"?Iteration is Current"},{label:"assigned to 'Delta' team",value:"?Team is 'Delta'"}],datetime:[{label:"10 days from the past",value:"?It >= today - 10(days)"},{label:"10 days from the future",value:"?It >= today and It <= today + 10(days)"},{label:"10 days from the past and 10 days from the future",value:"?It >= today - 10(days) and It <= today + 10(days)"},{label:"Today",value:"?It == today"}],inboundRelation:[{label:"entities with outbound blockers",value:"?OutboundRelations.Where(RelationType is 'Blocker')"},{label:"entities with more than 10 outbound relations",value:"?OutboundRelations.Count > 10"},{label:"entities with outbound bugs",value:"?OutboundRelations.Where(Outbound.EntityType is 'Bug')"}],outboundRelation:[{label:"entities with inbound blockers",value:"?InboundRelations.Where(RelationType is 'Blocker')"},{label:"entities with more than 10 inbound relations",value:"?InboundRelations.Count > 10"},{label:"entities with inbound bugs",value:"?InboundRelations.Where(Inbound.EntityType is 'Bug')"}],effort:[{label:"Fibonacci",value:"1,2,3,5,8,13,21"},{label:"Planning Poker",value:"0.5,1,2,3,5,8,13,20,40,100"},{label:"Linear",value:"1,2,3,4,5,6,7,8,9,10"}]}});