define(["Underscore","jQuery","tau/models/quick.add/model.board.quick.add.base","tau/services/service.features"],function(t,e,i,n){var o=new n;return i.extend({getTypes:function(){var t=["feature","userstory","task","bug","request","testcase","testplan","impediment","release","iteration","teamiteration","build","program","project","team","user"];return o.isEnabled("entity.epics")&&t.unshift("epic"),t},getViewMode:function(){return"list"},getDefinition:function(t){var e={global:{acid:t},cells:{types:this.getTypes()}};return e},getSingleCellSliceDefinition:function(t,e){var i={global:{acid:t},cells:{types:[e]}};return i},resolveSliceAddData:function(t){var i=e.Deferred(),n=t.context.configurator;return this.context?n.getApplicationContextService().getApplicationContext(this.context).then(function(e){this.getActions(e,t,i)}.bind(this)):n.getAppStateStore().get({fields:["acid"]}).then(function(e){this.getActions(e,t,i)}.bind(this)),i},getActions:function(e,i,n){var o=e.acid,c=this.getDefinition(o),s=i.context.configurator.getSliceFactory().create({definition:c});s.listModeActionsV2().then(function(e){var c={};c.action=e.data.items[0],t.isEmpty(c.action)?this.processEmptyAddButtonAction(i,o,n):this.processAddButtonAction(c,s,i,n)}.bind(this))},processAddButtonAction:function(e,i,n,o){e.addAction=t.find(e.action.fixed.items,function(t){return"AddAction"==t.type}),o.resolve({slice:i,types:this.getProcessedTypes(n,e.addAction.data.types),action:e.action,viewMode:this.getViewMode(),isGeneralAdd:!0})},processEmptyAddButtonAction:function(t,e,i){t.context.configurator.getApplicationContextService().getApplicationContext({acid:e},{success:function(t){var e={isEmpty:!0};1==t.selectedProjectIds.length&&"null"==t.selectedProjectIds[0]&&1==t.selectedTeamIds.length&&"null"==t.selectedTeamIds[0]&&(e.emptyContext=!0),i.reject(e)}})},getProcessedTypes:function(t,e){return e},doAdd:function(e,i,n){var o=t.deepClone(n);o.slice=this.buildReadyToAddSlice(n.slice,i),this._super(e,i,o)},buildReadyToAddSlice:function(e,i){var n=this.config.context.configurator,o=t.find(e.config.definition.cells.types,function(t){return t==i.type.toLowerCase()
}),c=this.getSingleCellSliceDefinition(e.config.definition.acid,o);return n.getSliceFactory().create({definition:c})}})});