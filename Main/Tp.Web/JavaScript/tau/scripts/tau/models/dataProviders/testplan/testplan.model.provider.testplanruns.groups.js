define(["Underscore","tau/models/dataProviders/model.provider.groups.base","tau/models/dataProviders/strategies/model.provider.groups.strategy.states"],function(_,BaseProvider,Strategy){return BaseProvider.extend({init:function(config){this._super(config),this.strategy=new Strategy},fetch:function(key,items,fnCallback){var projectIds=_(items).pluck("projectId"),store=this.config.store,projConfig={fields:[{process:["id"]}],list:!0};store.get("projects",projConfig,{scope:this,success:this.onProjects(projectIds,key,fnCallback)}).done()},onProjects:function(criteriaProjects,key,fnCallback){return function(r){var processIds=_(r.data).chain().select(function(proj){return _(criteriaProjects).include(proj.id)}).map(function(proj){return proj.process.id}).uniq().value(),fnFilter=function(state){var typeName=(state.entityType.name||"").toLowerCase();return typeName==="testplanrun"&&_(processIds).include(state.process.id)};return this._fetchState(key,fnFilter,fnCallback)}},moveToGroup:function(item,group,prevGroup,callback){var store=this.config.store;return this.strategy.moveToGroup(store,item,group,prevGroup,callback)},isAvailableForItem:function(item,group,currentGroup){return this.strategy.isAvailableForItem(item,group,currentGroup)},getCommentRequirements:function(item,groups,currentGroup){return this.strategy.getCommentRequirements(item,groups,currentGroup)}})})