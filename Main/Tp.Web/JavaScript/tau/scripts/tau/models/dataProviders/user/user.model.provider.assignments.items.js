define(["Underscore","tau/models/dataProviders/model.provider.items.base"],function(t,e){return e.extend({fetch:function(e){var i=this.config.context.entity.id,n=this.config.store,r=this,a=["id",{entityType:["id","name"]},"name","numericPriority","tags","isPrivate",{entityState:this.fields.entityStateWithComment},{owner:["id","firstName","lastName","avatarUri"]},{responsible:["id","firstName","lastName","avatarUri"]},{project:["id","abbreviation"]}],s={id:i},o={fields:[{assignable:["id",{entityType:["id","name"]},"name","numericPriority","tags","effort","effortCompleted","effortToDo","timeSpent","timeRemain",{entityState:this.fields.entityStateWithComment},{roleEfforts:["id","effort","effortToDo",{role:["id","name","hasEffort"]}]},{assignments:["id",{role:["id"]},{generalUser:r.fields.generalUser}]},{project:["id","abbreviation"]}]}],$query:{assignable:{entityState:{isFinal:0},project:{isActive:1}},generalUser:s}},f=[function(e){n.find("assignment",o).done(function(i){var n=[];t.each(i[0].data,function(t){t=t.assignable,t&&(t.__type="assignable",n.push(t))}),e(!1,n)})},function(t){n.find("impediment",{fields:a,$query:{entityState:{isFinal:0},responsible:s}}).done(function(e){t(!1,e[0].data)})}];t.series(f,function(i,n){var a=[];t.each(n,function(t){a=a.concat(t)}),e(r._convertData(a))})},_convertData:function(e){return e=this._super(e),this._calculateEffortToMaximum(t.filter(e,function(t){return"assignable"==t.__type})),e=this._removeDuplicates(e),this._sortByPriority(e)},_removeDuplicates:function(e){var i={},n=t.filter(e,function(t){var e=i.hasOwnProperty(t.id);return i[t.id]=!0,0==e});return n},_convertItem:function(e){var i={id:e.id,name:e.name,numericPriority:e.numericPriority,__type:e.entityType.name,entityState:{id:e.entityState.id,name:e.entityState.name,isInitial:e.entityState.isInitial,isFinal:e.entityState.isFinal,numericPriority:e.entityState.numericPriority},tags:this._processTags(e),projectId:e.project?e.project.id:void 0,project:e.project,entitiesCount:0,url:this.config.context.configurator.getUrlBuilder().getNewViewUrl(e.id,e.entityType.name,!0)};
return"assignable"==e.__type?t.extend(i,{assignments:this._processAssignments(e),effort:this._getEffortData(e)}):"impediment"==e.__type&&t.extend(i,{responsible:e.responsible,effortMock:{}}),i.visibleEntityState=i.entityState,i}})});