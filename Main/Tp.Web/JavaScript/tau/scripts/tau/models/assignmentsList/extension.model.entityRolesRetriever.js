define(["Underscore","tau/models/extension.model.base"],function(e,t){return t.extend({category:"model entity roles retriever extension","bus registerStoreRequest":function(){var e=this.config.context.entity||{entityType:{}},t={role:["id","name","hasEffort"]};this.fire("get",{type:e.entityType.name,query:{id:e.id,fields:[{roleEfforts:["id","effort","effortToDo",t,{assignable:["id"]}],list:!0},{entityState:[{role:["id"]}]}]},callback:{scope:this,success:this.onRoleEffortsRetrieved}})},"bus userGroupWasCreated":function(t){var o=t.data||{},i=o.role||{};if(i.hasEffort){var r=this.entity.roleEfforts;e.each(r,function(e){return e.role.id==i.id?(o.roleEffort={effort:this.floatToString(e.effort),remain:this.floatToString(e.effortToDo),id:e.id},!0):void 0},this),this.fire("roleEffortsReady",r)}else o.roleEffort=null},getRoles:function(t){var o=t.entityState.role&&t.entityState.role.id;return e(t.roleEfforts).map(function(e){var t=e.role;return t.isResponsible=t.id==o,t})},onRoleEffortsRetrieved:function(e){this.entity=e.data;var t=this.getRoles(this.entity);this.fire("rolesReady",t)},"bus extendDataToBind":function(e){e.data||{}}})});