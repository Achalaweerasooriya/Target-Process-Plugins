define(["Underscore","tau/models/model.leadCycleTime","tau/models/dataprocessor/model.processor.implementationHistory"],function(_,ModelBase,dataProcessor){return ModelBase.extend({onInit:function(){var context=this.config.context,entityType="implementationHistory",entityId=this.config.context.entity.id;this.store.evictProperties(entityId,"implementationHistory",["statistics"]),this.store.get(entityType,{id:context.entity.id,fields:["id","statistics"]}).get("process",{id:context.getProcessId(),nested:!0,fields:[{entityStates:["id","name","isInitial","isFinal","isPlanned","numericPriority",{entityType:["id","name"]},{role:["id"]}]}]}).get("user",{fields:["id","firstName","lastName"]}).get("roles",{fields:["id","name"]}).get(this.config.context.entity.entityType.name,{id:entityId,fields:["leadTime","cycleTime"]}).done({scope:this,success:this.onDone}),this.store.unbind(this),this._bindToStoreChanges()},_bindToStoreChanges:function(){this._bindToStoreAfterSafe(),this._bindToStoreAfterRemove()},_bindToStoreAfterSafe:function(){this.store.on({eventName:"afterSave",type:this.config.context.entity.entityType.name,listener:this,filter:{id:this.config.context.entity.id},hasChanges:["entityState"]},this._getOnStoreChangesProxy()),_.each(this._getStoreObservableEntityTypes(),function(entityType){this.store.on({eventName:"afterSave",type:entityType,listener:this},this._getOnStoreChangesProxy())},this)},_bindToStoreAfterRemove:function(){_.each(this._getStoreObservableEntityTypes(),function(entityType){this.store.on({eventName:"afterRemove",type:entityType,listener:this},this._getOnStoreChangesProxy())},this)},_getStoreObservableEntityTypes:function(){if(!this._storeObservableEntityTypes){var entityList=["assignment","impediment"];switch(this.config.context.entity.entityType.name){case"userstory":entityList.push("task","bug");break;case"feature":entityList.push("userstory");break;case"request":entityList.push("feature","userstory","task","bug")}this._storeObservableEntityTypes=entityList}return this._storeObservableEntityTypes},_onStoreChanges:function(evt){this.store.evictProperties(this.config.context.entity.id,"implementationHistory",["statistics"]),this.fire("afterUpdate")},_getOnStoreChangesProxy:function(){return this._onStoreChangesProxy||(this._onStoreChangesProxy=_.bind(this._onStoreChanges,this)),this._onStoreChangesProxy},shouldShowLeadCycleTimes:function(){var entityType=this.config.context.entity.entityType.name;return["userstory","bug","feature"].indexOf(entityType.toLowerCase())!=-1},onDone:function(response){if(!this.config)return;var cycleTime=response[4].data.cycleTime,cycleMinutes=this.convertDayToMinutes(cycleTime).toFixed(0),times={};this.shouldShowLeadCycleTimes()&&(times={leadTime:this.getLongTime(response[4].data.leadTime),cycleTime:cycleMinutes>0?this.getLongTime(cycleTime):null});var data=dataProcessor.transform(_.extend({response:response,entityTypeName:this.config.context.entity.entityType.name,terms:this.config.context.getTerms()},times));this.fire("dataBind",data)}})})