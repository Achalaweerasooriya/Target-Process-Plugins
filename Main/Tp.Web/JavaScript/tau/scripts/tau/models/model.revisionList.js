define(["Underscore","tau/core/model-base","tau/utils/utils.date"],function(_,ModelBase,dateUtils){return ModelBase.extend({retrieveRevisions:function(entities){var store=this.store,revisionFields=["id","sourceControlId","description","commitDate",{author:["firstName","lastName"]},{revisionFiles:["id","fileName","fileAction"]}];for(var i=0;i<entities.length;i++)store=store.get(entities[i].type,{id:entities[i].id,nested:!0,fields:["id",{revisions:revisionFields}]});store.done({success:this.onRevisionsRetrieved,scope:this})},onInit:function(){var self=this,assignable=self.config.context.entity,entityType=assignable.entityType.name,entityId=assignable.id,entities=[{type:entityType,id:entityId}],store=this.store;entityType.toLowerCase()=="userstory"?store.get(entityType,{id:entityId,fields:[{tasks:["id"]}]}).done({success:this.onTasksIdRetrieved,scope:this}):this.retrieveRevisions(entities)},onTasksIdRetrieved:function(result){var us=result[0].data,entities=[{type:us.__type,id:us.id}];entities=entities.concat(_.map(us.tasks,function(task){return{id:task.id,type:task.__type}})),this.retrieveRevisions(entities)},onRevisionsRetrieved:function(result){var revisions=_.pluck(result,"data");revisions=_.pluck(revisions,"revisions"),revisions=_.flatten(revisions),this.bindRevisions(revisions)},onRevisionIdsRetrieved:function(result){var allRevisions=_.clone(result[0].data.revisions);if(result.length>1){var revisionsOfTasks=_.pluck(result[1].data,"revisions");_.each(revisionsOfTasks,function(revisions){allRevisions=allRevisions.concat(revisions)})}var revisionsId=_.pluck(allRevisions,"id")},bindRevisions:function(revisions){var actionText={Add:"Added",Delete:"Deleted",Modify:"Modified"};revisions=_.sortBy(revisions,function(revision){return-revision.id}),this.fire("dataBind",{items:_.map(revisions,function(revision){var author=revision.author||{firstName:"unknown",lastName:""},authorName=_.trim([author.firstName,author.lastName].join(" ")),refs={commitDate:dateUtils.format.datetime.short(revision.commitDate),author:authorName,revisionFiles:_.map(revision.revisionFiles,function(revisionFile){return _.extend(_.clone(revisionFile),{fileAction:actionText[revisionFile.fileAction]||revisionFile.fileAction})})};return _.extend(_.clone(revision),refs)})})},onEntityRetrieved:function(result){var revisions=result.data.revisions;this.bindRevisions(revisions)},"bus evictTestCases":function(){var assignable=this.config.context.entity;this.store.evictProperties(assignable.id,assignable.entityType.name,["testCases","testCases-count"])}})})