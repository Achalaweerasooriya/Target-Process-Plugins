define(["jQuery","Underscore","tau/core/model-base","tau/utils/utils.date","tau/core/termProcessor","tau/models/dataprocessor/model.processor.context"],function(t,e,i,n,s,o){return i.extend({init:function(){this.name="Finish Iteration",this._super.apply(this,arguments)},onInit:function(){var t=this.config.context.entity,i={iteration:"project",teamiteration:"team"},n=i[t.type];if(!n)throw"It's only possible to use only iterations and team iterations here. Actual "+t.type;var s={};s[n]=["id"],this._getContext(this.config.context.configurator,t).done(function(i){this.store.get(t.type,{id:t.id,fields:["id","name","startDate","endDate",s]},{scope:this,success:e.bind(this.onIterationRetrieved,this,n,i)}).done()}.bind(this))},_getContext:function(e,i){var n=t.Deferred();return e.getApplicationContextService().getApplicationContext({ids:[i.id]},{success:function(t){var e=o({applicationContext:t}),i=new s(e.getTerms());n.resolve(i)}}),n},"bus beforeInit:last + finishIteration":function(t,i,n){var s=i.config.context.configurator,o=s.getActionsService();this.fire("beforeFinishIteration");var r={iteration:"finishIteration",teamIteration:"finishTeamIteration"},a=r[n.type];if(!a)throw"It's only possible to use only iterations and team iterations here. Actual "+n.type;o[a](n.from,n.to,n.useMoveInsteadSplit,e.bind(this._finishIsSuccessful,this),e.bind(this._finishIsFailed,this))},_finishIsSuccessful:function(){this.fire("iterationIsFinished",{successful:!0})},_finishIsFailed:function(e){var i=t.parseJSON(e.responseText).Message;this.fire("iterationIsFinished",{successful:!1,reason:i})},_convertIterationDates:function(t){return t.startDate=n.convertToTimezone(t.startDate),t.endDate=n.convertToTimezone(t.endDate),t},onIterationsRetrieved:function(t,i,n){var s=e(n.data).chain().map(this._convertIterationDates).sortBy(function(t){return+t.startDate}).value();this.fire("dataBind",{iteration:this._convertIterationDates(t),iterations:s,termProcessor:i})},onIterationRetrieved:function(t,i,n){var s=n.data,o={};
o[t+".id"]={$eq:s[t].id},o.id={$ne:s.id},this.store.find(s.__type,{fields:["id","name","startDate","endDate"],$query:o,$orderBy:"startDate"},{scope:this,success:e.bind(this.onIterationsRetrieved,this,s,i)}).done()}})});