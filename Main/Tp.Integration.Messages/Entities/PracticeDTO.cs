//-----------------------------------------------------------------------------
// This code was generated by a tool.
// Changes to this file will be lost if the code is regenerated.
//-----------------------------------------------------------------------------
using System;
using Tp.Integration.Common;

namespace Tp.Integration.Common
{
    /// <summary>
    /// Data Transfer object of Practice. Represents practice entity. For example: Planning, Bug Tracking, Time Tracking, etc. Process consists of Practices.
    /// </summary>
	[Serializable]
	public partial class PracticeDTO : DataTransferObject
	{
        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        /// <value>The ID.</value>		
		[PrimaryKey]
		public override int? ID
		{
			get { return PracticeID; }
			set
			{
				if (value == int.MinValue)
					value = null;

				PracticeID = value;
			}
		}

        /// <summary>
        /// Gets or sets the Practice ID.
        /// </summary>
        /// <value>The Practice ID.</value>
		[PrimaryKey]
		public int? PracticeID { get; set; }
		

		/// <summary>
        /// Gets or sets the Name. Name of the practice. For example, Planning
        /// </summary>
        /// <value>The Name.</value>
		public String Name { get; set; }

		/// <summary>
        /// Gets or sets the Description. Brief description of the practice
        /// </summary>
        /// <value>The Description.</value>
		public String Description { get; set; }

		/// <summary>
        /// Gets or sets the Always On. Defines whether practice could be disabled. For example, Planning practice includes all core features and could not be disabled
        /// </summary>
        /// <value>The Always On.</value>
		public Boolean? AlwaysOn { get; set; }
		

		
	}
	
	
	/// <summary>
    /// Practice fields
    /// </summary>
	public enum PracticeField
	{
        /// <summary>
        /// Name
        /// </summary>		
		Name,
        /// <summary>
        /// Description
        /// </summary>		
		Description,
        /// <summary>
        /// Always On
        /// </summary>		
		AlwaysOn,
	}
}